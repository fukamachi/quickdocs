
(:TYPE :SYSTEM :NAME "cl-svm" :AUTHOR "Red Daly <reddaly@gmail.com>"
 :MAINTAINER NIL :VERSION "2.9" :LICENCE "Communist license" :DESCRIPTION ""
 :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-SVM" :FULL-NAME "CL-SVM" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "DOT-PRODUCT" :PACKAGE-NAME "CL-SVM" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "V1" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
      (:NAME "V2" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "TRAINING-PAIR-BIND" :PACKAGE-NAME "CL-SVM" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "X-VAR" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
       (:NAME "Y-VAR" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL))
      (:NAME "TRAINING-PAIR" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds the symbols named by x-var and y-var to the x and y components of a training pair.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEBUG-OUTPUT*" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "*STANDARD-OUTPUT*")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRAIN-SVM" :PACKAGE-NAME "CL-SVM" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TRAINING-PAIRS" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KKT-TOLERANCE" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL) 0.005)
      ((:NAME "KERNEL" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DOT-PRODUCT" :PACKAGE-NAME "CL-SVM" :EXTERNALP T)))
      ((:NAME "C" :PACKAGE-NAME "CL-SVM" :EXTERNALP NIL) 1))
     :DOCUMENTATION
     "Trains a simple SVM using an arbitrary kernel.  Training-pairs is a sequence
of of pairs, where the car of each pair is a vector of numbers and the cdr is either -1 or 1.

This will return three values:  The first value is a function that can be called with
an argument of the same dimension as a training example.  It will return either t
or nil.

The other two return values are the vector w and the scalar b that define the plane of the form
w . x - b  = 0.

Implementation note:
The algorithm used to optimize the SVM is the SMO algorithm first  described by Platt.  It is
actually not even that algorithm, yet, because we apply no heuristic to choose which
constraints to optimize--we just select random ones.  Also we do not account
for the case where n=0 in the code below, which is done in the actual SMO algorithm."))
   :EXTERNAL-SYMBOLS
   ((:NAME "TRAIN-SVM" :PACKAGE-NAME "CL-SVM" :EXTERNALP T)
    (:NAME "TRAINING-PAIR-BIND" :PACKAGE-NAME "CL-SVM" :EXTERNALP T)
    (:NAME "DOT-PRODUCT" :PACKAGE-NAME "CL-SVM" :EXTERNALP T)))))
