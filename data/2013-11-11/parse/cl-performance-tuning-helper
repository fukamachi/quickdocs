
(:TYPE :SYSTEM :NAME "cl-performance-tuning-helper" :AUTHOR "SUZUKI Shingo"
 :MAINTAINER "SUZUKI Shingo" :VERSION "0.3.0" :LICENCE "MIT" :DESCRIPTION
 "A simple performance tuning helper tool box for Common Lisp"
 :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-PERFORMANCE-TUNING-HELPER" :FULL-NAME
   "CL-PERFORMANCE-TUNING-HELPER" :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "CLOAD" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATH" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
       NIL))
     :DOCUMENTATION "load after compile a file")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASMOUT" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FUN" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATH" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
       NIL))
     :DOCUMENTATION "output DISASSEMBLE result into a file")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PERFORMANCE" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NUM-REPEATS" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
       :EXTERNALP NIL)
      (:NAME "DEBUGGER-P" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
       :EXTERNALP NIL)
      ((:NAME "FUNC" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
        NIL)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "ARGS" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
        NIL))
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
       NIL))
     :DOCUMENTATION "do performance test with specified arguments

usage: (performance num-repeats debugger-p (function &rest args))

num-repeats: designates a number of repeats in positive integer.
If you want to reference current repeat count from testing function,
you should specify num-repeats as following format:
  (count-variable positive-integer).

debugger-p: designate enable to call debugger for ANY conditions.

function: a symbol of function or a lambda expression.

e.g.
(let ((max 5))
  (pth:performance (i max) nil (format t \"SAMPLE: ~d of ~d~%\" i max)) )
=> t
---- 
;;; performance test for FORMAT MAX times
;;;   do (FORMAT T \"SAMPLE: ~d of ~d~%\" I MAX)
SAMPLE: 0 of 5
SAMPLE: 1 of 5
SAMPLE: 2 of 5
SAMPLE: 3 of 5
SAMPLE: 4 of 5

(and following platform dependant output of TIME function)
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "TRASH-OUTPUTS" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP
       NIL))
     :DOCUMENTATION "trash system stream outputs:
*standard-output*,
*error-output*,
and *trace-output*."))
   :EXTERNAL-SYMBOLS
   ((:NAME "ASMOUT" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP T)
    (:NAME "TRASH-OUTPUTS" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
     :EXTERNALP T)
    (:NAME "CLOAD" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER" :EXTERNALP T)
    (:NAME "PERFORMANCE" :PACKAGE-NAME "CL-PERFORMANCE-TUNING-HELPER"
     :EXTERNALP T)))))
