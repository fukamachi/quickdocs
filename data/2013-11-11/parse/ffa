
(:TYPE :SYSTEM :NAME "ffa" :AUTHOR "Tamas K Papp" :MAINTAINER NIL :VERSION NIL
 :LICENCE "LLGPL" :DESCRIPTION "Foreign friendly arrays" :LONG-DESCRIPTION NIL
 :DEPENDS-ON ("CFFI" "CL-UTILITIES" "METABANG-BIND" "ITERATE") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "FFA" :FULL-NAME "FFA" :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*CFFI-AND-LISP-TYPES*" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'((:INT8 SIGNED-BYTE 8) (:UINT8 UNSIGNED-BYTE 8) (:INT16 SIGNED-BYTE 16)
  (:UINT16 UNSIGNED-BYTE 16) (:INT32 SIGNED-BYTE 32) (:UINT32 UNSIGNED-BYTE 32)
  (:FLOAT . SINGLE-FLOAT) (:DOUBLE . DOUBLE-FLOAT)
  (:COMPLEX-FLOAT COMPLEX SINGLE-FLOAT) (:COMPLEX-DOUBLE COMPLEX DOUBLE-FLOAT))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELT-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CFFI-ELT-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the Lisp array element-type matching cffi-elt-type, nil
if not found.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELT-TYPE-SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CFFI-ELT-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-ORIGINAL-ARRAY" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Find the original parent of a displaced array, return this and the
sum of displaced index offsets.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPLACE-ARRAY" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DIMENSIONS" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "INDEX-OFFSET" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a displaced array from array with the given dimensions and the
index-offset and the same element-type as array.  Tries to displace
from the original array.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PART-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)) :DOCUMENTATION
     "Return the appropriate part-type if cffi-type is complex, otherwise NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPLEX-MEM-AREF" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "PART-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "aref workaround for C99 complex types.  Part-type is NOT checked.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "COMPLEX-MEM-AREF" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :LAMBDA-LIST
     ((:NAME "C" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "PART-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "setf aref workaround for C99 complex types.  Part-type is NOT checked.")
    (:TYPE :MACRO :SYMBOL (:NAME "ITER%" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Common iteration for all cases below.  IMPORTANT: This macro
captures pointer-index, size, array-index and index-offset.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-ARRAY-TO-POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "LISP-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "INDEX-OFFSET" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Copy size elements from array (starting at index-offset) of type
lisp-type to the memory area that starts at pointer, coercing the
elements if necessary.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-ARRAY-FROM-POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "LISP-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "INDEX-OFFSET" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Copy size elements to an array (starting at index-offset) of
element type lisp-type from the memory area that starts at pointer,
coercing the elements if necessary.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PIN-TO-POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "INDEX-OFFSET" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION "Use SBCL's sb-sys:with-pinned-objects and
sb-ext:array-storage-vector for mapping an array to a memory location.
NOTE: checking that cffi-type matches the type of the array is the
responsibility of the user of this macro.  The total size of the array
is checked.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "COPY-TO-POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "INDEX-OFFSET" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "DIRECTION" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Allocate memory area and establish desired mapping between array
and pointer (copy in and/or out as needed).  Array will be available
at pointer, which is a local binding so you do whatever you want with
it (change its value etc).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VALID-DIRECTION-P" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "DIRECTION" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION "Test if the given direction is valid.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-POINTER-TO-ARRAY" :PACKAGE-NAME "FFA" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "POINTER" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "CFFI-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "SIZE" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
       (:NAME "DIRECTION" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION "See the documentation.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-POINTERS-TO-ARRAYS" :PACKAGE-NAME "FFA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-LISTS" :PACKAGE-NAME "FFA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "FFA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Same as with-pointer-to-array, but with multiple arrays, pointers,
etc.  parameter-lists needs to be a list of lists."))
   :EXTERNAL-SYMBOLS
   ((:NAME "WITH-POINTERS-TO-ARRAYS" :PACKAGE-NAME "FFA" :EXTERNALP T)
    (:NAME "ELT-TYPE" :PACKAGE-NAME "FFA" :EXTERNALP T)
    (:NAME "WITH-POINTER-TO-ARRAY" :PACKAGE-NAME "FFA" :EXTERNALP T)))))
