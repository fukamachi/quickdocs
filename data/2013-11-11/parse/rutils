
(:TYPE :SYSTEM :NAME "rutils" :AUTHOR NIL :MAINTAINER
 "Vsevolod Dyomkin <vseloved@gmail.com>" :VERSION "2.8.0" :LICENCE
 "3-clause MIT licence" :DESCRIPTION
 "A reasonable collection of basic utilities for syntactic
extension and basic data-structures hadling, developed over the years of
CL history by efforts of different individuals, and gathered under
the unbrella of a hierarchy of packages, which can be used
selectively on demand."
 :LONG-DESCRIPTION NIL :DEPENDS-ON ("NAMED-READTABLES") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.READTABLE" :FULL-NAME
   "REASONABLE-UTILITIES.READTABLE" :DOCUMENTATION "Readtable definition."
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "#{-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Literal syntax for hash-tables.

   Examples:

      CL-USER> #{:a 1 :b 2}
      #<HASH-TABLE :TEST EQL :COUNT 2>
      ;; holding 2 key/value pairs: ((:a . 1) (:b . 2))

      CL-USER> #{equalp \"a\" 1 \"b\" 2}
      #<HASH-TABLE :TEST EQUALP :COUNT 2>
      ;; holding 2 key/value pairs: ((\"a\" . 1) ...)
  ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "#`-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Literal syntax for zero/one/two argument lambdas.
   Use % as the function's argument, %% as the second.

   Examples:

   - #`(+ 2 %) => (lambda (&optional x y) (+ 2 x))
   - #`((1+ %) (print %)) => (lambda (&optional x) (1+ x) (print x))
   - #`(+ 1 2) => (lambda (&optional x y) (+ 1 2))
   - #`(+ % %%) => (lambda (&optional x y) (+ x y))
  ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "#/-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Literal syntax for raw strings (which don't need escapin of control chars).

   Example:

       CL-USER> #/This is a \"test\" string/#
       \"This is a \\\"test\\\" string\"
       ;; here \" are actually unescaped, but you can't write it in docstring :)
  "))
   :EXTERNAL-SYMBOLS
   ((:NAME "#`-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "#{-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "#/-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "%%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "RUTILS-RT" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "RUTILS-READTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.SYMBOL" :FULL-NAME
   "REASONABLE-UTILITIES.SYMBOL" :DOCUMENTATION
   "Symbol manipulation utilities." :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "EVAL-ALWAYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Wrap BODY in eval-when with all keys (compile, load and execute) mentioned.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ABBR" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SHORT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
       NIL)
      (:NAME "LONG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LAMBDA-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Abbreviate LONG macro or function name as SHORT. If LAMBDA-LIST is present,
also copy appropriate SETF-expander.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-GENSYM-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP NIL)
       "G"))
     :DOCUMENTATION
     "Return a list of LENGTH gensyms, using the second (optional,
defaulting to 'G') argument.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-GENSYMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NAMES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
        NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
       NIL))
     :DOCUMENTATION "Provide gensyms for given NAMES.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ONCE-ONLY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SPECS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Evaluate FORMS with names rebound to temporary variables, ensuring
that each is evaluated only once.

Each SPEC must be either a NAME, or a (NAME INITFORM), with plain
NAME using the named variable as initform.

Example:
CL-USER> (defmacro cons1 (x)
           (once-only (x)
            `(cons ,x ,x)))
CL-USER> (let ((y 0))
           (cons1 (incf y)))
(1 . 1)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-SYMBOL" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FORMAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "~a")
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Make a symbol in either PACKAGE or *PACKAGE* from OBJ according to FORMAT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-KEYWORD" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FORMAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "~a"))
     :DOCUMENTATION "Make a keyword from OBJ according to FORMAT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PACKAGE-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "List all symbols in a PACKAGE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PACKAGE-EXTERNAL-SYMBOLS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "List all symbols in a PACKAGE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RE-EXPORT-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FROM-PACKAGE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
       :EXTERNALP NIL)
      (:NAME "TO-PACKAGE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Make the exported symbols in FROM-PACKAGE be also exported from TO-PACKAGE."))
   :EXTERNAL-SYMBOLS
   ((:NAME "ENSURE-KEYWORD" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "PACKAGE-EXTERNAL-SYMBOLS" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "PACKAGE-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "EVAL-ALWAYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "WITH-GENSYMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "ABBR" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "ONCE-ONLY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "ENSURE-SYMBOL" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "RE-EXPORT-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.SYNTAX" :FULL-NAME
   "REASONABLE-UTILITIES.SYNTAX" :DOCUMENTATION "Syntax extensions."
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-PREDICATE-CASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "CASE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "PCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like CCASE, but uses given PRED instead of EQL to select appropriate CLAUSE.
Example usage:
CL-USER> (pccase '< 1
           (0  (print \"Below zero\"))
           (2  (print \"OK\")))
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like CCASE, but uses given PRED instead of EQL to select appropriate CLAUSE.
Example usage:
CL-USER> (pccase '< 1
           (0  (print \"Below zero\"))
           (2  (print \"OK\")))
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like ECASE, but uses given PRED instead of EQL to select appropriate CLAUSE.
Example usage:
CL-USER> (pecase '< 1
           (0  (print \"Below zero\"))
           (2  (print \"OK\")))
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-DESTRUCTURING-CASE" :PACKAGE-NAME
      "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "CASE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION "DCASE is a combination of CASE and DESTRUCTURING-BIND.
KEYFORM must evaluate to a CONS.

Clauses are of the form:

  ((CASE-KEYS . DESTRUCTURING-LAMBDA-LIST) FORM*)

The clause whose CASE-KEYS matches CAR of KEY, as if by CASE, CCASE, or ECASE,
is selected, and FORMs are then executed with CDR of KEY is destructured and
bound by the DESTRUCTURING-LAMBDA-LIST.

Example:

 (defun dcase-test (x)
   (dcase x
     ((:foo a b)
      (format nil \"foo: ~S, ~S\" a b))
     ((:bar &key a b)
      (format nil \"bar, ~S, ~S\" a b))
     (((:alt1 :alt2) a)
      (format nil \"alt: ~S\" a))
     ((t &rest rest)
      (format nil \"unknown: ~S\" rest))))

  (dcase-test (list :foo 1 2))        ; => \"foo: 1, 2\"
  (dcase-test (list :bar :a 1 :b 2))  ; => \"bar: 1, 2\"
  (dcase-test (list :alt1 1))         ; => \"alt: 1\"
  (dcase-test (list :alt2 2))         ; => \"alt: 2\"
  (dcase-test (list :quux 1 2 3))     ; => \"unknown: 1, 2, 3\"

 (defun decase-test (x)
   (dcase x
     ((:foo a b)
      (format nil \"foo: ~S, ~S\" a b))
     ((:bar &key a b)
      (format nil \"bar, ~S, ~S\" a b))
     (((:alt1 :alt2) a)
      (format nil \"alt: ~S\" a))))

  (decase-test (list :foo 1 2))        ; => \"foo: 1, 2\"
  (decase-test (list :bar :a 1 :b 2))  ; => \"bar: 1, 2\"
  (decase-test (list :alt1 1))         ; => \"alt: 1\"
  (decase-test (list :alt2 2))         ; => \"alt: 2\"
  (decase-test (list :quux 1 2 3))     ; =| error
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION "DCCASE is a combination of CCASE and DESTRUCTURING-BIND.
KEYFORM must evaluate to a CONS.

Clauses are of the form:

  ((CASE-KEYS . DESTRUCTURING-LAMBDA-LIST) FORM*)

The clause whose CASE-KEYS matches CAR of KEY, as if by CASE, CCASE, or ECASE,
is selected, and FORMs are then executed with CDR of KEY is destructured and
bound by the DESTRUCTURING-LAMBDA-LIST.

Example:


 (defun dccase-test (x)
   (dcase x
     ((:foo a b)
      (format nil \"foo: ~S, ~S\" a b))
     ((:bar &key a b)
      (format nil \"bar, ~S, ~S\" a b))
     (((:alt1 :alt2) a)
      (format nil \"alt: ~S\" a))))

  (decase-test (list :foo 1 2))        ; => \"foo: 1, 2\"
  (decase-test (list :bar :a 1 :b 2))  ; => \"bar: 1, 2\"
  (decase-test (list :alt1 1))         ; => \"alt: 1\"
  (decase-test (list :alt2 2))         ; => \"alt: 2\"
  (decase-test (list :quux 1 2 3))     ; =| continueable error
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEYFORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION "DECASE is a combination of ECASE and DESTRUCTURING-BIND.
KEYFORM must evaluate to a CONS.

Clauses are of the form:

  ((CASE-KEYS . DESTRUCTURING-LAMBDA-LIST) FORM*)

The clause whose CASE-KEYS matches CAR of KEY, as if by CASE, CCASE, or ECASE,
is selected, and FORMs are then executed with CDR of KEY is destructured and
bound by the DESTRUCTURING-LAMBDA-LIST.

Example:

 (defun decase-test (x)
   (dcase x
     ((:foo a b)
      (format nil \"foo: ~S, ~S\" a b))
     ((:bar &key a b)
      (format nil \"bar, ~S, ~S\" a b))
     (((:alt1 :alt2) a)
      (format nil \"alt: ~S\" a))))

  (decase-test (list :foo 1 2))        ; => \"foo: 1, 2\"
  (decase-test (list :bar :a 1 :b 2))  ; => \"bar: 1, 2\"
  (decase-test (list :alt1 1))         ; => \"alt: 1\"
  (decase-test (list :alt2 2))         ; => \"alt: 2\"
  (decase-test (list :quux 1 2 3))     ; =| error
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTRACT-FUNCTION-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Useful for macros that want to mimic the functional interface for functions
like #'eq and 'eq.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-SWITCH-BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "WHOLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DEFAULT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "SWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&WHOLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WHOLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      ((:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
       ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Evaluates first matching clause, returning its values, or evaluates and
returns the values of DEFAULT if no keys match.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ESWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&WHOLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WHOLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      ((:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
       ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like SWITCH, but signals an error if no key matches.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CSWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&WHOLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WHOLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      ((:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
       ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
         NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like SWITCH, but signals a continuable error if no key matches.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "K" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "V" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "REZ" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like DOLIST but iterates over key-value pairs (K V) in anything, that can be
   viewed as a table (hash-table, alist, plist, object).
   Autodeclares variables named _ as ignored.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "MULTIPLE-VALUE-PROG2" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FIRST-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
       :EXTERNALP NIL)
      (:NAME "SECOND-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Evaluates FIRST-FORM, then SECOND-FORM, and then FORMS. Yields as its value
all the value returned by SECOND-FORM.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
        NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Bind variables from BINDINGS to be active inside BODY, as if by LET*,
combined with MULTIPLE-VALUE-BIND, DESTRUCTURING-BIND and other -bind forms,
depending on the type of the first argument.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL)
      (:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ARG" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "DCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-PROG2" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "PCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "ESWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "PECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "PCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DOTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "CSWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :FULL-NAME
   "REASONABLE-UTILITIES.ANAPHORIC/IT" :DOCUMENTATION
   "Anaphoric control constructs with -it suffix and
automatic binding of test to it."
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "IF-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL)
      (:NAME "THEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like IF. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WHEN-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like WHEN. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Like AND. IT is bound to the value of the previous AND form.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOWHILE-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like DOWHILE. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "COND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like COND. IT is bound to the passed COND test."))
   :EXTERNAL-SYMBOLS
   ((:NAME "IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP T)
    (:NAME "COND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "AND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "DOWHILE-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "WHEN-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "IF-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :FULL-NAME
   "REASONABLE-UTILITIES.ANAPHORIC/A" :DOCUMENTATION
   "Anaphoric control constructs with a- prefix and
automatic binding of test to it."
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "AIF" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL)
      (:NAME "THEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like IF. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AWHEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like WHEN. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AAND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like AND. IT is bound to the value of the previous AND form.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ADOWHILE" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like DOWHILE. IT is bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ACOND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like COND. IT is bound to the passed COND test."))
   :EXTERNAL-SYMBOLS
   ((:NAME "IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP T)
    (:NAME "ADOWHILE" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A"
     :EXTERNALP T)
    (:NAME "AIF" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP T)
    (:NAME "ACOND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
     T)
    (:NAME "AAND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
     T)
    (:NAME "AWHEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/A" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.ANAPHORIC/LET" :FULL-NAME
   "REASONABLE-UTILITIES.ANAPHORIC/LET" :DOCUMENTATION
   "Anaphoric control constructs with -let suffix." :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "IF-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL)
       (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL))
      (:NAME "THEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like IF. VAR will be bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WHEN-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL)
       (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like WHEN. VAR will be bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Like AND. VAR will be bound to the value of the previous AND form")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOWHILE-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL)
       (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
        :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like DOWHILE. VAR will be bound to TEST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "COND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
       :EXTERNALP NIL))
     :DOCUMENTATION "Like COND. VAR will be bound to the passed COND test."))
   :EXTERNAL-SYMBOLS
   ((:NAME "IF-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "COND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "DOWHILE-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "WHEN-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "AND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND" :FULL-NAME
   "REASONABLE-UTILITIES.ANAPHORIC/BIND" :DOCUMENTATION
   "Anaphoric control constructs with -bind suffix." :SYMBOL-LIST NIL
   :EXTERNAL-SYMBOLS
   ((:NAME "COND-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND"
     :EXTERNALP T)
    (:NAME "DOWHILE-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND"
     :EXTERNALP T)
    (:NAME "AND-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND"
     :EXTERNALP T)
    (:NAME "IF-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND"
     :EXTERNALP T)
    (:NAME "WHEN-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/BIND"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.MISC" :FULL-NAME
   "REASONABLE-UTILITIES.MISC" :DOCUMENTATION
   "Basic control structures and predicates." :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "OR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "OR for 2 arguments as a function.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AND2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "AND for 2 arguments as a function.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "XOR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "XOR for 2 arguments as a function.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "XOR" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Evaluates the ARGS one at a time. If more than one is T,
evaluation stops and NIL is returned. If exactly one arg is T,
that value is returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Like <, but works for NIL values of X and Y.
Obviously, NIL is LESS, than anything, including itself.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NOT-MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Like <=, but works for NIL values of X and Y.
Obviously, NIL is NOT-MORE, than anything, including itself.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Like >, but works for NIL values of X and Y.
Obviously, NIL is not MORE, than anything, including itself.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NOT-LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Like >=, but works for NIL values of X and Y.
Obviously, NIL is not NOT-LESS, than anything, including itself.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "NAMED-LAMBDA" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "LAMBDA-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION
     "Expands into a lambda-expression within whose BODY NAME denotes the
corresponding function.")
    (:TYPE :TYPE :SYMBOL
     (:NAME "ARRAY-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "ARRAY-DIMENSION-LIMIT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "ARRAY-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "ARRAY-DIMENSION-LIMIT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "COERCEF" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "TYPE-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
       NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION "Modify-macro for COERCE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RANGE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "LIMIT" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION "Return a list of numbers, starting from START up to LIMIT
incremented by STEP (default 1).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAPTIMES" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "TIMES" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL))
     :DOCUMENTATION "Map FN with number range from 0 to TIMES (exclusive).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-INDEXED" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Map FN with 2 lists:
- numeric inidices for LIST, starting from 0
- LIST itself"))
   :EXTERNAL-SYMBOLS
   ((:NAME "AND2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "ARRAY-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "NOT-LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "ARRAY-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "MAP-INDEXED" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "MAPTIMES" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "RANGE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "COERCEF" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "XOR" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "NOT-MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "XOR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "OR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "NAMED-LAMBDA" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.LIST" :FULL-NAME
   "REASONABLE-UTILITIES.LIST" :DOCUMENTATION "List utilities." :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "LAST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL) 1))
     :DOCUMENTATION
     "Get the N-th element of LIST from end, starting from the last one (which
is number 1).")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LAST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL) 1))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUTLAST2" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL) 1))
     :DOCUMENTATION "Split LIST in 2 parts and return them as multiple values:
head and tail.  If (= N 1), which is the most common case,
the tail will be a single element, otherwise -- a list as well.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SINGLE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test wheather LIST contains exactly 1 element.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test wheather LIST contains exactly 2 elements.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test wheather LIST contains exactly 3 elements.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Wrap OBJ in a list, if it's not a list.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-OUTPUT-TO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OUT" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "A simple list analog of WITH-OUTPUT-TO-STRING, which supports the general
pattern of using list as an accumulator. OUT is bound to a fresh list, that
will be returned NREVERSE-D.  BODY is wraped in implicit block NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GROUP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Split LIST into a list of lists of length N.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLATTEN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Flatten possibly nested LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERLEAVE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list whose elements are taken from LIST and each of LISTS like this:
   1st of list, 1st of 1st of lists,..., 1st of last of lists, 2nd of list,...")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION
     "Return a list with N elements, which are taken from LIST by this formula:
    INDEX of ELEMENT = I * STEP for I from 0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PLISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test wheather LIST is a properly formed plist.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test wheather LIST is a properly formed alist.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALIST-TO-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Make a plist from an alist ALIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PLIST-TO-ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Make an alist from a plist PLIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Returns a propery-list with same keys and values as PLIST,
except that keys in the list designated by KEYS and values,
corresponding to them are removed. The returned property-list may share
structure with the PLIST, but PLIST is not destructively
modified. Keys are compared using EQ.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DELETE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Just like REMOVE-FROM-PLIST, but this version may destructively
modify the provided PLIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOC1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DEFAULT" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
       NIL)
      (:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TESTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
        NIL))
      ((:NAME "TEST-NOT" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NOTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Return a value in ALIST, whose key is eql to ITEM. Also as 2nd value return,
whether ITEM was found. If there is no such entry, returns DEFAULT.
The usual KEY, TEST and TEST-NOT arguments apply.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ATOMIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST-OR-VAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "APPENDF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for APPEND. Appends LISTS to the place designated by the first
argument.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "NCONCF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for NCONC. Concatenates LISTS to place designated by the first
argument.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "UNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for UNION. Saves the union of LIST and the contents of the
place designated by the first argument to the designated place.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "NUNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for NUNION. Saves the union of LIST and the contents of the
place designated by the first argument to the designated place. May modify
either argument.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "REVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for REVERSE. Copies and reverses the list stored in the given
place and saves back the result into the place.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "NREVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION
     "Modify-macro for NREVERSE. Reverses the list stored in the given place by
destructively modifying it and saves back the result into the place.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOPLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       (:NAME "VAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       (:NAME "PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VALUES" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-EQUAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "LIST2" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEYP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Returns true if every element of LIST1 matches some element of LIST2 and
every element of LIST2 matches some element of LIST1. Otherwise returns false.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZIP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Return a single list whose elements are lists
   of the consecutive elements of LISTS,
   until one of the LISTS ends.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZIP-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Return a single list whose elements are the results
   of applying FN to groups of the consecutive elements of LISTS,
   until one of the LISTS ends.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZIP*" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Return a single list whose elements are lists
   of the consecutive elements of LISTS,
   until one of the LISTS ends.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZIP*-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP NIL))
     :DOCUMENTATION "Return a single list whose elements are the results
   of applying FN to groups of the consecutive elements of LISTS,
   until one of the LISTS ends."))
   :EXTERNAL-SYMBOLS
   ((:NAME "NUNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "NREVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "LAST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WITH-OUTPUT-TO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "SET-EQUAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "UNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DELETE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "INTERLEAVE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ALIST-TO-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "REMOVE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "SINGLE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ZIP-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ENSURE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
     T)
    (:NAME "ZIP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ALISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "BUTLAST2" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PLIST-TO-ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "REVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "GROUP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "NCONCF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ASSOC1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "TAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "FLATTEN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "TRYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "APPENDF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ATOMIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PLISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.STRING" :FULL-NAME
   "REASONABLE-UTILITIES.STRING" :DOCUMENTATION "String utilities."
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "STRCAT" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STRING-DESIGNATORS" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
       :EXTERNALP NIL))
     :DOCUMENTATION "CONCATENATE all the strings in STRING-DESIGNATORS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRJOIN" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DELIM" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL)
      (:NAME "STRINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL))
     :DOCUMENTATION "Join STRINGS with DELIM.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BLANKP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test whether a STRING is blank (empty).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "FILENAME" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL))
     :DOCUMENTATION "Read a whole file by FILENAME into a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WHITE-CHAR-P" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Is CHAR a whitespace character (newline chars are also considered white).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Split STRING by WHITE-CHAR-P.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP NIL))
     :DOCUMENTATION
     "Efficient substring of STRING from START to END (optional), where both can be
negative, which means counting from the end.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREFIX" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL)
      (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test, whether STRING starts with PREFIX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENDS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SUFFIX" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL)
      (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Test, whether STRING ends with SUFFIX.")
    (:TYPE :TYPE :SYMBOL
     (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
      :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOLINES" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LINE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
        NIL)
       (:NAME "SRC" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "RESULT" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
        NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Iterate over each LINE in SRC (a stream or path to a file) as in DOLIST.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-OUT-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP NIL)
       (:NAME "PATH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
        NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAST-CHAR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Return the last character of STRING if it's not empty, otherwise - nil."))
   :EXTERNAL-SYMBOLS
   ((:NAME "STARTS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "SPLIT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "BLANKP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "LAST-CHAR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "STRJOIN" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "WITH-OUT-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "ENDS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "SLURP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "READ-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "WHITE-CHAR-P" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "STRCAT" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "SUBSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "DOLINES" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.HASH-TABLE" :FULL-NAME
   "REASONABLE-UTILITIES.HASH-TABLE" :DOCUMENTATION "Hash-table utilities."
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "SETHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "VAL" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Set VAL at KEY in hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TAKEHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Get and remove VAL at KEY in hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "REHASH-SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
       :EXTERNALP NIL)
      (:NAME "REHASH-THRESHOLD" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a copy of hash table HT, with the same keys and values.
The copy has the same properties as the original, unless overridden
by the keyword arguments.

Before each of the original values is set into the new hash-table,
KEY is invoked on the value. As KEY defaults to IDENTITY
a shallow copy is returned by default.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MERGE-HASH-TABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HTS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "From 1 or more HTS create a single one with TEST of HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Return a list of keys of hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Return a list of values of hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-FROM-PLIST" :PACKAGE-NAME
      "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HASH-TABLE-INITARGS" :PACKAGE-NAME
       "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a hash-table containing the keys and values, alternating in PLIST.
Hash table is initialized using the HASH-TABLE-INITARGS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-TO-PLIST" :PACKAGE-NAME
      "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Returns a list containing the keys and values of hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-FROM-ALIST" :PACKAGE-NAME
      "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HASH-TABLE-INITARGS" :PACKAGE-NAME
       "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a hash-table containing the keys and values, alternating in ALIST.
Hash table is initialized using the HASH-TABLE-INITARGS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HASH-TABLE-TO-ALIST" :PACKAGE-NAME
      "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Returns an alist containing the keys and values of hash-table HT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*STANDARD-OUTPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Pretty print hash-table HT to STREAM.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KV-PAIRS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
        :EXTERNALP NIL))
      (:NAME "HT" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Like WITH-ACCESSORS but for pairs in hash-table HT."))
   :EXTERNAL-SYMBOLS
   ((:NAME "SETHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
     T)
    (:NAME "HASH-TABLE-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "MERGE-HASH-TABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-TO-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "COPY-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "PRINT-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "TAKEHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-TO-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.TREE" :FULL-NAME
   "REASONABLE-UTILITIES.TREE" :DOCUMENTATION "Tree utilities." :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "DOTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP NIL)
       (:NAME "TREE-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP
        NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "RESULT-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE"
        :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP NIL))
     :DOCUMENTATION "The analog of DOLIST, operating on trees.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAPTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP NIL)
      (:NAME "TREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TREE-SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the number of nodes (internal & external) in the indicated tree."))
   :EXTERNAL-SYMBOLS
   ((:NAME "MAPTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "TREE-SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "DOTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.ITER" :FULL-NAME
   "REASONABLE-UTILITIES.ITER" :DOCUMENTATION
   "Iterate macro, using keywords for clauses." :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*GENVAR-COUNTER*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Counter of GENVAR's." :INITIAL-VALUE "0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENVAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "TEMP"))
     :DOCUMENTATION "A cross between GENSYM and GENTEMP.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYNONYM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Get SYNONYM for a SYMBOL. When there's no SYNONYM, return the SYMBOL itself.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFSYNONYM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SYNONYM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Set SYNONYM for a SYMBOL. ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AUGMENT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Add STUFF to the end of VAR list.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PREPEND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Add STUFF to the beginning of VAR list.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "ITERATE-VERSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Current version of Iterate." :INITIAL-VALUE "\"1.4.3\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+FILL-COL+" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "77")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+STANDARD-TYPE-SYMBOLS+" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Table 4-1 of the Common Lisp Manual" :INITIAL-VALUE
     "'(ARRAY ATOM BIGNUM BIT BIT-VECTOR BOOLEAN CHARACTER COMPILED-FUNCTION COMPLEX
  CONS DOUBLE-FLOAT FIXNUM FLOAT FUNCTION HASH-TABLE INTEGER KEYWORD LIST
  LONG-FLOAT NIL NULL NUMBER PACKAGE PATHNAME RANDOM-STATE RATIO RATIONAL
  READTABLE REAL SEQUENCE SHORT-FLOAT SIGNED-BYTE SIMPLE-ARRAY
  SIMPLE-BIT-VECTOR SIMPLE-STRING SIMPLE-VECTOR SINGLE-FLOAT STANDARD-CHAR
  STREAM STRING REASONABLE-UTILITIES.ITER::STRING-CHAR SYMBOL T UNSIGNED-BYTE
  VECTOR)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ALWAYS-DECLARE-VARIABLES*" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "Like (declare (declare-variables))" :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LIST-END-TEST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "This is so the advanced user can choose how the end of a list
is checked for.
There are three choices for termination predicate in
FOR...ON and FOR...IN, differing in their behavior on lists with a non-nil cdr:
* NULL: If lucky, will get an error when taking the cdr. Bad choice
* ATOM: Will terminate correctly with no error
* ENDP: Will give an appropriate error message"
     :INITIAL-VALUE "'ATOM")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RESULT-VAR*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "*RESULT-VAR* is bound to a gensym before the clauses of an iterate form
are processed. In the generated code, the gensym is bound to NIL before any
other bindings are performed. Clauses are free to generate code that sets
the value of *RESULT-VAR*."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TYPE-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION "Iterate binds *TYPE-ALIST* to an alist of variables and
their types before processing clauses. It does this by looking at
(declare (type ...)) forms in the clauses and recording
the information there. (Only variable type information, not function)"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DECLARE-VARIABLES*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "*DECLARE-VARIABLES* is bound to T if (declare (iterate:declare-variables))
was seen at top-level, or if *ALWAYS-DECLARE-VARIABLES* is non-nil.
This indicates, that variables, that haven't been declared by the user should be
declared to have the appropriate types.  What 'appropriate' means depends
on the context."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLAUSE*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "*CLAUSE*> is bound to each entire iterate clause before the clause is
processed. Mostly for error output (see CLAUSE-ERROR class)."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TOP-LEVEL?*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "*TOP-LEVEL?* is bound to T at top-level (i.e. before any forms, that
contain clauses inside them, like IF, LET etc.) and to NIL inside such forms.
It is useful to ensure, that certain forms (particularly iteration drivers)
occur only at top-level."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DECLARATION-CONTEXT?*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "*DECLARATION-CONTEXT?* is bound to T inside a form, that allows declarations,
like (FLET, LABELS)."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BINDINGS*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "For the use of MAKE-BINDING-INTERNAL, to pass back bindings. (:IF FIRST-TIME)
also uses it to create first-time variables."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INTERNAL-VARIABLES*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "This is a list of lists, containing the variables, made by internal LETs or
other binding forms. It is used to check for the error of having iterate try to
bind one of these variables at top-level.  E.g. this code is an error.
CL-USER> (iter (:for i :from 1 :to 10)
               (let ((a nil))
                 (:collect i :into a)))
"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DECLARATIONS*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "For functions (like MAKE-BINDING), that don't want to or can't pass
declarations normally. These are really decl-specs, not full declarations."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ACCUM-VAR-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "This is how we get multiple accumulations into the same variable
to come out right.  See MAKE-ACCUM-VAR-BINDING.
It's an alist of (ACCUM-VAR KIND <possibly other info>).
The currently used kinds are:
* :collect   - for collect, nconc, append, etc.
* :increment - for count, sum and multiply
* :max       - for maximize
* :min       - for minimize
* :if-exists - for always/never/thereis and finding such-that
Note that we do not check for type conflict in the re-use of these variables."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SHARED-BINDINGS-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Shared variables created by MAKE-SHARED-BINDING.
It's an alist of (NAME GENSYM-VAR <possibly other info>).
Tipical use is FIRST-ITERATION-P."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BLOCK-NAME*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Name of the block for this iterate /> form. Used in generating
return statements"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLAUSE-INFO-INDEX*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "The index of standard clauses (a discrimination tree). This is a DEFVAR,
so that reloading doesn't clobber existing defs (though it will clobber those
clauses, that are defined in this file)."
     :INITIAL-VALUE "(LIST :INDEX)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SPECIAL-FORM-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "An alist of lisp special forms and the functions for handling them.
nil as function means leave form as-is"
     :INITIAL-VALUE "'((BLOCK . REASONABLE-UTILITIES.ITER::WALK-CDDR)
  (CATCH . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (DECLARE . REASONABLE-UTILITIES.ITER::WALK-DECLARE)
  (EVAL-WHEN . REASONABLE-UTILITIES.ITER::WALK-CDDR)
  (FLET . REASONABLE-UTILITIES.ITER::WALK-FLET)
  (FUNCTION . REASONABLE-UTILITIES.ITER::WALK-FUNCTION) (GO)
  (IF . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (LABELS . REASONABLE-UTILITIES.ITER::WALK-FLET)
  (LET . REASONABLE-UTILITIES.ITER::WALK-LET)
  (LET* . REASONABLE-UTILITIES.ITER::WALK-LET) (LOAD-TIME-VALUE)
  (LOCALLY . REASONABLE-UTILITIES.ITER::WALK-CDR-WITH-DECLARATIONS)
  (MACROLET . REASONABLE-UTILITIES.ITER::WALK-MACROLET)
  (MULTIPLE-VALUE-CALL . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (MULTIPLE-VALUE-PROG1 . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (PROGN . REASONABLE-UTILITIES.ITER::WALK-PROGN)
  (PROGV . REASONABLE-UTILITIES.ITER::WALK-CDR) (QUOTE)
  (RETURN-FROM . REASONABLE-UTILITIES.ITER::WALK-CDDR)
  (SETQ . REASONABLE-UTILITIES.ITER::WALK-SETQ)
  (SYMBOL-MACROLET . REASONABLE-UTILITIES.ITER::WALK-CDDR-WITH-DECLARATIONS)
  (TAGBODY . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (THE . REASONABLE-UTILITIES.ITER::WALK-CDDR)
  (THROW . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (UNWIND-PROTECT . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (MULTIPLE-VALUE-BIND . REASONABLE-UTILITIES.ITER::WALK-MULTIPLE-VALUE-BIND)
  (WITH-PACKAGE-ITERATOR
      . REASONABLE-UTILITIES.ITER::WALK-CDDR-WITH-DECLARATIONS)
  (WITH-HASH-TABLE-ITERATOR
      . REASONABLE-UTILITIES.ITER::WALK-CDDR-WITH-DECLARATIONS)
  (AND . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (IGNORE-ERRORS . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (MULTIPLE-VALUE-LIST . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (MULTIPLE-VALUE-SETQ . REASONABLE-UTILITIES.ITER::WALK-CDDR)
  (NTH-VALUE . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (OR . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (PROG1 . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (PROG2 . REASONABLE-UTILITIES.ITER::WALK-CDR)
  (PSETQ . REASONABLE-UTILITIES.ITER::WALK-SETQ))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SPECIAL-CLAUSE-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "Clauses, that are 'special' in the sense, that they don't conform to the
keyword-argument syntax of Iterate clauses"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TEMPS*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "These two are for conserving temporaries. *TEMPS* is a list
of temporaries that have already been created and given bindings.
*TEMPS-IN-USE* is a list of temporaries that are currently being used.
See WITH-TEMPORARY, WITH-TEMPORARIES.
This seems to stem from a time where it was more efficient to use
CL-USER> (progn (temp)
                ...
                (setq temp #) ; somewhere deep inside the body
                (foo temp)
                (bar temp)
                ...)
than using a local LET deep inside that body, as in
CL-USER> (tagbody ...
                  (let ((temp #))
                    (foo temp)
                    (bar temp))
                  ...)
which may be easier for compiler data flow and lifetime analysis."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TEMPS-IN-USE*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "These two are for conserving temporaries. *TEMPS* is a list
of temporaries that have already been created and given bindings.
*TEMPS-IN-USE* is a list of temporaries that are currently being used.
See WITH-TEMPORARY, WITH-TEMPORARIES.
This seems to stem from a time where it was more efficient to use
CL-USER> (progn (temp)
                ...
                (setq temp #) ; somewhere deep inside the body
                (foo temp)
                (bar temp)
                ...)
than using a local LET deep inside that body, as in
CL-USER> (tagbody ...
                  (let ((temp #))
                    (foo temp)
                    (bar temp))
                  ...)
which may be easier for compiler data flow and lifetime analysis."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ENV*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "Environment, for MACROEXPAND." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DRIVER-INFO-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "List of info about drivers for use by the NEXT mechanism."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PREVIOUS-VARS-ALIST*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Used by PREVIOUS." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-TOP*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION "A loop label." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-STEP*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION "A loop label." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-END*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION "A loop label." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-STEP-USED?*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "Whether a label was used already (to avoid generating them)?
This is so we don't get a warning from compilers that check for unused tags."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-END-USED?*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "Whether a label was used already (to avoid generating them)?
This is so we don't get a warning from compilers that check for unused tags."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOOP-BODY-WRAPPERS*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Things that we should wrap the loop's body in."
     :INITIAL-VALUE "NIL")
    (:TYPE :STRUCT :SYMBOL
     (:NAME "CLAUSE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Clause-info structures, which are put in the clause index." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQ-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DOC-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GENERATOR?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CLAUSE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FUNCTION" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM72" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "KEYWORDS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM73" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "REQ-KEYWORDS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM74" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "DOC-STRING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM75" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "GENERATOR?" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM76" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "DRIVER-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Driver-info structures, used by NEXT." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NEXT-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GENERATOR?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "USED" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DRIVER-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "NEXT-CODE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM116" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "GENERATOR?" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM117" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "USED" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM118" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "PREVIOUS-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Info structure, used by PREVIOUS." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SAVE-INFO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PREVIOUS-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "VAR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM156" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "SAVE-INFO-LIST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM157" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CODE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM158" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CLASS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM159" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "STEP" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "SAVE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Info structure, used by the PREVIOUS." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SAVE-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SAVE-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "IV-REF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SAVE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SAVE-VAR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM198" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "SAVE-VARS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM199" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "IV-REF" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM200" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ITER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Jonathan Amsterdam's powerful and extensible iteration facility,
providing multiple accumulation, generators, memory of previous
iterations, over 50 clauses to start with and a Lisp-like syntax.
Evaluate (iter:display-iterate-clauses) for an overview of clauses.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROCESS-TOP-LEVEL-DECLS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Process top-level declarations, present among CLAUSES.
Sets *TYPE-ALIST* to an alist of (var . type), and sets *DECLARE-VARIABLES* />
to T, when such a declaration was seen.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFAULT-DRIVER-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Default code, that will be executed if no drivers are defined.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRAP-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "WRAPPERS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Wrap FORM with WRAPPERS, that should be given as a list.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-LOOP-BODY-WRAPPER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "WRAPPER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Ad a WRAPPER to *LOOP-BODY-WRAPPERS*, if it's not already there.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Walk the FORM and return the usual 6 things as multiple-values:
   * body
   * type declarations
   * initializations code
   * stepping code
   * final code
   * final protected (by UNWIND-PROTECT)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk FORMS, as a simple list.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-ARGLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk ARGS list, possibly containing ITERATE clauses.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-FSPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk lambdas' and functions' specs in FLET and LABELS.
   FORM is (lambda-or-name args . body).
   Only walk at the body. The args are set up as internal variables.
   Declarations are kept internal to the body.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LIST-NCONCING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "WALK-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BODY-DURING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL)
       ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
          NIL)
         (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
          NIL))
        ((:NAME "DECLARE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "IGNORE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
           NIL)))
        (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION
     "Lowest-level walking function for lists. Applies WALK-FN to LST.
   Applies BODY-DURING to the body part, returned by WALK-FN.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-CODE-MODIFYING-BODY" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "MOD-F" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Call F with STUFF and return the regular 6 values (see WALK) with 1st return
   value being the result of application of MOD-F to body, returned by F.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-INTERNAL-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list of VAR, CONS'ed at the front to *INTERNAL-VARIABLES*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-INTERNAL-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list of VARS, NCONC'ed at the front to *INTERNAL-VARIABLES*.
   VARS can be a lambda-list, a list of LET bindings, or a list of variables.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAMBDA-LIST-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LAMBDA-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Return the variables in the LAMBDA-LIST, omitting keywords,
   default and values.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPECIAL-FORM?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Check, that SYMBOL is present in *SPECIAL-FORM-ALIST*.
   Used instead of SPECIAL-OPERATOR-P, which doesn't work properly in some
   compilers (like Lucid). Besides, to track Iterate special clauses.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-SPECIAL-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk a special form, defined in *SPECIAL-FORM-ALIST*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-CDR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FIRST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Don't walk the CAR of a list. CDR might not be walked as well.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-CDDR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FIRST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SECOND" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Don't walk the CAR and CADR of a list. CDDR might not be walked as well.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-PROGN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PROGN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Don't walk the CAR of a list. CDR might not be walked as well, though.
   The only difference between this and WALK-CDR is that *TOP-LEVEL* isn't bound.
   This is so macros can return PROGNs of things.
   It's exactly like the definition of 'top-level' in lisp.
   (Also, just for looks, this returns NIL if the PROGN is empty.)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-SETQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SETQ" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "THINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Walk every thing in THINGS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-FUNCTION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk FUNCTION specification.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-DECLARE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DECLARATION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Walk DECLARATION. Declarations should be put in the declaration section
   of the loop. They are only allowed at top-level, except that they are allowed
   within binding environments, in which case they apply only to that
   binding environment.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "LET-KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Walk LET-form, with BINDINGS and BODY, which may contain ITERATE clauses.
   The declarations go inside this let, not to the top-level. It is an error
   to use a variable in the LET-bindings as the target of accumulation
   (i.e. INTO), because ITERATE will try to make a top-level binding for
   that variable.
   The same goes for other variables, that might be so bound.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LET-BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LET-KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Walk BINDINGS, established by LET or LET*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LET*-BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Walk BINDINGS for LET* one at a time, to get the variable scoping right.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-LET-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Walk a simgle BINDING for LET or LET*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-MULTIPLE-VALUE-BIND" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "MVB" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Walk BINDINGS for MULTIPLE-VALUE-BIND. Declarations go inside the
   MULTIPLE-VALUE-BIND form, not to the top-level. See WALK-LET for binding
   subtleties.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-FLET" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FLET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BINDINGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Walk FLET or LABELS declarations. We don't worry about the function bindings.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-CDR-WITH-DECLARATIONS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FIRST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "a.k.a. walk-locally
   Walk CDR, ignoring declarations, that might be present in it.
   Set *TOP-LEVEL?* to NIL (via WALK-ARGLIST). Note that when *TOP-LEVEL?* is NIL
   walk won't yield declarations, because WALK-DECLARE errors out since all forms
   with *DECLARATION-CONTEXT?* T keep them local (that is, in WALK-LET, WALK-FLET
   and WALK-MULTIPLE-VALUE-BIND b-decls/edecls are always NIL.)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-CDDR-WITH-DECLARATIONS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FIRST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SECOND" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "a.k.a. walk-locally
   Walk CDDR, ignoring declarations, that might be present in it.
   Set *TOP-LEVEL?* to NIL (via WALK-ARGLIST). Note that when *TOP-LEVEL?* is NIL
   walk won't yield declarations, because WALK-DECLARE errors out since all forms
   with *DECLARATION-CONTEXT?* T keep them local (that is, in WALK-LET, WALK-FLET
   and WALK-MULTIPLE-VALUE-BIND b-decls/edecls are always NIL.)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-MACROLET" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STUFF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "MACROLET is not supported inside ITER. Signal an error.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INITIAL*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION "Global collection of initial forms." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DECLS*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "Global collection of declaration forms." :INITIAL-VALUE
     "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STEP*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "Global collection of stepping forms." :INITIAL-VALUE
     "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*FINAL*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :DOCUMENTATION "Global collection of final forms." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*FINALP*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Global collection of final forms, protected by UNWIND-PROTECT."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROCESS-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Process ITERATE CLAUSE according to the rules, defined for it.
   This should observe the invariant, that the forms it returns are already
   copied from the original code, hence NCONC-able.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-CLAUSE-FUNCTION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FUNC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Apply a function, defined for ITERATE clause FUNC to ARGS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPROCESS-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Preprocess ITERATE CLAUSE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ARG-CHECK" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make sure that each keyword in ITERATE CLAUSE is in INFO.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Walk EXPR and return just the PROGN-WRAP'ped body.
   Other returned by walking values are AUGMENT'ed to globals and
   returned by PROCESS-CLAUSE in the end of processing it.

   This isn't used by the code walker itself, but is useful for clauses, that
   need to walk parts of themselves.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPLAY-ITERATE-CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSE-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Display ITERATE clause.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISP-STD-CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Display standard (i.e. defined in ITER) clauses.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPLAY-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KWS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "DOCSTRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Display a single ITERATE clause with a DOCSTRING, which accepts keywords KWS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPLAY-KWS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "KWS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Display ITERATE clause keywords KWS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-MATCHES?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "KWS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test wheather CLAUSE-SPEC matches KWS. If no CLAUSE-SPEC is given, assume,
   that it matches.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CLAUSE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       (:NAME "*CLAUSE-INFO-INDEX*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL)))
     :DOCUMENTATION "Get ITERATE CLAUSE info from the INDEX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IS-ITERATE-CLAUSE?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test wheather a CAR of FORM is defined as ITERATE clause.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-CLAUSE?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Tests wheather SYMBOL is defined as an ITERATE clause starting symbol.

A symbol starts a clause, when it appears in the top-level index
*CLAUSE-INFO-INDEX*, in the *SPECIAL-CLAUSE-ALIST*, or it is GENERATE.
This is used to distinguish the case when there's a lisp form (in which case the
symbol doesn't start a clause), versus the situation, when an erroneous clause
is provided.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSTALL-CLAUSE-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REQ-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOC-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "GENERATOR?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSTALL-CLAUSE-INFO-1" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUILD-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INDEX?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Simple test wheather X is an index list (i.e. starts with :INDEX).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INDEX-ADD" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "THING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Add THING, qualified by KEY to the alits inside INDEX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INDEX-LOOKUP" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Search for ITEM in the alist inside INDEX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AMBIGUITY-CHECK-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CI1" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check CI1 pair for being already present in the alist inside INDEX with the
subset of required keywors.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AMBIGUITY-CHECK-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CI1" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "CI2" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "INSERT-N" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AMBIGUOUS-CLAUSES?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CI1" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "CI2" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test wheather required-keywords of CI1 are a prefix of required-keywords
of CI2 (i.e. introduce ambiguity).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPLAY-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       (:NAME "*CLAUSE-INFO-INDEX*" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL))
      ((:NAME "INDENT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       0))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Remove clause from the index. It is identified by CLAUSE-KEYWORDS,
which is a list with its symbols keywordized.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFMACRO-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Macro for defining iterate clauses (with DEFMACRO).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFCLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Macro for defining iterate clauses (with DEFUN).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFMACRO-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Macro for for defining iterators (with DEFMACRO), which may also be used
as generators.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFCLAUSE-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Macro for for defining (with DEFUN) iterators, which may also be used
as generators.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+SEQUENCE-KEYWORD-LIST+" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :DOCUMENTATION "Keywords, used in sequence iteration clauses."
     :INITIAL-VALUE "'(:FROM REASONABLE-UTILITIES.ITER::FROM :UPFROM
  REASONABLE-UTILITIES.ITER::UPFROM :DOWNFROM
  REASONABLE-UTILITIES.ITER::DOWNFROM :TO REASONABLE-UTILITIES.ITER::TO :DOWNTO
  REASONABLE-UTILITIES.ITER::DOWNTO :ABOVE REASONABLE-UTILITIES.ITER::ABOVE
  :BELOW REASONABLE-UTILITIES.ITER::BELOW (:BY 1)
  (REASONABLE-UTILITIES.ITER::BY 1) :WITH-INDEX
  REASONABLE-UTILITIES.ITER::WITH-INDEX)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFINE-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DEFINE-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "GENERATOR?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-FUNCTION-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REQ-SYMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "From a list of clause symbols REQ-SYMS make a unique symbol.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-CLAUSE-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Split CT into required keywords, optional keywords and values.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-LIST-ODD-EVEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Split LST into odd- and even-numbered elements, returned with VALUES.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTAINS-DUPLICATES?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Check, wheather LST contains duplicate symbols.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFCLAUSE-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ELEMENT-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ACCESS-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "SIZE-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "ELEMENT-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "SEQUENCE-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "ELEMENT-DOC-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "INDEX-DOC-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "A simple way to define a FOR-like &sequence clause.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IF-1ST-TIME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "THEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "FIRST-TIME-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "Return:
1. a form, which evaluates THEN the first time through the loop,
   ELSE -- the subsequent times
2. the variable, which may be passed with FIRST-TIME-VAR,
   that keeps track of first time")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-TEMPORARY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Execute BODY iside the temporary binding of VAR to.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return type of VAR, which can be given as THE-declaration or as symbol.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-DECLARATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Return the declaration, associated with VAR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPR-TYPE-ONLY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPRESSION-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUOTED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, wheather X is of the form (QUOTE ...).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FUNCTION-QUOTED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test, wheather X is of the form (FUNCTION ...) - same as #'(...).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAMBDA-EXPRESSION?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, wheather X is a lambda-expression.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "THE-EXPRESSION?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, wheather X is a THE-expression.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SELF-EVALUATING?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, wheather X is a self-evaluating entity.

Everything but symbols and lists are self-evaluating since CLtL2.
This differs from CONSTANTP in that it returns nil for quoted things
and DEFCONSTANT's.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONSTANT?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, wheather X is a constant.

This differs from CONSTANTP in that it doesn't acknowledge
DEFCONSTANTs to be constants; the problem with so acknowledging
them is that the run-time and compile-time environments may differ.
The things CONSTANT? returns for are really and truly constant
everywhere.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUPLICABLE?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return T if X can be copied in code. This is true for symbols,
on the assumption that the copies are close enough to each other so that
updating the variable cannot occur.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-SPEC?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test, if X is a proper specifivation of a variable: a symbol or
a THE-declaration.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTRACT-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Extract variable from THE-declaration or return as is.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DEFAULT-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-VAR-AND-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a binding for a newly GENVAR'ed variable, denoted by STRING,
to the given VALUE. Possibly account for it's TYPE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-VAR-AND-DEFAULT-BINDING" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-ACCUM-VAR-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "KIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-ACCUM-VAR-DEFAULT-BINDING" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "KIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-ACCUM-VAR-BINDING-INTERNAL" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE-SUPPLIED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "KIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SHARED-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Look up in *SHARED-BINDINGS-ALIST* or create an entry, keyed by VAR,
store GENSYM in the VALUE and also add it as a binding. Return the entry.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-BINDING-INTERNAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE-SUPPLIED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "USE-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-INITIAL-VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE-SUPPLIED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-BINDING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-INTERNAL-VARIABLES" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERNAL-VARIABLE?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, if VAR is present in *INTERNAL-VARIABLES*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-BINDING?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Test, if VAR is present in *BINDINGS*.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DSETQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Destructuring assignment; supports both (VALUES ...) for destructuring
a multiple-value form and NIL as a variable name, meaning to ignore that
position, e.g. (DSETQ (VALUES (A . B) NIL C) FORM).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DO-DSETQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BINDINGS?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DSETQS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BINDINGS?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-MV-DSETQS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BINDINGS?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DSETQ-ERROR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Signal an ERROR in DSETQ.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DESTRUCTURING-BINDINGS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DO-DESTRUCTURING-BINDINGS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Examine TEMPLATE and if it's a proper VAR-SPEC?, bind its var to VALUE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTRACT-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Like EXTRACT-VAR, but will work with a destructuring template as well.
Returns a list of variables.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOCAL-BINDING-CHECK" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FREE-VARIABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FREE-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BOUND-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FREE-VARS-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BOUND-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FREE-VARS-FSPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FSPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BOUND-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "FSPEC is either:
* a symbol
* or (SETF <symbol>)
* or (<name-or-lambda> (<vars>) . body)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DECLARATIONS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "INITIAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FINAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "FINAL-PROTECTED" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :MACRO :SYMBOL
     (:NAME "RETURN-DRIVER-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "DECLARATIONS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FINAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "FINAL-PROTECTED" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "NEXT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-DRIVER-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR-TEMPLATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "NEXT-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "GENERATOR?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :MACRO :SYMBOL
     (:NAME "RETURN-SEQUENCE-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENT-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ACCESS-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "SIZE-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "ELEMENT-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "SEQUENCE-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-SEQ-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENT-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ACCESS-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "SIZE-FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "ELEMENT-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "SEQUENCE-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      ((:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL) 1)
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-SEQUENCE-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "KNOWN-LIMITS?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVAL-CONST-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-FUNCALL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-APPLICATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-SUBST-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SUBST-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-SPECIAL-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "ARGLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Define clause by DEFUN. Special-clause names should be exported.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSTALL-SPECIAL-CLAUSE-FUNCTION" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOCSTRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Put the SYMBOL with DOCSTRING at the end of *SPECIAL-CLAUSE-ALIST*,
if not already present.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALLY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "FORMS to execute before loop starts.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AFTER-EACH" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "FORMS to execute after each iteration.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "FORMS to execute if the loop is never entered.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FINALLY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "FORMS to execute after loop ends.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FINALLY-PROTECTED" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "FORMS to execute in an UNWIND-PROTECT after loop ends.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIRST-TIME-P" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Return T for the first time it is evaluated.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIRST-ITERATION-P" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Return T in the first iteration of the loop.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BLOCK-NAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Process FORMS in an ITER block with BLOCK-NAME.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL) 1))
     :DOCUMENTATION
     "Explicitly step a driver VAR N times. Return VAR, after stepping.

Enclose the returned code in a PROGN, so that the variable reference
isn't confusable with a tag (since the code might appear within a TAGBODY).
The PROGN is also necessary, so that spliced-in save code will not result
in extra forms, for cases when the NEXT appears as an argument.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-NEXT-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Construct the body for NEXT carefully (avoid backquote), ensuring that
CODE, and not a copy, appears in it.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-VALUE-RETURNED" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-REPEAT-44" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "REPEAT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))))
     :DOCUMENTATION "Repeat the loop N times.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-45" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "General FOR clause.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-ON-46" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ON" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (((:NAME "BY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CDR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over sublists of LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-47" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (((:NAME "BY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CDR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over elements of LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-FUNCTION-STEP-CODE" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-VECTOR-48" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN-VECTOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over elements of a vector.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-INDEX-OF-VECTOR-49" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INDEX-OF-VECTOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Indices of a vector.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-SEQUENCE-50" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN-SEQUENCE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over elements of a sequence.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-INDEX-OF-SEQUENCE-51" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INDEX-OF-SEQUENCE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Indices of a sequence (vector or list).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-STRING-52" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN-STRING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over characters of a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-INDEX-OF-STRING-53" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INDEX-OF-STRING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "UPFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "UPFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DOWNFROM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNFROM" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "DOWNTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DOWNTO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ABOVE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "ABOVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BELOW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BELOW" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "(BY 1)" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "BY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       1)
      (((:NAME "WITH-INDEX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "WITH-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "Indices of a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-HASHTABLE-54" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "KEY-VAL-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (((:NAME "IN-HASHTABLE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over elements and keys of a hash-table TABLE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-PACKAGES-55" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SYM-ACCESS-PKG-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (((:NAME "IN-PACKAGES" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PKGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "HAVING-ACCESS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "SYM-TYPES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "EXTERNAL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
         (:NAME "INTERNAL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
         (:NAME "INHERITED" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "ITER over symbols and their access-types in packages PKGS.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CLAUSE-FOR-IN-PACKAGE-56" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "IN-PACKAGE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PKG" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "EXTERNAL-ONLY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "ITER over symbols accessible in package PKG.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-FILE-57" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN-FILE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FILENAME" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "USING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "READER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "READ" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "ITER over forms from a file by FILENAME (which will be closed at the end).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-IN-STREAM-58" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "IN-STREAM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (((:NAME "USING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "READER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "READ" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "ITER over forms from a STREAM (which will be closed at the end).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-STREAM-DRIVER-CODE" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "THING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "READER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "STREAM-OR-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-NEXT-59" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "NEXT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "NEXT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "General driver; VAR is set to value of NEXT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-DO-NEXT-60" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "DO-NEXT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "NEXT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (:NAME "GENERATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "General driver; VAR must be set in DO-NEXT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIST-OF-FORMS?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-WITH-61" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "WITH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "=" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VALUE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SUPPLIED?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Bind VAR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-INITIALLY-THEN-62" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INITIALLY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "INITIAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "THEN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "THEN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Set VAR initially, then on subsequent iterations.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-=-63" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "=" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Set VAR on each iteration.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-FIRST-THEN-64" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "FIRST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FIRST-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
         :EXTERNALP NIL)))
      (((:NAME "THEN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "THEN-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Set VAR on first, and then on subsequent iterations.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-REDUCTION-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OPERATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "EXTERNAL-OP?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXPRESSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USING-TYPE-OF" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "ACCUM-KIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-COUNT-65" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "COUNT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Increment VAR if EXPR is non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-SUM-66" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SUM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Sum into VAR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-MULT-67" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "MULT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Multiply into VAR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-REDUCE-BY-68" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "REDUCE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "OP" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "INITIAL-VALUE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "INIT-VAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "IV?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Generalized reduction.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-MAX-69" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "MAX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Maximize value of an EXPR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-MIN-70" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "MIN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Minimize value of an EXPR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-EXTREMUM-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "OPERATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LEAVE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Exit the loop without running the epilogue code.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FINISH" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Exit the loop gracefully, executing the epilogue.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TERMINATE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Use within FOR...DO-/NEXT to end the iteration.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT-ITERATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Begin the next iteration.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-WHILE-71" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "WHILE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Exit loop, when EXPR is NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-UNTIL-72" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "UNTIL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Exit loop, when EXPR is non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-ALWAYS-73" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "ALWAYS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Return last value, when EXPR is always non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-NEVER-74" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "NEVER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Return T, when expression is never non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-THERE-IS-75" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "THERE-IS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Return value of EXPR, as soon as it is non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FIND-SUCH-THAT-76" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FIND" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "SUCH-THAT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "ON-FAILURE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "FVAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Return EXPR, when test is non-NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FIND-MAX-77" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FIND" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "MAX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "MAX-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Return value, which maximizes EXPR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FIND-MIN-78" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FIND" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "MIN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "MIN-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Return value, which minimizes EXPR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-FIND-EXTREMUM-CODE" :PACKAGE-NAME
      "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "M-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "KIND" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-COLLECTION-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXPRESSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "START-OPERATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "END-OPERATION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "ONE-ELEMENT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      ((:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      ((:NAME "RESULT-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
        :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-COLLECT-79" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "COLLECT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "RESULT-TYPE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Collect into a list (with CONS).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-ADJOIN-80" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "ADJOIN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TEST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (((:NAME "RESULT-TYPE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Adjoin into a list (tests for membership first).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-NCONC-81" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "NCONC" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "NCONC into a list.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-APPEND-82" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "APPEND" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "APPEND into a list.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-UNION-83" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "UNION" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TEST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
     :DOCUMENTATION "Union into a LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-NUNION-84" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "NUNION" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "AT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PLACE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "TEST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
     :DOCUMENTATION "Union into a LIST, destructively.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-ACCUMULATE-BY-85" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "ACCUMULATE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "BY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "OP" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)))
      (((:NAME "INITIAL-VALUE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "INIT-VAL" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INTO" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR-SPEC" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Generalized accumulation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-FOR-PREV-86" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "FOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PVAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "PREV" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL)))
      (((:NAME "INITIALLY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DEFAULT" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "DEFAULT?" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
        NIL))
      (((:NAME "BACK" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "N-EXPR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
         NIL))
       1))
     :DOCUMENTATION "Previous value of a variable.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGISTER-PREVIOUS-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERN-PREVIOUS-INFO" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "If VAR already has a previous-info structure, return it;
else create a new one, put it where it belongs, and return it.
Make sure that if VAR is itself a save-var, the new record
goes after the one for VAR's var, so that the previous code
is generated before it is itself considered update code for another
previous splicing.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IS-SAVE-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "ENTRY" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SAVE-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSERT-PREVIOUS-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "For each variable that requires a previous value, get all the update code
for that variable and splice in code that will remember the previous
values for the desired number of iterations. Return code to put in the
init and step sections of the loop.

There are three situations here:
1. Variable has its initial value at the beginning of the loop, or gets
   its initial value in a different place than where it is updated. In
   this case, we can put the save code just before each update of the
   variable. Applicable clauses are: :FOR-PREVIOUS, :FOR-INITIALLY-THEN,
   and :FOR-FIRST-THEN. (class :INITIAL)
2. The variable is updated somewhere inside the loop, and the update also
   gives it its first value. We use another, internal save variable,
   which is set to the variable after each update. This is for :FOR-:= and
   driver clauses when :NEXT is used.(class :NEXT)
3. Variable is a driver with no :NEXT. We can put the update in the step
   portion of the loop, since we know the update code occurs at the
   beginning. (class :STEP)

Note that (3) is really an optimization of (2), and we could perform such
an optimization more generally if we could show that a variable in class
(2) was always updated before being used.  Right now, we don't bother.
*** (3) is no longer done because driver code stays where the driver is.
We could try to detect that the driver is at the beginning, but don't
for now.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DO-EXTRA-SAVE-VAR-HACK" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "SAVE-INFO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "CODE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "The name speaks for itself.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-POST-SAVE-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PREV-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SET-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "S-I" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "INITIAL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION "Generate code fro the PREVIOUS mechanism.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SAVE-PREVIOUS-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
      (:NAME "SAVE-VARS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION "")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLICE-IN-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PREV-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "POST-CODE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL)
      (:NAME "CODE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Put PREV-CODE in at the first cons cell of CODE, and POST-CODE at the last
cons cell. Both PREV-CODE and POST-CODE are single forms.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-PROGN" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "When FORMS is more than one form, cons the PROGN in.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROGN-WRAP" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORMS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Transform forms, if more than one is present, and the first is a list:
wrap PROGN around. Not copying forms.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TOP-LEVEL-CHECK" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Check for being at *TOP-LEVEL?* and signal CLAUSE-ERROR otherwise.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-ERROR" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "ERROR of improper use of iterate.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLAUSE-WARNING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "WARN of some improper use of ITERATE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUG" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP NIL))
     :DOCUMENTATION "Signal an Iterate bug to *ERROR-OUTPUT*."))
   :EXTERNAL-SYMBOLS
   ((:NAME "DEFCLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "DEFCLAUSE-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "ITER-VERSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
     T)
    (:NAME "ITER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "DEFCLAUSE-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "DEFMACRO-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "DISPLAY-ITER-CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "DECLARE-VARIABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "DEFMACRO-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.SEQUENCE" :FULL-NAME
   "REASONABLE-UTILITIES.SEQUENCE" :DOCUMENTATION
   "Sequence utilities, including SPLIT-SEQUENCE." :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DELIMITER" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME
        "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "INCLUDE-DELIMITER" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       0)
      ((:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL))
      ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TEST-SUPPLIED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL))
      ((:NAME "TEST-NOT" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TEST-NOT-SUPPLIED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in SEQ delimited by DELIMITER.

If REMOVE-EMPTY-SUBSEQS is NIL, empty subsequences will
be included in the result; otherwise they will be discarded.
All other keywords work analogously to those for SUBSTITUTE.
In particular, the behavior of FROM-END is possibly different
from other versions of this function; FROM-END values of NIL
and T are equivalent unless COUNT is supplied. The second return
value is an index suitable as an argument to SUBSEQ into the
sequence indicating where processing stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME
        "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       0)
      ((:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in SEQ delimited by items, satisfying PREDICATE.

If REMOVE-EMPTY-SUBSEQS is NIL, empty subsequences will be included in the
result; otherwise they will be discarded.  All other keywords work analogously
to those for SUBSTITUTE.  In particular, the behavior of FROM-END is possibly
different from other versions of this function; FROM-END values of NIL
and T are equivalent unless COUNT is supplied.  The second return value is
an index suitable as an argument to SUBSEQ into the sequence indicating where
processing stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME
      "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME
        "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       0)
      ((:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in SEQ delimited by items, satisfying
(complement PREDICATE).

If REMOVE-EMPTY-SUBSEQS is NIL, empty subsequences will be
included in the result; otherwise they will be discarded. All other
keywords work analogously to those for SUBSTITUTE.
In particular, the behavior of FROM-END is possibly different
from other versions of this function; FROM-END values of NIL
and T are equivalent unless COUNT is supplied.  The second return
value is an index suitable as an argument to SUBSEQ into the
sequence indicating where processing stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARTITION-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ORDERING" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)))
      ((:NAME "TEST" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "KEY" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-P" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL))
      ((:NAME "RESULT-TYPE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "KEYS-SORTED" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Partition a SEQUENCE into a sequence of sequences, each one related
by TEST to one key in KEY-SEQUENCE (which may be already sorted: KEYS-SORTED).

Returns a sorted KEY-SEQUENCE as a 2nd value.

Return values are coerced to RESULT-TYPE, that should be a sequence subtype
(default is LIST).

ORDERING is used for sorting both SEQUENCE and KEY-SEQUENCE.
Accepts KEY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE/SWAPPED-ARGUMENTS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYWORD-ARGUMENTS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "REMOVEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REMOVE-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION "Modify-macro for REMOVE. Sets place designated by the first
argument to the result of calling REMOVE with ITEM, place,
and the REMOVE-KEYWORDS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DELETE/SWAPPED-ARGUMENTS" :PACKAGE-NAME
      "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYWORD-ARGUMENTS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DELETEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "ITEM" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REMOVE-KEYWORDS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION "Modify-macro for DELETE. Sets place designated by the first
argument to the result of calling DELETE with ITEM, place,
and the REMOVE-KEYWORDS.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DOINDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "INDEX-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "ELT-VAR" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "RESULT-FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
        :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Iterates over a sequence while keeping track of an index. A DO-style macro.

   Example usage:

       CL-USER> (doindex (i e '(a b c))
                  (format T \"~&~S ~S\" i e))
       1 a
       2 b
       3 c")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SHUFFLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       0)
      ((:NAME "END" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
        NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Shuffles SEQUENCE (in bounds of START and END) in-place.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ROTATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP NIL)
       1))
     :DOCUMENTATION
     "Returns a sequence of the same type as SEQUENCE, with the elements of
SEQUENCE rotated by N: N elements are moved from the end of the sequence to
the front if N is positive, and -N elements moved from the front to the end if
N is negative. SEQUENCE must be a proper sequence. N must be an integer,
defaulting to 1.

If absolute value of N is greater then the length of the sequence, the results
are identical to calling ROTATE with

  (* (signum n) (mod n (length sequence))).

Note: the original sequence may be destructively altered, and result sequence may
share structure with it.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EMPTYP" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Returns true if SEQUENCE is an empty sequence. Signals an error if SEQUENCE
is not a sequence.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EQUAL-LENGTHS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SEQUENCES" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Takes any number of sequences or integers in any order. Returns true iff
the length of all the sequences and the integers are equal. Hint: there's a
compiler macro that expands into more efficient code if the first argument
is a literal integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LENGTH=" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Return true if SEQUENCE's length equals LENGTH. Returns FALSE for circular
lists. Signals an error if SEQUENCE is not a sequence.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAST-ELT" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Returns the last element of SEQUENCE.
Signals a type-error if SEQUENCE is not a proper sequence, or is an empty
sequence.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LAST-ELT" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
       :EXTERNALP NIL))
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
       NIL)
      (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Sets the last element of SEQUENCE.
Signals a type-error if SEQUENCE is not a proper sequence, is an empty sequence."))
   :EXTERNAL-SYMBOLS
   ((:NAME "LENGTH=" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "EMPTYP" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "ROTATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "SHUFFLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "DOINDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "EQUAL-LENGTHS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "SEQUENCE-OF-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "DELETEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "PARTITION-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "REMOVEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES.SHORT" :FULL-NAME
   "REASONABLE-UTILITIES.SHORT" :DOCUMENTATION
   "Short variants of some common utilities with long names." :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "2ND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP NIL))
     :DOCUMENTATION "(NTH-VALUE 1 FORM)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FMT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "MKLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MKSYM" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT-COUNT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "REM#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "W/INSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MKEYW" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "W/OUTSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SUB" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "2ND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DEFPAR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "PRINT-HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "FILTER" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MERGE-HTS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "TAKE#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MV-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "ALIST->HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "FMT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "PLIST->HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT->PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "M1" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "GET#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "W/UNIQS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SET#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SPLIT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT->ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DS-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REASONABLE-UTILITIES" :FULL-NAME
   "REASONABLE-UTILITIES" :DOCUMENTATION
   "The whole set of core reasonable utilities, excluding short." :SYMBOL-LIST
   NIL :EXTERNAL-SYMBOLS
   ((:NAME "ONCE-ONLY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "SLURP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "EMPTYP" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "DEFMACRO-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "ROTATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "XOR" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "RANGE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "COERCEF" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "REVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "RUTILS-RT" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-TO-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "BUTLAST2" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ITER-VERSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
     T)
    (:NAME "ABBR" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "DECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DEFCLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "AND2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "#{-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "NCONCF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DOINDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "SPLIT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "FLATTEN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "EQUAL-LENGTHS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "TREE-SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "TAKEHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "WITH-GENSYMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "SHUFFLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP T)
    (:NAME "ATOMIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "COPY-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "DOLINES" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "SET-EQUAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PACKAGE-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "DCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "PRINT-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "EVAL-ALWAYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "ITER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "DELETE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "DCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "OR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "NAMED-LAMBDA" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "DOWHILE-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "TRYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DEFCLAUSE-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "STRCAT" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "ASSOC1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PLIST-TO-ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "REMOVE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "IF-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP
     T)
    (:NAME "IF-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "BLANKP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "ARRAY-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "HASH-TABLE-TO-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "ENSURE-KEYWORD" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "WHITE-CHAR-P" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "NOT-MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "READ-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "STRJOIN" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "PCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SETHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
     T)
    (:NAME "HASH-TABLE-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "SWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HASH-TABLE-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "DOWHILE-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "#`-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "MAPTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "DECLARE-VARIABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "ENDS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "MAP-INDEXED" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "LAST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "COND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "ENSURE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
     T)
    (:NAME "PLISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DOTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SUBSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "DOTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "UNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "NUNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SEQUENCE-OF-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "PACKAGE-EXTERNAL-SYMBOLS" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "MERGE-HASH-TABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "TAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WITH-OUT-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "#/-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "ZIP-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "RUTILS-READTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "RE-EXPORT-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "CSWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DEFMACRO-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "APPENDF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "LAST-CHAR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "DYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "STARTS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "INTERLEAVE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ARRAY-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "XOR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "DISPLAY-ITER-CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "DELETEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "GROUP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WHEN-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "WITH-OUTPUT-TO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "ALIST-TO-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "DEFCLAUSE-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "NREVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "%%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "ALISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ZIP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "AND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "WHEN-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "NOT-LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-PROG2" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "REMOVEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "COND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "AND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "PARTITION-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "LENGTH=" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "PECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SINGLE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ESWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "ENSURE-SYMBOL" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "MAPTIMES" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "RUTIL" :FULL-NAME "RUTIL" :DOCUMENTATION
   "rutils + rutils.short" :SYMBOL-LIST NIL :EXTERNAL-SYMBOLS
   ((:NAME "RUTILS-RT" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "APPENDF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "LENGTH=" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "WITH-GENSYMS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "DEFMACRO-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "ROTATE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "W/INSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "XOR" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "RANGE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "COERCEF" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "REVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "MKSYM" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "2ND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DOINDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "DCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "ITER-VERSION" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP
     T)
    (:NAME "ABBR" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "DECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "DEFCLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "LAST-CHAR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "SLURP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "GET#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "W/OUTSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "HT->PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "W/UNIQS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "TAKE#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "GROUP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WHEN-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "ALIST->HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "#{-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "FLATTEN" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PRINT-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "BLANKP" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "FMT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "TREE-SIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "BIND-DISPATCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "HT->ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SHUFFLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "ARRAY-INDEX" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "COPY-HASH-TABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "ASSOC1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "MERGE-HTS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SET-EQUAL" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "FN" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "PACKAGE-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "DCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HT-COUNT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DEFPAR" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "EVAL-ALWAYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "ITER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER" :EXTERNALP T)
    (:NAME "DELETE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "NCONCF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DISPLAY-ITER-CLAUSES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "OR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "NAMED-LAMBDA" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "%%" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE" :EXTERNALP T)
    (:NAME "DOWHILE-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "TRYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ONCE-ONLY" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP
     T)
    (:NAME "DEFCLAUSE-SEQUENCE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "PRINT-HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "STRCAT" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "SUBSTR" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "PLIST-TO-ALIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "REMOVE-FROM-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "IF-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP
     T)
    (:NAME "AND2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "IF-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "DOTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "ARRAY-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "HASH-TABLE-TO-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "HASH-TABLE-TO-ALIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "ENSURE-KEYWORD" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "WHITE-CHAR-P" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "NOT-MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "MV-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "EMPTYP" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP T)
    (:NAME "STRJOIN" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "PCCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SETHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP
     T)
    (:NAME "IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT" :EXTERNALP T)
    (:NAME "SWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HASH-TABLE-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "DOWHILE-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "#`-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "MAPTREE" :PACKAGE-NAME "REASONABLE-UTILITIES.TREE" :EXTERNALP T)
    (:NAME "DECLARE-VARIABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "ENDS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "MAP-INDEXED" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP
     T)
    (:NAME "SET#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "LAST1" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "COND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "ENSURE-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP
     T)
    (:NAME "PLISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "DOTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SPLIT-STRING" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "NREVERSEF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "UNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "NUNIONF" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "BUTLAST2" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "PCASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "SEQUENCE-OF-LENGTH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "PACKAGE-EXTERNAL-SYMBOLS" :PACKAGE-NAME
     "REASONABLE-UTILITIES.SYMBOL" :EXTERNALP T)
    (:NAME "MERGE-HASH-TABLES" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "TAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ATOMIZE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WITH-OUT-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING"
     :EXTERNALP T)
    (:NAME "#/-reader" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "ZIP-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "NOT-LESS" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "RUTILS-READTABLE" :PACKAGE-NAME "REASONABLE-UTILITIES.READTABLE"
     :EXTERNALP T)
    (:NAME "HT-VALS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "RE-EXPORT-SYMBOLS" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "CSWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HASH-TABLE-FROM-PLIST" :PACKAGE-NAME
     "REASONABLE-UTILITIES.HASH-TABLE" :EXTERNALP T)
    (:NAME "MKEYW" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DOLINES" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP T)
    (:NAME "DYADIC" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "MAKE" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "DEFMACRO-CLAUSE" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "M1" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "FILTER" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "STARTS-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "INTERLEAVE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "HASH-TABLE-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "XOR2" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "SPLIT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "AND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "DELETEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "TAKEHASH" :PACKAGE-NAME "REASONABLE-UTILITIES.HASH-TABLE"
     :EXTERNALP T)
    (:NAME "WITH-OUTPUT-TO-LIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "ALIST-TO-PLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST"
     :EXTERNALP T)
    (:NAME "DEFCLAUSE-DRIVER" :PACKAGE-NAME "REASONABLE-UTILITIES.ITER"
     :EXTERNALP T)
    (:NAME "REM#" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "PLIST->HT" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "ALISTP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "ZIP" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "WHEN-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "DS-BIND" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-PROG2" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX"
     :EXTERNALP T)
    (:NAME "REMOVEF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE" :EXTERNALP
     T)
    (:NAME "COND-LET" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/LET"
     :EXTERNALP T)
    (:NAME "AND-IT" :PACKAGE-NAME "REASONABLE-UTILITIES.ANAPHORIC/IT"
     :EXTERNALP T)
    (:NAME "PARTITION-WITH" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "MKLIST" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "ESWITCH" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "PECASE" :PACKAGE-NAME "REASONABLE-UTILITIES.SYNTAX" :EXTERNALP T)
    (:NAME "HT-KEYS" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)
    (:NAME "SINGLE" :PACKAGE-NAME "REASONABLE-UTILITIES.LIST" :EXTERNALP T)
    (:NAME "READ-FILE" :PACKAGE-NAME "REASONABLE-UTILITIES.STRING" :EXTERNALP
     T)
    (:NAME "MORE" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "ENSURE-SYMBOL" :PACKAGE-NAME "REASONABLE-UTILITIES.SYMBOL"
     :EXTERNALP T)
    (:NAME "EQUAL-LENGTHS" :PACKAGE-NAME "REASONABLE-UTILITIES.SEQUENCE"
     :EXTERNALP T)
    (:NAME "MAPTIMES" :PACKAGE-NAME "REASONABLE-UTILITIES.MISC" :EXTERNALP T)
    (:NAME "SUB" :PACKAGE-NAME "REASONABLE-UTILITIES.SHORT" :EXTERNALP T)))))
