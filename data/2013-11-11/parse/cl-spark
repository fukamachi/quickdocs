
(:TYPE :SYSTEM :NAME "cl-spark" :AUTHOR "Takaya OCHIAI <tkych.repl@gmail.com>"
 :MAINTAINER NIL :VERSION "0.1.1" :LICENCE "MIT License" :DESCRIPTION "
CL-Spark generates sparkline string for a list of the numbers.
CL-spark is a Common Lisp implementation of Zach Holman's `spark' and
Gil Gonçalves' `vspark' with little extention.

 * spark:    https://github.com/holman/spark
 * vspark:   https://github.com/LuRsT/vspark
 * cl-spark: https://github.com/tkych/cl-spark
"
 :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-SPARK" :FULL-NAME "CL-SPARK" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-CONCAT" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STRINGS" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "AWHEN" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AT-LEAST-TWO-CHARS-P" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "<TICKS>" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TICKS*" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T) :DOCUMENTATION
     "A simple-vector of characters for representation of sparklines.
Default is #(#▁ #▂ #▃ #▄ #▅ #▆ #▇ #█).

Examples:

  (defvar ternary '(-1 0 1 -1 1 0 -1 1 -1))

  (spark ternary)              => \"▁▄█▁█▄▁█▁\"

  (let ((*ticks* #(#_ #- #¯)))
    (spark ternary))           => \"_-¯_¯-_¯_\"

  (let ((*ticks* #(#▄ #⎯ #▀)))
    (spark ternary))           => \"▄⎯▀▄▀⎯▄▀▄\"

"
     :INITIAL-VALUE
     "(VECTOR (CODE-CHAR 9601) (CODE-CHAR 9602) (CODE-CHAR 9603) (CODE-CHAR 9604)
        (CODE-CHAR 9605) (CODE-CHAR 9606) (CODE-CHAR 9607) (CODE-CHAR 9608))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPARK" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NUMBERS" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MIN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION "Generates a sparkline string for a list of real numbers.

Usage: SPARK <numbers> &key <min> <max> <key>

  * <numbers> ::= <list> of <real-number>
  * <min>     ::= { <null> | <real-number> }, default is NIL
  * <max>     ::= { <null> | <real-number> }, default is NIL
  * <key>     ::= <function>

  * <numbers> ~ data.
  * <min>    ~ lower bound of output.
               NIL means the minimum value of the data.
  * <max>    ~ upper bound of output.
               NIL means the maximum value of the data.
  * <key>    ~ function for preparing data.

Examples:

  (spark '(1 0 1 0))     => \"█▁█▁\"
  (spark '(1 0 1 0 0.5)) => \"█▁█▁▄\"
  (spark '(1 0 1 0 -1))  => \"█▄█▄▁\"

  (spark '(0 30 55 80 33 150))                 => \"▁▂▃▅▂█\"
  (spark '(0 30 55 80 33 150) :min -100)       => \"▃▄▅▆▄█\"
  (spark '(0 30 55 80 33 150) :max 50)         => \"▁▅██▅█\"
  (spark '(0 30 55 80 33 150) :min 30 :max 80) => \"▁▁▄█▁█\"

  (spark '(0 1 2 3 4 5 6 7 8) :key (lambda (x) (sin (* x pi 1/4))))
  => \"▄▆█▆▄▂▁▂▄\"
  (spark '(0 1 2 3 4 5 6 7 8) :key (lambda (x) (cos (* x pi 1/4))))
  => \"█▆▄▂▁▂▄▆█\"

 For more examples, see cl-spark/test.lisp
")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*VTICKS*" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T) :DOCUMENTATION
     "A simple-vector of characters for representation of vartical
sparklines. Default is #(#▏ #▎ #▍ #▌ #▋ #▊ #▉ #█).

Examples:

  ;; Japan GDP growth rate, annal
  ;; c.f. http://data.worldbank.org/indicator/NY.GDP.MKTP.KD.ZG
  (defparameter growth-rate
   '((2007 . 2.192186) (2008 . -1.041636) (2009 . -5.5269766)
     (2010 . 4.652112) (2011 . -0.57031655) (2012 . 1.945)))

  (vspark growth-rate :key #'cdr :labels (mapcar #'car growth-rate))
  =>
  \"
       -5.5269766        -0.4374323         4.652112
       ˫---------------------+---------------------˧
  2007 ██████████████████████████████████▏
  2008 ███████████████████▊
  2009 ▏
  2010 ████████████████████████████████████████████
  2011 █████████████████████▉
  2012 █████████████████████████████████▏
  \"

  (let ((*vticks* #(#- #0 #+)))
    (vspark growth-rate :key (lambda (y-r) (float-sign (cdr y-r)))
                        :labels (mapcar #'car growth-rate)
                        :size 1))
  =>
  \"
  2007 +
  2008 -
  2009 -
  2010 +
  2011 -
  2012 +
  \"
"
     :INITIAL-VALUE
     "(VECTOR (CODE-CHAR 9615) (CODE-CHAR 9614) (CODE-CHAR 9613) (CODE-CHAR 9612)
        (CODE-CHAR 9611) (CODE-CHAR 9610) (CODE-CHAR 9609) (CODE-CHAR 9608))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VSPARK" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NUMBERS" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MIN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      ((:NAME "SIZE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL) 50)
      (:NAME "LABELS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TITLE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      ((:NAME "SCALE?" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NEWLINE?" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Generates a vartical sparkline string for a list of real numbers.

Usage: VSPARK <numbers> &key <min> <max> <key> <size>
                             <labels> <title> <scale?> <newline?>

  * <numbers>  ::= <list> of <real-number>
  * <min>      ::= { <null> | <real-number> }, default is NIL
  * <max>      ::= { <null> | <real-number> }, default is NIL
  * <key>      ::= <function>
  * <size>     ::= <integer 1 *>, default is 50
  * <labels>   ::= <list>
  * <title>    ::= { <null> | <string> }
  * <scale?>   ::= <boolean>, default is T
  * <newline?> ::= <boolean>, default is T

  * <numbers>  ~ data.
  * <min>      ~ lower bound of output.
                 NIL means the minimum value of the data.
  * <max>      ~ upper bound of output.
                 NIL means the maximum value of the data.
  * <key>      ~ function for preparing data.
  * <size>     ~ maximum number of output columns (contains label).
  * <labels>   ~ labels for data.
  * <title>    ~ If title is too big for size, then not print.
  * <scale?>   ~ If T, output graph with scale for easy to see.
                 If string length of min and max is too big for size,
                 then not print scale.
  * <newline?> ~ If T, output graph with newlines for easy to see.


Examples:

  ;; Life expectancy by WHO region, 2011, bothsexes
  ;; c.f. http://apps.who.int/gho/data/view.main.690
  (defvar life-expectancies '((\"Africa\" 56)
                              (\"Americans\" 76)
                              (\"South-East Asia\" 67)
                              (\"Europe\" 76)
                              (\"Eastern Mediterranean\" 68)
                              (\"Western Pacific\" 76)
                              (\"Global\" 70)))

  (vspark life-expectancies :key #'second :scale? nil :newline? nil)
  =>
  \"▏
  ██████████████████████████████████████████████████
  ███████████████████████████▌
  ██████████████████████████████████████████████████
  ██████████████████████████████▏
  ██████████████████████████████████████████████████
  ███████████████████████████████████▏\"

  (vspark life-expectancies :min 50 :max 80
                            :key    #'second
                            :labels (mapcar #'first life-expectancies)
                            :title \"Life Expectancy\")
  =>
  \"
                   Life Expectancy                  
                        50           65           80
                        ˫------------+-------------˧
                 Africa █████▋
              Americans ████████████████████████▎
        South-East Asia ███████████████▉
                 Europe ████████████████████████▎
  Eastern Mediterranean ████████████████▊
        Western Pacific ████████████████████████▎
                 Global ██████████████████▋
  \"

  (vspark '(0 1 2 3 4 5 6 7 8) :key (lambda (x) (sin (* x pi 1/4)))
                               :size 20)
  \"
  -1.0     0.0     1.0
  ˫--------+---------˧
  ██████████▏
  █████████████████▏
  ████████████████████
  █████████████████▏
  ██████████▏
  ██▉
  ▏
  ██▉
  █████████▉
  \"

  (vspark '(0 1 2 3 4 5 6 7 8) :key (lambda (x) (sin (* x pi 1/4)))
                               :size 10)
  =>
  \"
  -1.0   1.0
  ˫--------˧
  █████▏
  ████████▏
  ██████████
  ████████▏
  █████▏
  █▏
  ▏
  █▏
  ████▏
  \"

  (vspark '(0 1 2 3 4 5 6 7 8) :key (lambda (x) (sin (* x pi 1/4)))
                               :size 1)
  =>
  \"
  ▌
  ▊
  █
  ▊
  ▌
  ▎
  ▏
  ▎
  ▌
  \"

  For more examples, see cl-spark/test.lisp
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-BAR" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "UNIT" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "MIN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NUM-CONTENT-TICKS" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-TITLE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TITLE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "SIZE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "MAX-LENGETH-LABEL" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-NON-DOUBLE-FLOAT" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-SCALE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "MIN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SIZE" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL)
      (:NAME "MAX-LENGETH-LABEL" :PACKAGE-NAME "CL-SPARK" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "*TICKS*" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T)
    (:NAME "SPARK" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T)
    (:NAME "*VTICKS*" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T)
    (:NAME "VSPARK" :PACKAGE-NAME "CL-SPARK" :EXTERNALP T)))))
