
(:TYPE :SYSTEM :NAME "com.informatimago.rdp.example" :AUTHOR
 "Pascal Bourguignon <pjb@informatimago.com>" :MAINTAINER
 "Pascal Bourguignon <pjb@informatimago.com>" :VERSION "1.0.1" :LICENCE "AGPL3"
 :DESCRIPTION
 "An example of parser generated with the Recursive Descent Parser Generator."
 :LONG-DESCRIPTION "

A couple of examples for a simple expression programm language, one
grammar without explicit actions (using the default generator of the
RDPG), and another with actions written in the lisp target-language,
both producing parsers in Lips.

"
 :DEPENDS-ON ("com.informatimago.rdp") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "COM.INFORMATIMAGO.RDP.EXAMPLE" :FULL-NAME
   "COM.INFORMATIMAGO.RDP.EXAMPLE" :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "EXAMPLE-SCANNER" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "RDP-SCANNER" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SCAN-NEXT-TOKEN" :PACKAGE-NAME
      "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SCANNER" :PACKAGE-NAME
        "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T)
       (:NAME "EXAMPLE-SCANNER" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
        :EXTERNALP NIL))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARSER-DATA" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP
       NIL))
     :DOCUMENTATION "RETURN: (scanner-current-token scanner)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-BLOCK" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(BLOCK
    (SEQ
     ((OPT
       ((SEQ
         (\"const\" IDENT \"=\" NUMBER
          (REP ((SEQ (\",\" IDENT \"=\" NUMBER) (`(,$2 ,$4))))) \";\")
         (`((,$2 ,$4) ,@$5)))))
      (OPT
       ((SEQ (\"var\" IDENT (REP ((SEQ (\",\" IDENT) ($2)))) \";\") (`(,$2 ,@$3)))))
      (REP ((SEQ (\"procedure\" IDENT \";\" BLOCK \";\") (`(PROCEDURE ,$2 ,$4)))))
      STATEMENT)
     (`(BLOCK ,$1 ,$2 ,$3 ,$4))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-STATEMENT" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(STATEMENT
 (SEQ
  ((OPT
    ((SEQ
      ((ALT
        ((SEQ (IDENT \":=\" EXPRESSION) (`(SETF ,$1 ,$3)))
         (SEQ (\"call\" IDENT) (`(CALL ,$2)))
         (SEQ (\"begin\" STATEMENT (REP ((SEQ (\";\" STATEMENT) ($2)))) \"end\")
          (`(,$2 ,@$3)))
         (SEQ (\"if\" CONDITION \"then\" STATEMENT)
          (`(IF ,$2
                ,$4)))
         (SEQ (\"while\" CONDITION \"do\" STATEMENT) (`(WHILE ,$2 ,$4))))))
      ($0)))))
  ($1)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-NUMBER" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(NUMBER (SEQ ((ALT (INTEGER REAL))) ($1)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-CONDITION" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(CONDITION
 (SEQ
  ((ALT
    ((SEQ (\"odd\" EXPRESSION) (`(ODDP ,$2)))
     (SEQ (EXPRESSION (ALT (\"=\" \"#\" \"<\" \"<=\" \">\" \">=\")) EXPRESSION)
      (`(,$2 ,$1 ,$3))))))
  ($1)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-EXPRESSION" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(EXPRESSION
 (SEQ
  ((OPT ((SEQ ((ALT (\"+\" \"-\"))) ($0)))) TERM
   (REP ((SEQ ((ALT (\"+\" \"-\")) TERM) (`(,$1 ,$2))))))
  (`(+
     ,(IF $1
          `(,$1 ,$2)
          $2)
     ,@$3))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-TERM" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION
     "(TERM (SEQ (FACTOR (REP ((SEQ ((ALT (\"*\" \"/\")) FACTOR) ($0))))) (`(,$1 ,@$2))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-FACTOR" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION
     "(FACTOR (SEQ ((ALT (IDENT NUMBER (SEQ (\"(\" EXPRESSION \")\") ($2))))) ($1)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE/PARSE-PROGRAM" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(PROGRAM (SEQ (BLOCK \".\") ($1)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-EXAMPLE" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP NIL))
     :DOCUMENTATION "
SOURCE: When the grammar has a scanner generated, or a scanner class
        name, SOURCE can be either a string, or a stream that will be
        scanned with the generated scanner.  Otherwise, it should be a
        SCANNER instance.
"))
   :EXTERNAL-SYMBOLS
   ((:NAME "PARSE-EXAMPLE" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP.EXAMPLE"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "-WITHOUT-ACTION" :FULL-NAME
   "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION-SCANNER" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "RDP-SCANNER" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SCAN-NEXT-TOKEN" :PACKAGE-NAME
      "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SCANNER" :PACKAGE-NAME
        "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T)
       (:NAME "EXAMPLE-WITHOUT-ACTION-SCANNER" :PACKAGE-NAME
        "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARSER-DATA" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP
       NIL))
     :DOCUMENTATION "RETURN: (scanner-current-token scanner)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-BLOCK" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(BLOCK
    (SEQ
     ((OPT
       ((SEQ
         (\"const\" IDENT \"=\" NUMBER (REP ((SEQ (\",\" IDENT \"=\" NUMBER) ($0))))
          \";\")
         ($0))))
      (OPT ((SEQ (\"var\" IDENT (REP ((SEQ (\",\" IDENT) ($0)))) \";\") ($0))))
      (REP ((SEQ (\"procedure\" IDENT \";\" BLOCK \";\") ($0)))) STATEMENT)
     (`(BLOCK ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-STATEMENT" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(STATEMENT
 (SEQ
  ((OPT
    ((SEQ
      ((ALT
        ((SEQ (IDENT \":=\" EXPRESSION) ($0)) (SEQ (\"call\" IDENT) ($0))
         (SEQ (\"begin\" STATEMENT (REP ((SEQ (\";\" STATEMENT) ($0)))) \"end\")
          ($0))
         (SEQ (\"if\" CONDITION \"then\" STATEMENT) ($0))
         (SEQ (\"while\" CONDITION \"do\" STATEMENT) ($0)))))
      ($0)))))
  (`(STATEMENT ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-NUMBER" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(NUMBER (SEQ ((ALT (INTEGER REAL))) (`(NUMBER ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-CONDITION" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(CONDITION
 (SEQ
  ((ALT
    ((SEQ (\"odd\" EXPRESSION) ($0))
     (SEQ (EXPRESSION (ALT (\"=\" \"#\" \"<\" \"<=\" \">\" \">=\")) EXPRESSION) ($0)))))
  (`(CONDITION ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-EXPRESSION" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(EXPRESSION
 (SEQ
  ((OPT ((SEQ ((ALT (\"+\" \"-\"))) ($0)))) TERM
   (REP ((SEQ ((ALT (\"+\" \"-\")) TERM) ($0)))))
  (`(EXPRESSION ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-TERM" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION
     "(TERM (SEQ (FACTOR (REP ((SEQ ((ALT (\"*\" \"/\")) FACTOR) ($0))))) (`(TERM ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-FACTOR" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(FACTOR
 (SEQ ((ALT (IDENT NUMBER (SEQ (\"(\" EXPRESSION \")\") ($0))))) (`(FACTOR ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE-WITHOUT-ACTION/PARSE-PROGRAM" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCANNER" :PACKAGE-NAME
       "COM.INFORMATIMAGO.COMMON-LISP.PARSER.SCANNER" :EXTERNALP T))
     :DOCUMENTATION "(PROGRAM (SEQ (BLOCK \".\") (`(PROGRAM ,@$0))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-EXAMPLE-WITHOUT-ACTION" :PACKAGE-NAME
      "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE" :PACKAGE-NAME "COM.INFORMATIMAGO.RDP" :EXTERNALP NIL))
     :DOCUMENTATION "
SOURCE: When the grammar has a scanner generated, or a scanner class
        name, SOURCE can be either a string, or a stream that will be
        scanned with the generated scanner.  Otherwise, it should be a
        SCANNER instance.
"))
   :EXTERNAL-SYMBOLS
   ((:NAME "PARSE-EXAMPLE-WITHOUT-ACTION" :PACKAGE-NAME
     "COM.INFORMATIMAGO.RDP.EXAMPLE-WITHOUT-ACTION" :EXTERNALP T)))))
