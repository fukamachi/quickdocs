
(:TYPE :SYSTEM :NAME "log4cl" :AUTHOR NIL :MAINTAINER NIL :VERSION "1.1.2"
 :LICENCE NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON
 ("BORDEAUX-THREADS") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "-IMPL-FIXER" :FULL-NAME "LOG4CL-IMPL-FIXER"
   :DOCUMENTATION NIL :SYMBOL-LIST NIL :EXTERNAL-SYMBOLS NIL)
  (:TYPE :PACKAGE :NAME "-IMPL" :FULL-NAME "LOG4CL-IMPL" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-UNSET+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "16")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU9+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "15")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU8+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "14")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU7+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "13")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU6+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "12")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU5+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "11")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-TRACE+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "10")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU4+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "9")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU3+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "8")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU2+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "7")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBU1+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "6")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-DEBUG+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "5")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-INFO+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "4")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-WARN+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "3")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-ERROR+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "2")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-FATAL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-LEVEL-OFF+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+MIN-LOG-LEVEL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "LOG4CL-IMPL:+LOG-LEVEL-FATAL+")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+MAX-LOG-LEVEL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "LOG4CL-IMPL:+LOG-LEVEL-DEBU9+")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-FROM-LETTER+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"OFEWID1234T56789U\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-SYMBOLS+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(LOG4CL-IMPL::OFF LOG4CL-IMPL::FATAL ERROR WARN LOG4CL-IMPL::INFO DEBUG
  LOG4CL-IMPL::DEBU1 LOG4CL-IMPL::DEBU2 LOG4CL-IMPL::DEBU3 LOG4CL-IMPL::DEBU4
  TRACE LOG4CL-IMPL::DEBU5 LOG4CL-IMPL::DEBU6 LOG4CL-IMPL::DEBU7
  LOG4CL-IMPL::DEBU8 LOG4CL-IMPL::DEBU9 LOG4CL-IMPL::UNSET)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-MACRO-SYMBOLS+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(REMOVE-IF
 (LAMBDA (LOG4CL-IMPL::X)
   (MEMBER LOG4CL-IMPL::X '(LOG4CL-IMPL::OFF LOG4CL-IMPL::UNSET)))
 LOG4CL-IMPL::+LOG-LEVEL-SYMBOLS+)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-FROM-STRING+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(MAPCAR 'STRING-UPCASE (MAPCAR 'SYMBOL-NAME LOG4CL-IMPL::+LOG-LEVEL-SYMBOLS+))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-TO-KEYWORD+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(COERCE
 '(:OFF :FATAL :ERROR :WARN :INFO :DEBUG :DEBU1 :DEBU2 :DEBU3 :DEBU4 :TRACE
   :DEBU5 :DEBU6 :DEBU7 :DEBU8 :DEBU9)
 'SIMPLE-VECTOR)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-TO-STRING+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(MAP 'SIMPLE-VECTOR #'STRING-UPCASE LOG4CL-IMPL::+LOG-LEVEL-TO-KEYWORD+)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LOG-LEVEL-TO-LC-STRING+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(MAP 'SIMPLE-VECTOR #'STRING-DOWNCASE LOG4CL-IMPL::+LOG-LEVEL-TO-KEYWORD+)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-INDENT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION
     "Indent level can be used to indent logging info, is printed by %I
pattern format"
     :INITIAL-VALUE "0")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NDC-CONTEXT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION "Value that is printed by %x pattern format")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-EVENT-TIME*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Value of (GET-UNIVERSAL-TIME) for the current log event"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-EVENT-PACKAGE-HINT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Package at call site or NIL if log statement had no literal symbols
  interned in *PACKAGE*"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INSIDE-USER-LOG-FUNCTION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "True when we are inside of user log function, used to distinguish
errors that are signaled the log statement itself, vs errors in layout
or appender."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-TRUENAME*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION
     "Will be used instead of *COMPILE-FILE-TRUENAME* or *LOAD-TRUENAME*
when non-NIL to determine logger's parent file logger."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG4CL-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "MESSAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG4CL-STYLE-WARNING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "MESSAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOGGER-CATEGORY-DEPTH-BITS+" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "6")
    (:TYPE :TYPE :SYMBOL
     (:NAME "LOGGER-CAT-IDX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOGGER-AFTER-PACKAGE-FLAG+" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(ASH 1 LOG4CL-IMPL::+LOGGER-CATEGORY-DEPTH-BITS+)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+EXPR-FORMAT-SIMPLE+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"~W: ~W ~:_\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+EXPR-FORMAT-FANCY+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"~:_~<~(~W~): ~2I~_~W~:> \"")
    (:TYPE :CLASS :SYMBOL
     (:NAME "NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Contains configuration that affects expansion of logger macros."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "%CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "%CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "%EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "USE-SHORTEST-NICKNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "%USE-SHORTEST-NICKNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXPR-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%EXPR-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "%OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION "Naming configuration currently in effect" :INITIAL-VALUE
     "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "USE-SHORTEST-NICKNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPR-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :DOCUMENTATION "Default naming configuration" :INITIAL-VALUE
     "(MAKE-INSTANCE 'LOG4CL-IMPL:NAMING-CONFIGURATION :USE-SHORTEST-NICKNAME T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DOTTED-NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :DOCUMENTATION "Naming configuration for dotted packages" :INITIAL-VALUE
     "(MAKE-INSTANCE 'LOG4CL-IMPL:NAMING-CONFIGURATION :USE-SHORTEST-NICKNAME NIL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NAMING-CONFIGURATIONS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQUAL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DOTTED-PACKAGE-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-OR-CREATE-NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CREATEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-PACKAGE-NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "LOG-LEVEL-FROM-OBJECT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Should return numeric log level from the user
representation, can be specialized per-package to have custom log
level names. Default implementation converts object to string and
parses \"fatal\" \"debug\" and so on. Called by MAKE-LOG-LEVEL
function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NAMING-OPTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OPTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "DEPRECIATED. Use PACKAGE-OPTIONS macro instead ")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PACKAGE-WRAPPER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "EXPLICIT-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "DEPRECIATED. 

   Allows packages to optionally massage logger names in their
namespace. CATEGORIES will be a list of category names from parent
to child, and EXPLICIT-P will be non-NIL if that list was specified as
an explicit list constant in a logging macro.

Should return (values NEW-CATEGORIES [CAT-LIST-INDEXES])

Where NEW-CATEGORIES should be a new list of categories to use instead
of CATEGORIES.

CAT-LIST-INDEXES should be a list of three numbers (FILE-IDX
PACKAGE-START-IDX PACKAGE-END-IDX) which have the following meaning:

  * FILE-IDX    -- index of the category representing file name (zero based)
  * PACKAGE-IDX -- index of the first and last (exclusive) category representing
  the package.

Based on the above indexes, the pattern layout %g (package) and
%F (file name) and %G (everything else) will be able to return correct
values, on matter where in the package or filename are located in the
category hierarchy.

Default method will first find PACKAGE shortest nickname, then split
it according to category-separator naming option, then return the
values like so:

 (,@<split package> ,*LOGGER-TRUENAME* ,@CATEGORIES)

")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "RESOLVE-LOGGER-FORM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Is called by all logging macros to figure out the
logger to log into. PACKAGE and ENV are the current value of *PACKAGE*
and the macro environment of the logging macro, and ARGS
are its arguments.

Returns two values, first being either a logger, or a form that when
evaluated will return a logger, and second value being list of
arguments to be passed to the format statement that will log the
message.

When second value returned is NIL, then logging macro will not log any
message but will rather expand into a non-NIL value if logging is
enabled on that logger.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "RESOLVE-DEFAULT-LOGGER-FORM" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Is called by RESOLVE-LOGGER-FORM when logging macro
arguments do not specify the logger to log into. See
RESOLVE-LOGGER-FORM for return values")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ENCLOSING-SCOPE-BLOCK-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Is called by RESOLVE-DEFAULT-LOGGER-FORM to try to
determine the enclosing lexical scope name. For example if logging
macro is being expanded while compiling local function BAR inside of a
definition of function FOO, the implementation of this method should
strive to return '(FOO BAR) if possible.

For CLOS method it is recommended that return value be a generic
function name, followed by optional qualifier, and then followed by
any non-T specializers, with EQL specializers flattened to their
values, for example for the :AROUND method FOO with lambda list
of ((OBJ1 BAR) (OPTION (EQL :BAZ)) OBJ3) should strive to return
'(FOO AROUND BAR BAZ) ")
    (:TYPE :METHOD :SYMBOL
     (:NAME "LOG-LEVEL-FROM-OBJECT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Converts human readable log level description in ARG into numeric log level.

Supported values for ARG are:

- Symbol or string which name matches log level, e.g: :debug, :info,
  DEBUG, USER1, :err \"off\"

- 1-character long symbol or string, used as a shortcut. All standard
  levels can be uniquely identified by their first
  character: (o)ff (f)atal (e)rror (w)arn (i)nfo (d)ebug (t)race (u)nset,

- 1 character digit 1 through 9 identifying user1 through user9 levels.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSTANTIATE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "EXPLICITP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CREATEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RESOLVE-DEFAULT-LOGGER-FORM" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the logger named after the enclosing lexical environment")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PACKAGE-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Return package categories split as per package configuration")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PACKAGE-WRAPPER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "EXPLICIT-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Find the PACKAGES shortest name or nickname, and prefix CATEGORIES
list with it")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SHORTEST-PACKAGE-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Return the shortest name or nickname of the package")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JOIN-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Return a string with each element of LIST printed separated by
SEPARATOR")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NAMING-OPTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OPTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return default values for naming options which are:
    :CATEGORY-SEPARATOR \":\"")
    (:TYPE :METHOD :SYMBOL
     (:NAME "RESOLVE-LOGGER-FORM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "- When first element of args is NIL or a constant string, calls
 RESOLVE-DEFAULT-LOGGER-FORM that will try to obtain logger name from
 the environment

- When first argument is a :KEYWORD, returns logger named <KEYWORD>

- When first argument is a quoted symbol, returns logger named
  <current-package>.<symbol>

- Otherwise returns the form `(GET-LOGGER ,(FIRST ARGS) ,@(REST ARGS))'")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOG-EXPR-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Implement the parsing for (log:expr) arguments. Should return the
list of arguments to FORMAT starting with control string")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-STRING-MODIFY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CASE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION
     "Helper function that writes STRING to STREAM, optionally doing case
conversion.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIX-METHOD-SPEC-LIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Flatten method specializer list, remove any T specializers, replace
all constant EQL specializers with their values, and eliminate
non-constant ones")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAFE-INTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INCLUDE-BLOCK-DEBUG-NAME?" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "DEBUG-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Figures out if we should include the debug-name into the stack of
nested blocks..  Should return the symbol to use.

For now SBCL seems to use:

  SYMBOL => normal defun block
  (LABELS SYMBOL) => inside of labels function
  (FLET SYMBOL)   => inside of flet function
  (LAMBDA (arglist) => inside of anonymous lambda
  (SB-PCL::FAST-METHOD SYMBOL ...) for defmethod
  (SB-PCL::VARARGS-ENTRY (SB-PCL::FAST-METHOD SYMBOL )) for defmethod with &rest parametwer
  (SB-C::HAIRY-ARG-PROCESSOR SYMBOL) => for functions with complex lambda lists

In all of the above cases except LAMBDA we simply return SYMBOL, for
LAMBDA we return the word LAMBDA and NIL for anything else.

Example: As a result of this default logger name for SBCL for the
following form:

   (defmethod foo ()
     (labels ((bar ()
                (funcall (lambda ()
                           (flet ((baz ()
                                    (log-info \"test\")))
                             (baz))))))
       (bar)))

will be: package.foo.bar.baz

")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SBCL-GET-BLOCK-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list naming SBCL lexical environment. For example when
compiling local function FOO inside a global function FOOBAR, will
return (FOOBAR FOO)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCLOSING-SCOPE-BLOCK-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the enclosing block name suitable for naming a logger")
    (:TYPE :CLASS :SYMBOL
     (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Appender is log message sink, and is responsible
for physically delivering the log message, somewhere. The formatting
of message is done by layout.

Appenders can be called from multiple threads and are responsible for
serializing access to any resources.

Appender will not be appended into if ENABLED slot is NIL

HANDLE-APPENDER-ERROR generic function is called if condition is
signaled from APPENDER-DO-APPEND method. See description of that
function for the protocol.
"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :ACCESSORS
       ((:NAME "APPENDER-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGER-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-LOGGER-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "APPENDER-LOGGERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ENABLED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "APPENDER-ENABLED-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILTER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "APPENDER-FILTER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAST-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-LAST-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAST-IGNORED-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-LAST-IGNORED-ERROR" :PACKAGE-NAME "LOG4CL-IMPL"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "IGNORED-ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-IGNORED-ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MESSAGE-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "APPENDER-MESSAGE-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-ADDED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Called when appender is added to a logger. Default
method is used to keep logger count, and if re-implemented
the (CALL-NEXT-METHOD) needs to be called.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-REMOVED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Called when appender is removed from a logger
 Default method is used to keep logger refcount, and calls
CLOSE-APPENDER when it reaches zero. If re-implemented
the (CALL-NEXT-METHOD) needs to be called")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CLOSE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Called when appender refcount reaches zero after
being positive. Should close any streams or files that appender had
opened.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SAVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Called from SAVE-HOOKS, must close appenders that
own their stream in a such way, so its possible to reopen them")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Writes the log message into the appender. Text of the log message
is specified indirectly via LOG-FUNC argument, which will be a
function that accepts a stream, and writes the text of log message to
it.

  This function should first figure out or obtain the stream to write
the log message to, and then call the LAYOUT-TO-STREAM function to have
layout do actual formatting.

If appender destination is ultimately not a stream, then it can
obtain the full text of the log message by calling LAYOUT-TO-STREAM
inside of WITH-OUTPUT-TO-STRING

Example:

 (defmethod appender-do-append ((self custom-appender) logger level log-func)
   (let ((stream (custom-appender-destination)))
     (layout-to-stream (slot-value self 'layout)
                       stream logger level log-func))
   (values))

Return value of this function is ignored")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "HANDLE-APPENDER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Called when a condition is raised doing writing to
the appender by APPENDER-DO-APPEND call, must return a keyword
indicating action to take.

  :DISABLE -- Appender is permanently disabled by setting ENABLED slot
  to NIL, any farther appends will be ignored.

  :RETRY -- immediately retry logging the same log message. To prevent
  forever loops, only up to three retries will be performed, and if
  error persists on the third try, appender will be disabled

  :IGNORE -- Do nothing. Log message will be lost, but appender will
  be used again if more log messages come in.

  Any other values are treated as :DISABLE

After calling this function, LOG4CL will update the RETRY-COUNT,
IGNORE-COUNT, LAST-ERROR and LAST-IGNORED-ERROR slots of the appender,
based on the return value.

Default primary method logs the error, and returns :DISABLE
")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PROPERTY-INITARG-FROM-STRING" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PROPERTY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Called on appenders and layouts to possibly convert
property value from a string into whatever its supposed to be. Default
method will handle numeric, boolean and string properties, by calling
PROPERTY-ALIST function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Should return list of valid object properties, each
element of the list being (INITARG SLOT TYPE) with INITARG being the
keyword, SLOT is the slot name for the property and TYPE one of:

Type                    | Description
------------------------|------------------------------------------------------
NUMBER or :NUMBER       | Integer property, converted by (parse-integer)
------------------------|------------------------------------------------------
BOOLEAN or :BOOLEAN     | Boolean, accepts \"true\" \"t\" \"on\" \"false\" 
                        | \"off\" \"nil\" and empty string
------------------------|------------------------------------------------------
STRING or :STRING       | Value as-is after the equal sign in NAME = <value>
                        | Whitespace is not stripped
------------------------|------------------------------------------------------
:STRING-SKIP-WHITESPACE | Value with the leading whitespace removed

Overriding this method to add extra properties is the only thing
needed to allow extra properties in custom appenders/layouts to be
configurable from by property file configurator. See also
PROPERTY-INITARG-FROM-STRING")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-DO-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Perform any flushes of appender output if needed, marking the that
output was performed at time TIME. This function can be called from
any thread and should take care of serializing")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HIERARCHY-MAX*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION
     "Number of hierarchies registered with the log4cl library. Each
hierarchy has independent configuration with regards to log levels and
appenders"
     :INITIAL-VALUE "1")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HIERARCHY*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION
     "Active hierarchy index. All logging functions use logger state
indexed by this variable. Can be assigned directly or "
     :INITIAL-VALUE "0")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HIERARCHY-LOCK*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Global lock for changing logging configuration"
     :INITIAL-VALUE
     "(BORDEAUX-THREADS:MAKE-RECURSIVE-LOCK \"hierarchy-lock\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HIERARCHY-WATCHER-HEARTBEAT*" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :DOCUMENTATION "How long hierarchy watcher thread sleeps between calling
WATCHER-HOOK of each hierarchy"
     :INITIAL-VALUE "1")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WATCHER-EVENT-TIME*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Universal time of the current watcher heartbeat"
     :INITIAL-VALUE "0")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WATCHER-THREAD*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "The hierarchy watcher thread" :INITIAL-VALUE "NIL")
    (:TYPE :CLASS :SYMBOL
     (:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDEX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WATCH-TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "WATCH-TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%LOCK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HIERARCHIES*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Array of all hierarchies in the system" :INITIAL-VALUE
     "(MAKE-ARRAY 1 :ADJUSTABLE T :FILL-POINTER T :INITIAL-CONTENTS
            `(,(MAKE-INSTANCE 'LOG4CL-IMPL::HIERARCHY :NAME :DEFAULT :INDEX 0)))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NAME-TO-HIERARCHY*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION
     "EQL hash table mapping hierarchy identifier to hierarchy index"
     :INITIAL-VALUE "(LET* ((LOG4CL-IMPL::TABLE (MAKE-HASH-TABLE))
       (LOG4CL-IMPL::H (AREF LOG4CL-IMPL::*HIERARCHIES* 0)))
  (SETF (GETHASH (SLOT-VALUE LOG4CL-IMPL::H 'LOG4CL-IMPL::NAME)
                 LOG4CL-IMPL::TABLE)
          LOG4CL-IMPL::H)
  LOG4CL-IMPL::TABLE)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "WATCH-TOKEN-CHECK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Will be called on each member of WATCH-TOKENS list
when hierarchy watcher thread is started. If a unhandled condition is
signaled from this function the watcher thread will remove
corresponding token from the list")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CURRENT-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Return the currently active hierarchy")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-HIERARCHIES-LOCK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-HIERARCHY-LOCK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
        ((:NAME "CURRENT-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
          NIL))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%HIERARCHY-INDEX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HIERARCHY-INDEX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the hierarchy index for the specified hierarchy. Hierarchy
must be already a number or a unique identifier suitable for comparing
using EQL. If hierarchy is a string, it will be interned in the current
package")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-WATCH-TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQUAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "KEY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "CURRENT-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))))
     :DOCUMENTATION
     "Add unique watch token to the HIERARCHY, uniqueness is determined
by TEST and KEY arguments which are passed to FIND and REMOVE. Any
matching token is already present, the old token is removed and new
one is inserted.

The per-hierarchy lock is held doing the operation.

Automatically starts hierarchy watcher thread, if it was not already started
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-WATCH-TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQUAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "KEY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "CURRENT-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))))
     :DOCUMENTATION
     "Removes the watch token from the hierarchy, that matches the
specified KEY and TEST arguments, which are passed to REMOVE
function. Holds per-hierarchy lock doing its operation")
    (:TYPE :STRUCT :SYMBOL
     (:NAME "LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MASK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "APPENDERS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM0" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "LEVEL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM1" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "ADDITIVITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM2" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "MASK" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM3" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CATEGORY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME-START-POS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PARENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CHILD-HASH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "CATEGORY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM65" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM66" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAME-START-POS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM67" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "PARENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM68" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "DEPTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM69" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "CHILD-HASH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM70" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "STATE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM71" :PACKAGE-NAME NIL :EXTERNALP NIL))
       ((:NAME "MAP-INTO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*HIERARCHY-MAX*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MAKE-LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
          NIL)))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT72" :PACKAGE-NAME NIL :EXTERNALP NIL)
       (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "STREAM73" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "ROOT-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DUMMY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%CREATE-ROOT-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "CATEGORY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM163" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM164" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAME-START-POS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM165" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "PARENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM166" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "DEPTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM167" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "CHILD-HASH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM168" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "STATE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM169" :PACKAGE-NAME NIL :EXTERNALP NIL))
       ((:NAME "MAP-INTO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*HIERARCHY-MAX*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MAKE-LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
          NIL))))
      (((:NAME "DUMMY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM170" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-CATEGORY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-NAME-START-POS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-PARENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-CHILD-HASH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "SOURCE-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAMESTRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-SOURCE-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "CATEGORY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM284" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM285" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAME-START-POS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM286" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "PARENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM287" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "DEPTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM288" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "CHILD-HASH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM289" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "STATE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM290" :PACKAGE-NAME NIL :EXTERNALP NIL))
       ((:NAME "MAP-INTO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*HIERARCHY-MAX*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MAKE-LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
          NIL))))
      (((:NAME "FILE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM291" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAMESTRING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM292" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT293" :PACKAGE-NAME NIL :EXTERNALP NIL)
       (:NAME "SOURCE-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "STREAM294" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "CATEGORY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM391" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM392" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAME-START-POS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM393" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "PARENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM394" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "DEPTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM395" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "CHILD-HASH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM396" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "STATE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM397" :PACKAGE-NAME NIL :EXTERNALP NIL))
       ((:NAME "MAP-INTO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*HIERARCHY-MAX*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MAKE-LOGGER-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
          NIL))))
      (((:NAME "FILE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM398" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT399" :PACKAGE-NAME NIL :EXTERNALP NIL)
       (:NAME "FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "STREAM400" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-CATEGORY-DEPTH-ACCESSOR" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "NAME2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FLAGS-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "FLAGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-PKG-IDX-START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FLAGS-PKG-IDX-START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "FLAGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-PKG-IDX-END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FLAGS-PKG-IDX-END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "FLAGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FIRST-AFTER-PACKAGE-P" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOGGER-FLAGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PKG-IDX-START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PKG-IDX-END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-LEVEL-TO-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return log-level string for the level")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-LEVEL-TO-LC-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return lower case log-level string for the level")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Translate a more human readable log level into one of the log
level constants, by calling LOG-LEVEL-FROM-OBJECT on ARG and current
value of *PACKAGE* ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EFFECTIVE-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return logger's own log level (if set) or the one it had inherited
from parent")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INHERITED-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return logger's own log level (if set) or the one it had inherited
from parent")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HAVE-APPENDERS-FOR-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return non-NIL if logging with LEVEL will actually reach any
appenders")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-LOGGER-CHILDREN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Apply the function to all of logger's children (but not their
descendants)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-LOGGER-DESCENDANTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Apply the function to all of logger's descendants")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADJUST-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Recalculate LOGGER mask by finding out which log levels have
reachable appenders. ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRIP-WHITESPACE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Strip tab and space characters from a string")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SKIP-WHITESPACE-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Split the STRING into a list of strings. If SKIP-WHITESPACE-P is
non-NIL strip whitespace from the string first")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-INTO-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CATEGORY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Splits the category name into a list of categories from parent to
child. Uses NAMING-OPTION to determine category separator")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%GET-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CAT-SEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CAT-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORCE-STRING-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CREATEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PKG-IDX-START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PKG-IDX-END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "IS-FILE-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Retrieve or create a logger.

CATEGORIES -- List of category names
SEPARATOR  -- Category separator. Will only be used if logger did not
              exist before.
CAT-CASE   -- How each category case is treated. See NAMING-OPTION
              generic function for description

FORCE-STRING-CASE -- Whenever elements of category which are strings,
should also undergo case conversion according to CAT-CASE

CREATEP    -- Create the logger if it does not exist
FILE       -- pathname, source file being compiled

PKG-IDX-START/PKG-IDX-END -- zero based indexes as to where
in CATEGORIES package name starts ends, meaning of indexes
is like SUBSEQ.. If package is unknown, both must be NIL

For historical reason the above indexes are incremented by one before
being stored in FLAGS slot, and functions LOGGER-PKG-IDX-START/END
return them 1 based, with 0 being used as a flag that there is no
package name in the category.

IS-FILE-P -- T when its an actual SOURCE-FILE-LOGGER being requested,
which is a special type of leaf logger representing the source file.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CURRENT-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IS-ENABLED-FOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Returns t if log level is enabled for the logger in the
context of the current application.")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "PACKAGE-REF-SYM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(INTERN (FORMAT NIL \" ~A\" (SYMBOL-NAME 'LOG4CL-IMPL::LOG4CL-ORIG-PACKAGE-REF)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-LOG-WITH-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a FORM that is used as an expansion of log-nnnnn macros")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBSTR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-WITH-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Submit message to logger appenders, and its parent logger")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-CHILDREN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return a freshly consed list of LOGGER's direct children")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-DESCENDANTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NOSELFP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return a list of LOGGER's descendants.

NOSELFP if T filters out Log4CL self-logger from descendants")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-ANCESTORS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list of logger's ancestors starting from parent and ending wit root logger")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the logger own log level or NIL if unset. Please note that
by default loggers inherit their parent logger log level, see
EFFECTIVE-LOG-LEVEL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the list of logger's own appenders. Please note that by
default loggers inherit their parent logger appenders, see
EFFECTIVE-APPENDERS")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EFFECTIVE-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the list of all appenders that logger output could possible go to,
including inherited one")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Set logger log level. Returns logger own log level")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return logger additivity")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER-ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Set logger appender additivity. Returns new additivity")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ADJUST-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Set the log level of a logger. Log level is passed to
MAKE-LOG-LEVEL to determine canonical log level. ADJUST-P controls if
logger effective log level needs to be recalculated, the caller should
NIL doing bulk operations that change the level of many loggers, as to
avoid overhead.

Returns if log level had changed as the 1st value and new level as the
second value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ADJUST-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Set logger additivity.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-APPENDER-INTERNAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ADJUST-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Adds appender to the logger")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-ADDED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-REMOVED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION
     "Decrement logger count and call CLOSE-APPENDER if it reaches zero")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-APPENDER-INTERNAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ADJUST-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-ALL-APPENDERS-INTERNAL" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ADJUST-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION
     "Removes APPENDER from the logger. APPENDER-REMOVED generic function
will be called if appender was removed")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Removes all appenders from the logger.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the name of the logger category itself (without parent loggers)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return source file path-name where logger was instantiated")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return source file path-name where logger was instantiated")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-FILE-NAMESTRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return source file name string where logger was instantiated")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-NAME-LENGTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Return length of logger itself (without parent loggers)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGGER-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return LOGGER categories starting from parent logger as a newly
consed list of strings")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADJUST-ALL-LOGGERS-STATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "NEW-LEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%%CREATE-ROOT-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ROOT-LOGGER*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION "The one and only root logger" :INITIAL-VALUE
     "(LOG4CL-IMPL::%%CREATE-ROOT-LOGGER)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-LOAD-FORM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Creates the logger when a logger constant is being loaded from a
compiled file")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-EVENT-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Returns the universal time of the current log event")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CALL-USER-LOG-MESSAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Calls the user log function, binding *INSIDE-USER-LOG-FUNCTION* for
the duration to indicate that any errors must be re-thrown, rather
then disable the appender")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOG-INDENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "INDENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "*LOG-INDENT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Executes forms in BODY with *LOG-INDENT* set to INDENT")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFLOG-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-FATAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-WARN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBUG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU3" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU4" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-TRACE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU5" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU6" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU7" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU8" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-DEBU9" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "
Submit log message to the logging system. Whenever
the message is actually displayed or not depends on logging system
configuration at run-time.

The ARGS are parsed as follows:

1. Determine a logger object

If first argument is a constant list, constant symbol or a keyword, it
is made into a logger object as described in the MAKE-LOGGER macro
documentation

If first argument is a constant string, logger name is auto-determined
from context as described in the MAKE-LOGGER macro documentation, and
system proceeds to step 2.

Otherwise any non-NIL first argument is assumed to be a form, that
when evaluated will return a logger object.

2. If there are remaining arguments, they are used as format control
string and format arguments, to be passed into the FORMAT function to
produce the log message, when one is produced.

If there were no other arguments, then this macro expands into a form,
that will return T or NIL depending if logging with specified log
level will actually produce any log messages. Note that having log
level enabled does not necessary mean logging with log level is
enabled, it also takes into account whenever log message will reach
any appenders.
")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+MAKE-LOGGER-SYMBOLS+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "'(LOG4CL-IMPL:MAKE-LOGGER)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-WITH-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SEXPS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Expands into LOG-<LEVEL> log statement that will print each element
of SEXPS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. Constant string elements will be output directly.

A pretty printer (pprint-newline :fill) format will be used as a
separator between expressions, so that long expressions start
on a new line, if *PRINT-PRETTY* is non-NIL

Example:

     (let ((a 1) (b '(two three))
           (c (loop for i from 1 to 15 collect i)))
       (log:sexp \"values are\" a b c))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)
              C=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)

Separator between expression and value, which defaults to equal sign,
and a suffix after each value, which defaults to \" ~:_\" (a space
followed by conditional newline) can be customized per package via
NAMING-OPTION generic function
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFLOG-SEXP-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-FATAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-WARN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBUG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU3" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU4" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-TRACE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU5" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU6" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU7" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU8" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP-DEBU9" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOG-SEXP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Expands into the log statement that will print each
element of ARGS in the form of ELEMENT=VALUE where ELEMENT will be the
literal argument without evaluating it, and VALUE will be the result
of evaluation. For constant string elements, it is output literally
without printing its value.

Example:

     (let ((a 1) (b '(two three)))  
       (log-sexp \"values are\" a b))

will produce log message:

    [debug] - values are A=1 B=(TWO THREE)

       ")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds the *CURRENT-HIERARCHY* to the specified hierarchy for the
dynamic scope of BODY. HIERARCHY can be hierarchy index or name")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-PACKAGE-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds the *CURRENT-HIERARCHY* to the unique hierarchy for the current
package for the dynamic scope of BODY.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "IN-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Sets the *CURRENT-HIERARCHY* to specified hierarchy, or the default
  one when NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "IN-PACKAGE-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Sets the *CURRENT-HIERARCHY* to specified hierarchy, or the default
  one when NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "MAKE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "ARG-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-NDC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "NDC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NDCP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Execute forms in BODY with *NDC-CONTEXT* set to CONTEXT. The
context is printed by the %x pattern layout format")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SELF-LOG-CONFIG*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(:SANE :WARN :OWN :TWO-LINE :IMMEDIATE-FLUSH)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+SELF-META-LOGGER+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(LET ((LOG4CL-IMPL::LOGGER (LOG4CL-IMPL:MAKE-LOGGER '#:META)))
  (SETF (LOG4CL-IMPL:LOGGER-ADDITIVITY LOG4CL-IMPL::LOGGER) NIL)
  LOG4CL-IMPL::LOGGER)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+SELF-LOGGER+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "(LET ((LOG4CL-IMPL::LOGGER
       (LOG4CL-IMPL::%LOGGER-PARENT LOG4CL-IMPL:+SELF-META-LOGGER+)))
  (SETF (LOG4CL-IMPL:LOGGER-ADDITIVITY LOG4CL-IMPL::LOGGER) NIL)
  LOG4CL-IMPL::LOGGER)")
    (:TYPE :CLASS :SYMBOL
     (:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION "Abstract layout class" :SLOT-LIST
     NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "LAYOUT-TO-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Prints the log message to the specified stream. log message can is
specified indirectly by LOG-FUNC argument, which is a callable object
that accepts a stream and writes log message to it")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION "Abstract layout has no properties")
    (:TYPE :CLASS :SYMBOL
     (:NAME "SIMPLE-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)) :DOCUMENTATION
     "Simple layout outputs log level and user message separated by
dash. For example: INFO - user log message"
     :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Print the log LEVEL's name to the STREAM")
    (:TYPE :METHOD :SYMBOL
     (:NAME "LAYOUT-TO-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "SIMPLE-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Format the log message with the simple layout")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)) :DOCUMENTATION
     "Pattern layout uses a configurable conversion pattern to format log
messages. For example, the following patterns produce these log
messages:

\"%-5p [%c] - %m%n\" produces the message

 INFO [CATEGORY.SUBCATEGORY.NAME] - message text

and \"%-5p [%c{2}{:invert}{--}] - %m%n\" produces the message:

 INFO [subcategory--name] - message text

Syntax of conversion pattern is: %[<FLAGS>]<PATTERN-CHAR>[{<EXTRA-ARG>}...]

FLAGS are consists of:
  [:][;<PREFIX>;][;<SUFFIX>;][-]<MIN>.<MAX>

If a string resulting from the pattern expansion is longer then MAX
its truncated by omitting characters from the start. Then if its
shorter then MIN its padded with spaces to the right or left (when
preceded by a minus)

If PREFIX and/or SUFFIX is specified, then string is wrapped with them
and all padding for justification, is done before the prefix and after
the suffix. The length of prefix and suffix are not included into
MIN/MAX or/padding calculations.

Example: %-7;<;;>;p with p expanding to INFO, will produce the string
\" <INFO>\"

If : flag is specified, and string is empty, then no output is made, including
not outputting any prefix or suffix.

Performance considerations: All formatting is done without consing,
except for the case of %m (user message) format, when it has MIN or
MAX field width flags. That is because user message is passed around
as a lambda that writes to the stream, and in order for its length to
be known, (with-output-to-string) is used.

Following pattern characters are recognized:

--------------------------------------------------------------------
   %p Log level string, for example DEBUG, INFO, TRACE. 

   %P Log level string in lower case

   %c Full category name of the logger for example CL-USER:FOO:BAR.

   There can be up to three extra flags in curly braces. Extra flag
   can be a set of empty curly braces, in this case the effect is same
   as default value.

   First extra flag is PRECISION. When a single integer its a number
   of categories to display, parent categories will be omitted if
   logger is more then N levels deep.

   For example if logger category name is CL-USER:ONE:TWO:THREE then
   conversion pattern %c{2} will produce TWO:THREE

   When PRECISION is specified as {<FROM>,<COUNT>}, then it means
   categories starting at FROM (zero-based) and output <COUNT>
   categories. Negative or zero means until end of the categories.

   Example: Category printed for a logger named CL-USER:ONE:TWO:THREE

   Precision | Result
   ----------|----------------
   {1}       | THREE
   {2}       | TWO:THREE
   {0,1}     | CL-USER
   {5,1}     | 
   {1,1}     | ONE
   {1,2}     | ONE:TWO
   {1,0}     | ONE:TWO:THREE
   {1,100}   | ONE:TWO:THREE

   Second extra argument is SEPARATOR and will be a separator used
   between category names. If not present then the loggers native
   value will be used, which can be overwritten per package by
   NAMING-OPTION method

   Third extra argument if present, can be one of :UPCASE, :DOWNCASE or
   :INVERT and will result in printing of the category name in the
   corresponding manner, similar to using non-standard readtable-case

   For example when logger category is CL-USER.FOO.BAR outputting it
   with conversion pattern of %c{}{--}{:invert} will result print it
   as cl-user--foo--bar
--------------------------------------------------------------------
   %g - like to %c, but only portion of the categories that represent
   the package name
   
   %C - like to %c, but only portion of the categories that are not
   the package name.

   Example: assuming category separator setup for the package was a
   dot, and a (log:logger :one.two.three) was instantiated in package
   cl.dotted.package:

     %g                    => CL.DOTTED.PACKAGE
     %g{}{--}{:downcase}   => cl--dotted--package
     %C                    => ONE.TWO.THREE
     (%C{}{ }{:downcase})  => (one two three)

   %F namestring of a file where logger was instantiated, same as
      returned by LOGGER-FILE-NAMESTRING
--------------------------------------------------------------------
   %d The date/time of the log message in UTC, extra argument
      can be a date pattern. Default date pattern is
      %d{%Y-%m-%d %H:%M:%S}

      To facilitate testing there can be optional second extra
      argument, which could be decimal value that will be used as
      universal time instead calling (GET-UNIVERSAL-TIME)

      Lisp does not have portable facility to get week and month
      names, so date format is printed by PATTERN-LAYOUT-FORMAT-DATE
      generic function, default method of which uses hard-coded
      English week/month/weekday names.

      Valid date format values are same as C strftime function, with
      GNU extensions.

        %A -- Full weekday name
        %A -- Abbreviated weekday name
        %B -- Full month name
        %b -- Abbreviated month name
        %c -- Standard date and time string
        %d -- Day of month as a decimal(01-31)
        %H -- Hour(00-23)
        %I -- Hour(01-12)
        %m -- Month as decimal(01-12)
        %M -- Minute as decimal(00-59)
        %p -- AM or PM
        %P -- am or pm
        %S -- Second as decimal(00-59)
        %y -- Year in decimal without century(0-99)
        %Y -- Year including century as decimal
        %z -- Time zone offset from UTC in -hhmm or +hhmm format
        %% -- The percent sign
--------------------------------------------------------------------
   %D date-time in local time, extra arguments can contain a strftime pattern

   %h hostname of the system (implementation dependent, obtained once
   when pattern is parsed, and cached

   %t Current thread name

   %x Value of *ndc-context* variable from (with-ndc (context)) macro

   %i Process id of the lisp process, implementation dependent.

   %I Two spaces repeated *log-indent* times. Different padding string
   can be specified in an extra argument.

   %n Mandatory newline, issues (TERPRI) on the stream. %:n issues (TERPRI) if
   *PRINT-PRETTY* is NIL or (PPRINT-NEWLINE :MANDATORY) otherwise

   %& Optional newline, issues FRESH-LINE on the stream

   %m Actual user log message.

--------------------------------------------------------------------

   PRETTY-PRINTER CONTROL

   %< and %> the formatting inside is wrapped into
   PPRINT-LOGICAL-BLOCK. Whenever pretty printing is actually used
   depends on runtime value of *PRINT-PRETTY* at call site

   The opening pattern can have extra arguments, with following
   meaning:

     %<{pretty}[{<num>}]  - bind *PRINT-PRETTY* to T at runtime,if followed
                            by a number, set *print-right-margin* to it
     %<{nopretty}         - bind *PRINT-PRETTY* to NIL at runtime
     %<{package}          - bind *PACKAGE* to :KEYWORD package
     %<{nopackage}        - bind *PACKAGE* to original package

   Both pretty and package can be used together like this %<{pretty}{package} ... %>

   %_ conditional newline, issues (PPRINT-NEWLINE :linear)
   %:_ conditional newline, issues (PPRINT-NEWLINE :fill)

   %[<n>]N does (PPRINT-INDENT :block n). 
   %:[<n>]N does (PPRINT-INDENT :current n).

   %<n1>.<n2>N is similar to above but the second argument of
   PPRINT-INDENT is calculated as (+ n1 (* n2 *LOG-INDENT*)).

   For example with %5.2N the wrapped lines will be indented
   default %I amount, plus extra 5 spaces.
"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONVERSION-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%FORMATTER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*FORMATTERS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-PATTERN-FORMATTER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STOPCHAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Define a pattern formatter function, with the signature of

(LAMBDA (STREAM FMT-INFO LOGGER LOG-LEVEL LOG-FUNC))

Arguments:

STREAM    - stream to print stuff to
FMT-INFO  - instance of FORMAT-INFO
LOGGER    - the logger category that event came from
LOG-LEVEL - log level of the message
LOG-FUNC  - user log function that outputs actual log message

When STOPCHAR is specified, the pattern format will be parsed until
%<STOPCHAR> is encountered, and the formatting function that outputs
everything in between will be passed as the extra argument to the
formatter, making the signature

(LAMBDA (STREAM FMT-INFO LOGGER LOG-LEVEL LOG-FUNC WRAPPED-FORMATTER))

The WRAPPED-FORMATTER will be a function with the same signature as regular
non-wrapped formatter.

This second form allows writing formatters that establish the dynamic
context for the pattern inside, for example %< %> formatter that wraps
everything inside into PPRINT-LOGICAL-BLOCK is implemented this way.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "SLOTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONVERSION-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONVERSION-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "LAYOUT-TO-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Format the log statement with the pattern layout")
    (:TYPE :CLASS :SYMBOL
     (:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Represents data for a single conversion pattern" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONVERSION-CHAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-CONVERSION-CHAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MINLEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-MIN-LEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MAXLEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-MAX-LEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RIGHT-JUSTIFY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-RIGHT-JUSTIFY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PREFIX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-PREFIX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SUFFIX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-SUFFIX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "COLON-FLAG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-COLON-FLAG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "AT-FLAG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-AT-FLAG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PATTERN-CHAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PATTERN-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Should parse extra arguments after the end of the
conversion character in the PATTERN-STRING and return next parse
position. The START is the index of the first character in the
conversion pattern after the PATTERN-CHAR, ie in the string
%-5p{foobar} it will be at the opening curly brace.

Should return two values, new parse position and either FMT-INFO or
its subclass.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-LAYOUT-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "MESSAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS-IN-CURLY-BRACES" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "While next character at START is curly brace, collect anything
between it and a closing curly brace into a string.

For the set of empty curly braces, collects NIL.

Return a list, with first element being new parse position, and rest
being extra arguments collected

Example: For the string {one}{}{three} will return the list (14
\"one\" NIL \"three\")")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Write STRING to the STREAM, respecting flags in info")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CHARACTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Default method does not parse any extra arguments and returns INFO
unchanged")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-CATEGORY-FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Extra formatting flags for %c (log category) pattern"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PRECISION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-PRECISION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CASE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS
       ((:NAME "FORMAT-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-CATEGORY-PRECISION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KW=" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "WHAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-CATEGORY-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\c))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\C))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\g))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\G))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-DATE-FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Extra formatting flags for %d and %D patterns" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DATE-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-DATE-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "UNIVERSAL-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-UNIVERSAL-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+DEFAULT-LOCAL-DATE-FORMAT+" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"%Y-%m-%d %H:%M:%S\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-DATE-FORMAT-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\d))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\D))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "CATS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "NUM-CATS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIMPLE-FORMAT-CATOGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "END-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-SMALL-DYNAMIC-EXTENT-VECTOR" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "LEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "LEN-EXPR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "LIMIT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) 32))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-CATEGORIES-RANGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "END-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADJUSTED-LOGGER-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-PATTERN-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "IDX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) 0)
      (:NAME "STOPCHAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Par
ses the pattern format and returns a function with lambda-list
of (STREAM LOGGER LOG-LEVEL LOG-FUNC) that when called will output
the log message to the stream with the specified format.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "FORMAT-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UNIVERSAL-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Prints UNIVERSAL-TIME to the STREAM according to
strftime like PATTERN.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-LOG-DATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Helper function to print either %d or %D (date/time) pattern")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FORMAT-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-HOSTNAME-FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Extra formatting flags for %h pattern" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HOSTNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\h))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PROCESS-ID-FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Caches process-id" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PROCESS-ID" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\i))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-LOG-INDENT-FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Extra formatting flags for %I (log indent) pattern"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDENT-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\I))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-EVENT-PACKAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Try to find the package at log event site. Can return NIL if
package does not exist at runtime")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PATTERN-PRETTY-FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "FORMAT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Extra formatting flags for %<...%> (pretty print) format"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PRETTY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-PRETTY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MARGIN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-MARGIN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "FORMAT-PACKAGE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-EXTRA-ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FMT-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\<))
      (:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CLOSE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SAVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION "Abstract appender has no properties")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-APPENDER-DISABLED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-APPENDER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "COUNTING-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Appender that counts Count the number of times
APPENDER-DO-APPEND was called, and writes its output to null sink"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "COUNTING-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "COUNTING-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "TEMP-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "A mixing for STREAM-APPENDER that will remove the
appender if it encounters an error matching ERROR-TYPE"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ERROR-TYPE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TEMP-APPENDER-ERROR-TYPE" :PACKAGE-NAME "LOG4CL-IMPL"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "SERIALIZED-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Appender that serializes itself using a lock" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%LOCK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "SERIALIZED-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Appender that writes message to stream. Stream is
obtained on each output by calling APPENDER-STREAM function.

Properties:

IMMEDIATE-FLUSH

: When non-NIL will call FINISH-OUTPUT after every log message

FLUSH-INTERVAL

: When set, will only flush if previous flush was earlier than
FLUSH-INTERVAL seconds ago. In addition a background thread will be
used to flush all appenders with FLUSH-INTERVAL set. See
ADD-WATCH-TOKEN"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "IMMEDIATE-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FLUSH-INTERVAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%LAST-FLUSH-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%OUTPUT-SINCE-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION
     "Should return the stream to which appender will write log messages")
    (:TYPE :CLASS :SYMBOL
     (:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Appender that writes message to the stream in STREAM slot"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       ((:NAME "APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM-OWNER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "FIXED-STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
       :EXTERNALP NIL))
     :DOCUMENTATION "Appender that writes message to the stream in
STREAM slot."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       ((:NAME "APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "FIXED-STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "A stream appender that writes messages to
*TERMINAL-IO* stream, which must be a synonym stream"
     :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "THIS-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "FIXED-STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "TEMP-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION
     "An appender that captures the current value of *TERMINAL-IO*
stream, and continues logging to it, until it encounters a stream
error, at which point it will delete itself.

To capture the target output stream, any chain of SYNONYM-STREAM or
TWO-WAY-STREAM is followed recursively, until result is no longer
either synonym or two way stream"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "THIS-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "SLOT-NAMES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "TRICKY-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "THIS-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Captures the *TERMINAL-IO* stream just like the
THIS-CONSOLE-APPENDER does, but at runtime checks if current value of
*TERMINAL-IO* resolves to the same value and only writes the
message if its different.

When used together with CONSOLE-APPENDER, results that current REPL
thread logs to REPL, while other threads log both to their
*TERMINAL-IO* and REPL.

Auto-deletes itself when encounters stream error"
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "TRICKY-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-ADDED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION "Add appender to the watch tokens in the current hierarchy,
unless IMMEDAITE-FLUSH property is set.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-REMOVED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION
     "When appender refcount is zero, remove it from watch tokens")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WATCH-TOKEN-CHECK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-FLUSH-APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Flush the APPENDER's stream if needed, assumes that output had been
just made to an appender. Should be called with the appender lock
held")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Flush the non-immediate-flush appender unconditionally if there
been any output. TIME will be used to mark the time of the flush")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLUSH-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "GET-UNIVERSAL-TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T))))
     :DOCUMENTATION
     "Immediately flush the appender output if necessary, marking the
time of the flush with TIME")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLUSH-ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ALL-HIERARCHIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Flush any appenders that had output since being flushed")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAVE-ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ALL-HIERARCHIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Flush any appenders that had output since being flushed")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "SERIALIZED-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns current value of *GLOBAL-CONSOLE*, which is a synonym
stream for *TERMINAL-IO*")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Returns the appenders file name")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-NEXT-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Returns the appenders next backup file name")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "APPENDER-LAST-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Returns the appenders last backup file name")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-CLOSE-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
       :EXTERNALP NIL))
     :DOCUMENTATION "Appender that writes to a file and closes it when
its no longer attached to loggers"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM-OWNER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CLOSE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SAVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "FIXED-STREAM-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Appender that writes to a file with a fixed file
name"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "APPENDER-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "ROLLING-FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      T)
     :SUPER-CLASS-LIST
     ((:NAME "FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "File appender that periodically checks if it needs
to rollover the log file.

Properties:

ROLLOVER-CHECK-PERIOD

: An integer, when current time advances past the boundary evenly divisible by this
number a call to MAYBE-ROLL-FILE will be made to check if log file needs
to be rolled over"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%ROLLOVER-CHECK-PERIOD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%NEXT-ROLLOVER-TIME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "ROLLING-FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "ROLLING-FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
       :EXTERNALP T))
     :DOCUMENTATION "An appender that writes to the file named by
expanding a pattern.  The expansion is done by the same
converter as the %d conversion pattern of the PATTERN-LAYOUT, which is
a subset of patterns supported by strftime POSIX function.

Properties:

NAME-FORMAT
   : Expanded with date formatter to get the name of the current log file

BACKUP-NAME-FORMAT
   : Expanded with date formatter to get the name of the backup log file

UTC-P
   : Should be non-NIL if name and backup patterns expand the UTC time
   instead of local. Defaults to NIL.

MAYBE-ROLL-FILE method works as follows. It expands both name and
backup format (if present).

If either of them differs from their previous values, current log file
will be closed, and a new current log file will be opened.

The old log file will be renamed to %NEXT-BACKUP-NAME, which is a
value of the backup format expansion remembered when original log file
was opened.  The new value of the backup format expansion is
remembered in the %NEXT-BACKUP-NAME slot.

In below examples it is assumed that current log file was created an
2012-02-21, and the event being logged is the first one on the next
day.

  1) Example: NAME-FORMAT is \"test.log\" and backup is unset, will
     always log to the file named test.log

  2) Example: NAME-FORMAT is \"test.%Y%m%d.log\" and
     BACKUP-NAME-FORMAT is unset. Will log into the file
     test.20120221.log file, on the rollover it will be closed and
     test.20120222.file will be opened.

  3) Example: NAME-FORMAT is \"test.log\" and BACKUP-NAME-FORMAT is
     \"test.%Y%m%d.log\". Will log into the file test.log. On rollover
     test.log will be renamed to test.20120221.log, and new test.log
     will be created.

  4) Example: NAME-FORMAT is \"test.%Y%m%d\" and BACKUP-NAME-FORMAT is
     \"test.log.bak\". Will log into the file test.20120210.log and
     when the day changes, will rename it to test.log.bak (erasing old
     one if it exists)"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BACKUP-NAME-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%CURRENT-FILE-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "APPENDER-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%NEXT-BACKUP-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "APPENDER-NEXT-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL"
         :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%LAST-BACKUP-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "APPENDER-LAST-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL"
         :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-ALIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT-TIME-BOUNDARY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHECK-PERIOD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Given universal time TIME return next boundary evenly divisible by
CHECK-PERIOD seconds ")
    (:TYPE :METHOD :SYMBOL
     (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "ROLLING-FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP T))
      (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "LOG-FUNC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAYBE-ROLL-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Should rollover the log file file if needed")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-UNBOUND" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      ((:NAME "SLOT-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-APPENDER-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-NAME-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "UTC-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "LOG-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "BACKUP-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Should move or rename LOG-FILENAME into the
BACKUP-FILENAME. When this function is called, LOG-FILENAME is already
closed.

Implemented as generic function so its possible to write extensions
that compress the backup log files automatically, or append to
them. One possible extension could be having daily log file and a
weekly backup, that is appended to each day")
    (:TYPE :METHOD :SYMBOL
     (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOG-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "BACKUP-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "LOG-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "BACKUP-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "LOG-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "BACKUP-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "LOG-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "BACKUP-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAYBE-ROLL-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION
     "Expands FILENAME and BACKUP patterns, and if one of them changed,
switches to the new log file")
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-APPENDER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "A" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "TEMP-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "C" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESOLVE-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Dereference synonym streams")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WATCHER-THREAD-BINDINGS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :DOCUMENTATION "Extra bindings for watcher thread" :INITIAL-VALUE "NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "%WITHOUT-INTERRUPTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "%ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "%WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CALL-WITH-LOGGED-PROBLEMS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CONTEXT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "THUNK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOGGED-PROBLEMS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTEXT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START-HIERARCHY-WATCHER-THREAD" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HIERARCHY-WATCHER-DO-ONE-TOKEN" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HIER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HIERARCHY-WATCHER-ONCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Do one iteration of watcher loop.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STOP-HIERARCHY-WATCHER-THREAD" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-START-WATCHER-THREAD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAVE-HOOK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Flushes all existing appenders, and stops watcher thread")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXIT-HOOK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Flushes all existing appenders")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INIT-HOOK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Starts watcher thread if any existing appenders don't
have :immediate-flush option")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ALL-HIERARCHIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Return all existing appenders in all hierarchies")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START/STOP-WATCHER-HOOK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CMD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-CONFIG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Very DWIM oriented friendly way of configuring loggers and appenders.

    (LOG:CONFIG [LOGGER-IDENTIFIER] OPTION1 OPTION2...)

LOGGER-IDENTIFIER is optional and defaults to the root logger. It can be
one of the following:

- Logger instance ie result of (LOG:CATEGORY) expansion, or any other form
  that returns a logger.

- A list of logger categories, basically a shortcut for (LOG:CATEGORY
  '(CAT1 CAT2 CAT3)). An error will be given if logger does not exist. If you want
  to ensure logger is created, even if it did not exist before, use
  (LOG:CONFIG (LOG:CATEGORY ...) ...)

Without any options (LOG:CONFIG) displays current configuration

---------------|---------------------------------------------------------------
  Option       | Description
---------------|---------------------------------------------------------------
                               MAIN OPTIONS.
---------------|---------------------------------------------------------------
 :INFO         | Or any other keyword identifying a log level, which can be    
 :DEBUG        | shortened to its shortest unambiguous prefix, such as :D.
               | Changes the logger level to that level.
---------------|---------------------------------------------------------------
 :SANE         | Removes logger appenders, then arranges for the logging output
               | to be always logged to dynamic value of *TERMINAL-IO*
               |                                                               
               | If used with :DAILY then console appender is not added, unless
               | :CONSOLE, :THIS-CONSOLE or :TRICKY-CONSOLE is also specified.
               |
               | The pattern layout added is affected by many of the pattern
               | options below.
---------------|---------------------------------------------------------------
                           APPENDER OPTIONS
---------------|---------------------------------------------------------------
 :CONSOLE      | Adds CONSOLE-APPENDER to the logger. Console appender logs
               | into current console as indicated by *TERMINAL-IO* stream
---------------|---------------------------------------------------------------
 :THIS-CONSOLE | Adds THIS-CONSOLE-APPENDER to the logger. It captures the
  (or :THIS)   | current value of *TERMINAL-IO* by recursively resolving any
               | synonym or two-way streams, and continues to log the
               | remembered value, even if it goes out dynamic scope.
               |
               | On any stream errors it will auto-remove itself.
---------------|---------------------------------------------------------------
:TRICKY-CONSOLE| Adds TRICKY-CONSOLE-APPENDER which acts exactly like 
 (or :TRICKY)  | THIS-CONSOLE appender above, but it checks if dynamic value
               | of *TERMINAL-IO* resolves to the same stream and ignores the
               | log message if it does.
               |
               | When debugging multi-threaded code from REPL, this results in
               | REPL thread logging to REPL, while threads with some other
               | value of *TERMINAL-IO* stream will output to both.
               |
               | As a shortcut, if THIS-CONSOLE is specified and global console
               | appender already exists, it will add TRICKY-CONSOLE instead.
---------------|---------------------------------------------------------------
 :SANE2        | Shortcut for :SANE :TRICKY (mnemonic two -> multiple threads)
---------------|---------------------------------------------------------------
 :STREAM stream| Changes the stream used for above two dedicated stream
               | appenders.
---------------|---------------------------------------------------------------
 :DAILY FILE   | Adds file appender logging to the named file, which will be
               | re-opened every day, with old log file renamed to FILE.%Y%m%d.
               |
               | Removes any other file based appenders from the logger.
               |
               | FILE can also contain %Y%m%d like pattern, expansion of which
               | will determine when new log file would be opened.
---------------|---------------------------------------------------------------
 :FILTER level | Makes all appenders added by above keywords drop messages
               | below specified level.
---------------|---------------------------------------------------------------

                            LAYOUT OPTIONS

  General note about layout options, if any appender options are specified
  the layout options only affect PATTERN-LAYOUT for new appenders created
  by LOG:CONFIG command

  But if no appender options are specified, but layout options are, LOG:CONFIG
  will change the pattern layout on all console based appenders that output
  current *TERMINAL-IO*
---------------|---------------------------------------------------------------
 :PATTERN      | For any new appenders added, specifies the conversion pattern
               | for the PATTERN-LAYOUT. If not given, default pattern will be
               | used, modified by below options
---------------|---------------------------------------------------------------
 :PRETTY       | Add {pretty} option to the pattern to force pretty printing
 :NOPRETTY     | Add {nopretty} option to the pattern to force no pretty printing
               | without one of these, global value is in effect
---------------|---------------------------------------------------------------
 :TIME/:NOTIME | Include time into default pattern, default is :TIME
---------------|---------------------------------------------------------------
 :FILE or      | Include file name into default pattern, :FILE2 uses alternate
 :FILE2        | position for the file (in front of the package).
 :NOFILE       | :NOFILE does not show the file
---------------|---------------------------------------------------------------
 :THREAD       | Include thread name into default pattern, it will be after the
  [<n>[<n2>]]  | time, in [%t] format. If :THERAD argument is followed by one
               | or two numbers, they will be used as min/max field width.
---------------|---------------------------------------------------------------
 :NDC          | Include NDC context into default pattern, with optional min/max
  [<n>[<n2>]]  | field width flags. When used together with :THREAD NDC will be
               | printed after the thread name, separated by dash, like this
               | example: \"[threadname-ndc]\"; it will not be shown if unbound
               |
               | Without :THREAD, its shown in its own square brackets, with
               | entire construct not shown if unbound.
---------------|---------------------------------------------------------------
 :NOPACKAGE    | Add {nopackage} option to the pattern (binds orig package at
 :PACKAGE      | the site of the log statement. PACKAGE binds keyword package,
               | so everything is printed with package prefix
---------------|---------------------------------------------------------------
  :TWOLINE     | Changes pattern layout to print hard newline before actual log
 (or :2LINE)   | message. Only makes sense with NOPRETTY or when logging into
               | files.
               | 
               | Pretty printing does better job at line splitting then forced
               | two line layout, with short log statements placed on a single
               | line and longer ones wrapping.
---------------|---------------------------------------------------------------
                   ASSORTED OTHER OPTIONS
---------------|---------------------------------------------------------------
 :PROPERTIES   | Configure with PROPERTY-CONFIGURATOR by parsing specified     
 FILE          | properties file                                               
---------------|---------------------------------------------------------------
 :WATCH        | Used with :PROPERTIES, uses watcher thread to check           
               | properties file modification time, and reloads if it changes  
---------------|---------------------------------------------------------------
 :IMMEDIATE-   | Used with :SANE, :DAILY or :CONSOLE to create new appenders
  FLUSH        | with :IMMEDIATE-FLUSH T option, which prevents automatic
               | startup of hierarchy watcher thread, which is used for
               | auto-flushing. 
---------------|---------------------------------------------------------------
 :NOADDITIVE   | Makes logger non-additive (does not propagate to parent)
 :OWN          | Shortcut for non-additive (usually has appenders on its own)
 :ADDITIVE     | Sets additive flag back to T.
---------------|---------------------------------------------------------------
 :CLEAR        | Reset the child in the hierarchy, by unsetting their log level
               | and/or removing appenders from them. Without any other flags
               | unset the log levels.
               |
 :LEVELS       | Clears the log levels, this is the default
 :APPENDERS    | Removes any appenders, levels will not be cleared unless
               | :LEVELS is also specified
               |
 :ALL          | Normally :CLEAR does not touch non-additive loggers, that is
               | the ones that don't pass messages to parents. This flag forces
               | clearing of non-additive loggers 
               |
               | Note that this option does not change the logger being acted
               | upon, just its children. See next option
---------------|---------------------------------------------------------------
 :REMOVE <num> | Removes specific appender from the logger. Numbers are 1-based,
               | and are same ones displayed by LOG:CONFIG without arguments
---------------|---------------------------------------------------------------
 :SELF         | Configures the LOG4CL logger, which can be used to debug
               | Log4CL itself. Normally all other LOG:CONFIG hides the
               | it from view.
---------------|---------------------------------------------------------------
 :FORCE-ADD    | Normally if you specify :CONSOLE :THIS-CONSOLE or
               | :TRICKY-CONSOLE without :SANE (which clears out existing
               | appenders), an error will be given if there are any standard
               | console appenders that already log to *TERMINAL-IO* or :STREAM
               | argument.
               |
               | This is to prevent from creating duplicate output.
               |
               | Adding :FORCE-ADD flag skips the above check, and allows you
               | to add new console appender regardless.
---------------|---------------------------------------------------------------
 :BACKUP       | Used together with :DAILY, specifies the :BACKUP-NAME-FORMAT,
               | see docstring for the DAILY-FILE-APPENDER class.
               |
               | For example specifying a DAILY <file> :BACKUP NIL will always
               | log to statically named FILE without rolling.
               | 
               | Defaults to NIL if FILE contains percent character or
               | FILE.%Y%m%d otherwise.
---------------|---------------------------------------------------------------

Examples:

* (LOG:CONFIG :D) -- Changes root logger level to debug

* (LOG:CONFIG :SANE) -- Drops all console appenders, change level
  to INFO, makes all output appear on current console

* (LOG:CONFIG :SANE2) -- As above, but copy all other threads output
  to current terminal.

* (LOG:CONFIG :PRETTY :THREAD) - changes active console appenders
  layout to force pretty printing and add thread info.

* (LOG:CONFIG :NOPRETTY :PACKAGE) - changes layout to force no
  pretty printing, and restoring original *PACKAGE* when printing
  
* (LOG:CONFIG :WARN :CLEAR) -- Changes root logger level to warnings,
  and unset child logger levels.

* (LOG:CONFIG '(PACKAGE) :OWN :DEBUG :DAILY \"package-log.%Y%m%d\")

  Configures the logger PACKAGE with debug log level, logging into
  the file \"package-log.20130510\" which will be rolled over daily;
  makes logger non-additive so messages will not be propagated to
  logger parents. (To see them on console, remove the :OWN flag, or
  add :CONSOLE to the command)

  Note: in above example if package name is dotted, you need to
  specify the split category list, so if your package name is
  COM.EXAMPLE.FOO logger categories will be '(COM EXAMPLE FOO)
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Delete all loggers configuration, leaving only LOG4CL-IMPL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Clear the logging configuration in the current hierarchy, and
configure root logger with INFO log level and a simple console
appender")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-PATTERNS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "'((:ONELINE T :TIME T :FILE T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %g{}{}{:downcase}%:; ;F (%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:ONELINE T :TIME T :FILE2 T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %:;;; / ;F%g{}{}{:downcase}::(%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:ONELINE T :TIME NIL :FILE T :PATTERN
   \"%&%<%I%;<;;>;-5p%t %g{}{}{:downcase}%:; ;F (%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:ONELINE T :TIME NIL :FILE2 T :PATTERN
   \"%&%<%I%;<;;>;-5p%t %:;;; / ;F%g{}{}{:downcase}::(%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:ONELINE T :TIME T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %g{}{}{:downcase} (%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:ONELINE T :TIME NIL :PATTERN
   \"%&%<%I%;<;;>;-5p%t %g{}{}{:downcase} (%C{}{ }{:downcase})%2.2N - %:_%m%>%n\")
  (:TWOLINE T :TIME T :FILE T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %g{}{}{:downcase}%:; ;F (%C{}{ }{:downcase})%2.2N%:n* %m%>%n\")
  (:TWOLINE T :TIME T :FILE2 T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %:;;; / ;F%g{}{}{:downcase}::(%C{}{ }{:downcase})%2.2N%:n* %m%>%n\")
  (:TWOLINE T :TIME NIL :FILE T :PATTERN
   \"%&%<%I%;<;;>;-5p%t %g{}{}{:downcase}%:; ;F (%C{}{ }{:downcase})%2.2N%:n* %m%>%n\")
  (:TWOLINE T :TIME NIL :FILE2 T :PATTERN
   \"%&%<%I%;<;;>;-5p%t %:;;; / ;F%g{}{}{:downcase}::(%C{}{ }{:downcase})%2.2N%:n* %m%>%n\")
  (:TWOLINE T :TIME T :PATTERN
   \"%&%<%I%;<;;>;-5p [%D{%H:%M:%S}]%t %g{}{}{:downcase} (%C{}{ }{:downcase})%2.2N%:n* %m%>%n\")
  (:TWOLINE T :TIME NIL :PATTERN
   \"%&%<%I%;<;;>;-5p%t %g{}{}{:downcase} (%C{}{ }{:downcase})%2.2N%:n* %m%>%n\"))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REPLACE-IN-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIGURE-OUT-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPENDER-EXTRA-PRINT-PROPERTIES" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "A" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a list of (PROPNAME VALUE) extra display properties to print when
displaying an appender. Some of the properties are included only
conditionally, such as last error or error count")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SHOW-LOGGER-SETTINGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Print logger settings and its children to *STANDARD-OUTPUT*

Example output:

+ROOT, WARN
 |
 +-#<CONSOLE-APPENDER>
 |     with #<PATTERN-LAYOUT>
 |              :pattern [%P] %c %m%n
 |     :immediate-flush: nil
 |     :flush-interval: 1
 +-LOG4CL
   |
   +-SELF (non-additive), DEBUG
   | |  :config (:SANE, :OWN :TWOLINE :D)
   | |
   | +-#<CONSOLE-APPENDER 0x123123>,
   | |     with #<PATTERN-LAYOUT>
   | |              :pattern [%P] %c %m%n
   | |     :immediate-flush: nil
   | |     :flush-interval: 1
   | +-#<DAILY-ROLLING-APPENDER 0x12345>
   |       with #<SIMPLE-LAYOUT 1234>
   |       :immediate-flush NIL
   |       :flush-interval: 1
   | 
   +-OTHER, DEBUG
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERFORM-DEFAULT-INIT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERFORM-DEFAULT-INIT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CONFIGURATION-ELEMENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION "Holds logger and its log level"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "LOGGER-OF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "LEVEL-OF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Used to remember log levels for a set of loggers" :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "NAME-OF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ELEMENTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ELEMENTS-OF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMEMBER-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*ROOT-LOGGER*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
     :DOCUMENTATION
     "Utility method to make a list of logging configuration starting from LOGGER. 
Returns a list of CONFIGURATION-ELEMENT objects")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOGGER-CONFIGURATION-LOAD-FORM" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Different version of loggers load-form, that does not
remember the file name. This allows saved logging configuration
to be restored, even if loggers had moved to a different file,
without overwriting their file with its value when configuration
was saved.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ELEM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "CONFIGURATION-ELEMENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CNF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CONFIGURATIONS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "List of all LOGGER-CONFIGURATION objects" :INITIAL-VALUE
     "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MAX-CONFIGURATIONS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION "Maximum number of configurations in *CONFIGURATIONS* list"
     :INITIAL-VALUE "30")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SAVE-CONFIGURATIONS-TO-FILE*" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP T)
     :DOCUMENTATION "When non-NIL SAVE will also write configurations to a
*CONFIGURATIONS-FILE*"
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CONFIGURATIONS-FILE*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :DOCUMENTATION
     "The file where configurations will be saved. Is merged with result
of USER-HOMEDIR-PATHNAME"
     :INITIAL-VALUE "\".log4cl-configurations.lisp-expr\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAME-CONFIGURATION-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "C1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "C2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compare two logging configurations and return T if they have
exactly same loggers and levels")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAVE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Save current logging configuration into configuration list.

NAME -- specifies the name of this logging configuration, if NAME is not
specified, one is automatically provided as \"Saved on <timestamp>\".

If its equivalent to some other configuration, save it only if it had
a different name, otherwise lift the older equivalent configuration to
the top of the list.

When *SAVE-CONFIGURATIONS-TO-FILE* is T (default) the configuration
list list will also be saved to a file
\".log4cl-configurations.lisp-expr\" in user home directory. File name
can be customized by changing *CONFIGURATIONS-FILE* variable")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CNF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Restores logging configuration")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-AUTOSAVE-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-RESTORE-CONFIGURATIONS" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "If configurations list empty and *CONFIGURATIONS-FILE* exists in
home directory restore configuration list from it")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESTORE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "FROM-END" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Restore logging configuration CONFIGURATION, which can be a name,
a CONFIGURATION instance, or a number indicating Nth (zero
based) configuration in the *CONFIGURATIONS* list. NIL is treated as
zero.

When searching for the 



Before restoring the configuration, the current logging configuration
is automatically saved under the name \"Autosave <timestamp>\", unless
an equivalent configuration is already in the list

If CONFIGURATION is NIL restores first element of *CONFIGURATIONS* that is
not equivalent to the current configuration. So successive (RESTORE) will
swap last two configurations")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIM-CONFIGURATION-LIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VAR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*CONFIGURATIONS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
         NIL))))
     :DOCUMENTATION "Trim the list in global variable VAR to at most
*MAX-CONFIGURATIONS* elements")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AUTO-NAMED-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CNF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Test if logging configuration name was auto-generated")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAVE-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CNF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "HAD-NAME-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Save CNF logging configuration into *CONFIGURATIONS* list. If its equivalent
to some other configuration, save it only if it had a different name, otherwise
lift the older equivalent configuration to the top of the list")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAVE-CONFIGURATIONS-TO-FILE" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*CONFIGURATIONS-FILE*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-CONFIGURATIONS-FROM-FILE" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "*CONFIGURATIONS-FILE*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALL-CONFIGURATIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Returns the *CONFIGURATIONS* list")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIST-CONFIGURATIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*STANDARD-OUTPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Prints the *CONFIGURATIONS* list")
    (:TYPE :MACRO :SYMBOL
     (:NAME "PACKAGE-OPTIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&WHOLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "SHORTEST-NICKNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "EXPR-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Set custom options for expansion of logging macros in a specified
package. 

  PACKAGE - the package options are being set for, defaults to
  *PACKAGE*. No references to the package itself will be retained,
  instead options are keyed by package name string


  CATEGORY-CASE - Determining how logger naming converts symbols to in
  the category name.

    Valid values are: 
    - NIL        :  As printed by PRINC (ie affected by active *READTABLE*)
    - :UPCASE    :  Convert to upper case
    - :DOWNCASE  :  Convert to lower case
    - :INVERT    :  Invert in the same way inverted READTABLE-CASE does it
    - :PRESERVE  :  Do not change

  Note that pattern layout offers similar facility that changes how
  logger category is printed on the output side


  SHORTEST-NICKNAME  - When T (default), the shortest of package name or
  any of its nicknames will be used as logger category, otherwise official
  package name will be used.

  CATEGORY-SEPARATOR - String that separates logging categories, defaults to dot.

  EXPR-PRINT-FORMAT - The FORMAT control string, for two arguments
  used to print expressions, first argument is quoted expression form,
  and second argument is value. Default is \"~W=~W~^ ~:_\". If
  format string contains ~:> directive (terminate pretty printing block),
  then corresponding format argument will be a (NAME VALUE) list

  EXPR-LOG-LEVEL - the log level for the (LOG:EXPR) macro. Default
  is :DEBUG.

  OLD-LOGGING-MACROS - If set, log statement without constant format
  string such as (LOG:DEBUG a b c d) will be interpreted as logging to
  logger stored in variable A with format string B and more format
  arguments, instead of treating them as (LOG:EXPR a b c d)
  ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%SET-PACKAGE-OPTIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*PACKAGE*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "CATEGORY-CASEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      (:NAME "EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
      ((:NAME "SHORTEST-NICKNAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SHORTEST-NICKNAMEP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "EXPR-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      ((:NAME "OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "OLD-LOGGING-MACROSP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Processes the naming configuration options")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Class for reading Java style property files." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME-TOKEN-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME-TOKEN-READ-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%ORIG-INITARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "%PARSE-LINE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Current line being parsed" :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "%PARSE-LINE-NUM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :DOCUMENTATION "Current line number in the input stream" :INITIAL-VALUE
     "NIL")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PROPERTY-LOCATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Remembered line and line number in the input
stream where object appeared, so we can signal errors with that
info"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LINE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LINE-NUM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-PROPERTY-LOCATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "LOCATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Run BODY with %PARSE-LINE and %PARSE-LINE-NUM bound to the
remembered location, so that any errors signaled will have correct
location")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "SLOTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-PROPERTY-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Read stream and for each line that is not a
comment, call PARSE-LINE function.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-PROPERTY-LINE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Called for each NAME=VALUE line in the properties
  stream. Both NAME and VALUE are strings")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-PROPERTY-TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Called by default PARSE-PROPERTY-LINE
method. TOKENS will be the NAME part of the NAME=VALUE line, split
according to NAME-TOKEN-SEPARATOR and their case adjusted by
NAME-TOKEN-READ-CASE")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MORE-TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Called to handle properties that start with a
common prefix.  KEYWORD will be the 1st token of the property name,
interned as a keyword. MORE-TOKENS are the rest of the name tokens as strings

For example for a the properties stream line:
    \"log4cl:foo:bar=baz\"
this function will be called with the arguments
     (:LOG4CL '(\"FOO\" \"BAR\") \"BAZ\"value)
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-READ-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CASE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Convert STRING according to CASE")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-LINE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Handles two special cases of SEPARATOR=VALUE and
READ-CASE=VALUE (ignoring case differences), and updates the parser
accordingly, otherwise splits NAME with current separator, converts
tokens according to read case, and forwards to PARSE-PROPERTY-TOKENS")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Interns the first element of TOKENS as a keyword, and forwards to
  PARSE-PROPERTY-KEYWORD")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Wrap errors with line number")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T))
     :DOCUMENTATION "Class that holds configurator state while parsing
  the properties file"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CONFIG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "SLOTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "LOGGER-RECORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PROPERTY-LOCATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "APPENDER-NAMES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "DELAYED-INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PROPERTY-LOCATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PROPERTIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXTRA-INITARGS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "DELAYED-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "DELAYED-INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "DELAYED-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "DELAYED-INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "USED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Ignores anything that does not start with LOG4CL prefix, otherwise
calls PARSE-PROPERTY-TOKENS again (which will convert 2nd level of the
token name into the keyword and call this function again")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-LOGGER-HELPER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Common helper that handles both .rootLogger= and .logger.name=
  lines")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ROOTLOGGER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LOGGER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERN-BOOLEAN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION "Parse boolean value")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ADDITIVITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERN-CLASS-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-DELAYED-INSTANCE-CLASS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-DELAYED-INSTANCE-PROPERTY" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-KEYWORD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "APPENDER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "TOKENS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-DELAYED-INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "First filter all properties through through INSTANCE-PROPERTY-FROM-STRING,
and then create the instance")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-PROPERTY-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Parse the stream and apply changes to logging configuration")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROPERTY-INITARG-FROM-STRING" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "PROPERTY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Generic implementation for numbers, boolean and string properties,
that calls PROPERTY-ALIST function to determine what kind of
property it is. Signals error if property is not in the list")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONFIGURE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "SOURCE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Configure the logging system from specified source")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONFIGURE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      ((:NAME "S" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Configures logging from the specified stream")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PROPERTY-CONFIGURATOR-FILE-WATCH" :PACKAGE-NAME "LOG4CL-IMPL"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILESPEC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "FILESPEC-OF" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WATCH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR-FILE-WATCH" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONFIGURE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
        T))
      (:NAME "FILESPEC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "AUTO-RELOAD" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Configures logging from the specified file. If AUTO-RELOAD is
non-NIL, then after initial configuration will watch the file for
modifications and re-configure when it changes. Note that auto-reload
will not be configured if initial configuration signaled a error")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WATCH-TOKEN-CHECK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
       (:NAME "PROPERTY-CONFIGURATOR-FILE-WATCH" :PACKAGE-NAME "LOG4CL-IMPL"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Checks properties file write time, and re-configure from it if it changed.
Catches and does not re-signal PROPERTY-PARSER-ERROR, so watching the
file continues if newly modified file had an error")
    (:TYPE :MACRO :SYMBOL
     (:NAME "FORWARD-MACRO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "FROM-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DEPRECIATE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "REPLACEMENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "FORWARD-FUNCTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
      (:NAME "FROM-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "FORWARD-LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "FORWARD-SEXP-LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LEVELS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "EFFECTIVE-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-ADDED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+SELF-META-LOGGER+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG4CL-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-DESCENDANTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-DO-FLUSH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU6" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU7" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*MAX-CONFIGURATIONS*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CONFIGURE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*ROOT-LOGGER*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU3" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU4" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-TRACE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CLEAR-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "+LOG-LEVEL-DEBU8+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-FATAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-NEXT-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "MAP-LOGGER-DESCENDANTS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "FIX-METHOD-SPEC-LIST" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-PARENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LAST-BACKUP-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "EXPR-PRINT-FORMAT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ADD-WATCH-TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-LEVEL-FROM-OBJECT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "MAKE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-ERROR+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+EXPR-FORMAT-SIMPLE+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU1" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*LOG-INDENT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-REMOVED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "OLD-LOGGING-MACROS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LIST-CONFIGURATIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WITH-PACKAGE-NAMING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "+EXPR-FORMAT-FANCY+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PACKGE-OPTIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-IGNORED-ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "RESOLVE-LOGGER-FORM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "DEFAULT-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WATCH-TOKEN-CHECK" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "START-HIERARCHY-WATCHER-THREAD" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "FLUSH-ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "RESOLVE-DEFAULT-LOGGING-FORM" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "COUNTING-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU8" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "BACKUP-LOG-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*DEFAULT-NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU2+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CLOSE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WITH-LOG-INDENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "%GET-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU6+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU7" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PATTERN-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU3" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-CHILDREN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "REMOVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SIMPLE-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU9" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-WITH-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBUG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-ERROR-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU7+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-TRACE+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*NAMING-CONFIGURATION*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CONVERSION-PATTERN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-INDENTED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU5+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "REMOVE-ALL-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU8" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "INHERITED-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU6" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-WARN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU9+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LAST-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "MAP-LOGGER-CHILDREN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "REMOVE-WATCH-TOKEN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-INFO+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LOGGERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PACKAGE-WRAPPER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CATEGORY-CASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "MAKE-PACKAGE-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WITH-NDC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-DO-APPEND" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*LOGGER-TRUENAME*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "TEMP-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+MIN-LOG-LEVEL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-WARN+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PROPERTY-CONFIGURATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "HIERARCHY-INDEX" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CATEGORY-SEPARATOR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PROPERTY-PARSER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-FATAL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU1+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-MESSAGE-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-APPENDERS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-DEPTH" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-TRACE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-CATEGORY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LAST-IGNORED-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "LOG-SEXP-FATAL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-OFF+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "MAYBE-ROLL-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SET-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CONFIGURATION-ELEMENT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WITH-PACKAGE-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "LOG-SEXP-DEBU4" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "TIME-ROLLING-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "LOG-SEXP-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-FILE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "THIS-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SAVE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "FIXED-STREAM-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ADD-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "MAKE-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-LEVEL-TO-STRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "RESTORE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "JOIN-CATEGORIES" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SERIALIZED-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-FILE-NAMESTRING" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SAME-CONFIGURATION-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*GLOBAL-CONSOLE*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PROPERTY-PARSER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WITH-NDC-CONTEXT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ALL-CONFIGURATIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-WARN" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PATTERN-LAYOUT-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-ADDED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-CONFIG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU4+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "HANDLE-APPENDER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "STOP-HIERARCHY-WATCHER-THREAD" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "*DEFAULT-LOGGER-NAME*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU5" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "EFFECTIVE-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBUG" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "TRICKY-CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-ANCESTORS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-ADDITIVITY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "IN-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LAYOUT-TO-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*CONFIGURATIONS-FILE*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*SAVE-CONFIGURATIONS-TO-FILE*" :PACKAGE-NAME "LOG4CL-IMPL"
     :EXTERNALP T)
    (:NAME "LAYOUT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ENCLOSING-SCOPE-BLOCK-NAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "*HIERARCHY*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "FLUSH-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "DAILY-FILE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "*NDC-CONTEXT*" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "SAVE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-LOG-LEVEL" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU9" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "TEMP-APPENDER-ERROR-TYPE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-REMOVED" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBUG+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "RESET-LOGGING-CONFIGURATION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "WITH-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+SELF-LOGGER+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "CONSOLE-APPENDER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-DEBU5" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-FILENAME" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "PARSE-PROPERTY-STREAM" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOGGER-FILE-LOGGER" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-DEBU3+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "ROLLING-FILE-APPENDER-BASE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP
     T)
    (:NAME "+MAX-LOG-LEVEL+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-INFO" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-ERROR" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "IN-PACKAGE-LOG-HIERARCHY" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "NAMING-OPTION" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "LOG-SEXP-DEBU2" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-ENABLED-P" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "+LOG-LEVEL-UNSET+" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "APPENDER-LOGGER-COUNT" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "LOG" :FULL-NAME "LOG" :DOCUMENTATION NIL :SYMBOL-LIST
   NIL :EXTERNAL-SYMBOLS
   ((:NAME "WITH-INDENT" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D7" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D5" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU5" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "FATAL" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU2" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "IN-PACKAGE-HIERARCHY" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "MAKE" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "F" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "CONFIG" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU7" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D1" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "INFO" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU1" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBUG" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "IN-HIERARCHY" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-ERROR" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D4" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "WITH-HIERARCHY" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU3" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "ERROR" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "E" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "WITH-NDC" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "WARN" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D6" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "T" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "WITH-PACKAGE-HIERARCHY" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU6" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D2" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-INFO" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU2" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D3" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU8" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "TRACE" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU8" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "EXPR" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "POP" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "I" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "W" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU9" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU4" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-FATAL" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-WARN" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU4" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU3" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBU5" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU1" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "C" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "CATEGORY" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D9" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU6" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "RESTORE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "S" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "PUSH" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SEXP-DEBUG" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "PACKAGE-OPTIONS" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP NIL)
    (:NAME "SEXP-TRACE" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "D8" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "DEBU9" :PACKAGE-NAME "LOG" :EXTERNALP T)
    (:NAME "SAVE" :PACKAGE-NAME "LOG4CL-IMPL" :EXTERNALP T)
    (:NAME "DEBU7" :PACKAGE-NAME "LOG" :EXTERNALP T)))))
