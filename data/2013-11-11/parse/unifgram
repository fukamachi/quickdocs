
(:TYPE :SYSTEM :NAME "unifgram" :AUTHOR NIL :MAINTAINER NIL :VERSION NIL
 :LICENCE NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON ("PAIPROLOG")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "UNIFGRAM" :FULL-NAME "UNIFGRAM" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL (:NAME "RULE" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HEAD" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ARROW" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "-" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION
     "Expand one of several types of logic rules into pure Prolog.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-WITH" :PACKAGE-NAME "PAIPROLOG.AUXFNS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "X" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Is this a list whose first element is x?")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DCG-NORMAL-GOAL-P" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DCG-WORD-LIST-P" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DCG" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "HEAD" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "OP" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "<-" :PACKAGE-NAME "PAIPROLOG" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DCG!" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "HEAD" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DCG-BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Make the body of a Definite Clause Grammar (DCG) clause.
  Add ?string-in and -out variables to each constituent.
  Goals like (:test goal) are ordinary Prolog goals,
  and goals like (:word hello) are literal words to be parsed.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-AUGMENTED-DCG" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HEAD" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Build an augmented DCG rule that handles :sem, :ex,
  and automatic conjunctiontive constituents.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COLLECT-SEMS" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BODY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "?SEM" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Get the semantics out of each constituent in body,
  and combine them together into ?sem.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AND*/2" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "IN" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "OUT" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "CONT" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "IN is a list of conjuncts that are conjoined into OUT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONJUNCTS" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "EXP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Get all the conjuncts from an expression.")
    (:TYPE :MACRO :SYMBOL (:NAME "EX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CATEGORY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :NAME "ARGS"
       :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Add some example phrases, indexed under the category.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*EXAMPLES*" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQ)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CATEGORY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CATEGORY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      (:NAME "EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Add these example strings to this category,
  and when it comes time to run them, use the args.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RUN-EXAMPLES" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CATEGORY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Run all the example phrases stored under a category.
  With no category, run ALL the examples.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-PUNCTUATION" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Replace punctuation with spaces in string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING->LIST" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Convert a string to a list of words.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PUNCTUATION-P" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "CONJ-RULE" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "CONJ-CAT" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
       (:NAME "SEM1" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
       (:NAME "COMBINED-SEM" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
      (:NAME "==>" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
      (:NAME "CONJ" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
      ((:NAME "CAT" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :NAME "ARGS"
       :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION "Define this category as an automatic conjunction.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HANDLE-CONJ" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "HEAD" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)) :DOCUMENTATION
     "Replace (Cat ...) with (Cat_ ...) if Cat is declared
  as a conjunctive category.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONJ-CATEGORY" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PREDICATE" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP NIL))
     :DOCUMENTATION
     "If this is a conjunctive predicate, return the Cat_ symbol."))
   :EXTERNAL-SYMBOLS
   ((:NAME "RULE" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
    (:NAME "ADD*" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
    (:NAME "==>" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
    (:NAME "-->" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)
    (:NAME "--->" :PACKAGE-NAME "UNIFGRAM" :EXTERNALP T)))))
