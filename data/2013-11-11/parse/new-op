
(:TYPE :SYSTEM :NAME "new-op" :AUTHOR NIL :MAINTAINER NIL :VERSION NIL :LICENCE
 NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :FULL-NAME
   "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :GENERIC :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "Generic 'construction' function.

The NEW generic function is a single entry point for MAKE-INSTANCE,
DEFSTRUCT and other constructors, e.g., for HASH-TABLEs and ARRAYs.

Methods for NEW can be defined specialized for new classes.
Structure classes need to register their constuctor; see
REGISTER-STRUCTURE-CONSTRUCTOR.  Compound type specifiers must be
specialized by defining methods for TYPE-CONS.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "NEWQ" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "The NEWQ macro is a convenience syntactic shortcut to the NEW function.

The macro expands into a call to NEW without evaluating the first argument.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TYPE-NAME" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "The TYPE-CONS Generic Function.

TYPE-CONS is the entry point to specialize in order to handle compound
type specifiers.  The only assumption is that a compound type
specifier is a list with a symbol as first element, as described in
Section 4.2.3 'Type Specifiers' of the ANSI CL Specification.

Each method dispatches on the TYPE-NAME, which is a symbol.  SPEC is
the CDR of the full type specifier and ARGUMENTS is the list of
arguments passed to NEW.

TYPE-CONS is meant to be spcialized but not called directly.

Example.

Suppose you have

   (deftype matrix (n m &optional (base-type 'double-float))
      `(array ,base-type (,n ,m)))

You may want to define something along these lines.

   (defmethod type-cons ((what (eql 'matrix)) spec arguments)
      (destructuring-bind (n m &optional (base-type 'double-float))
          spec
        (assert (and (<= 0 n (1- array-dimension-limit))
                     (<= 0 m (1- array-dimension-limit))))
        (apply #'make-array (list n m)
               :element-type base-type
               arguments)))
")
    (:TYPE :MACRO :SYMBOL
     (:NAME "TYPE-CHECK" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Checks that PLACE contains an object of type TYPE.

It works like CHECK-TYPE, but TYPE is evaluated. 
It also returns T if the check succeeds.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CHECK-OPTIONAL-ARGS-NUMBER" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARGLIST" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "MIN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "AFTER" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Utility macro producing ASSERTs that check the number of arguments.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "SYMBOL Method.

Dispatches on the class named by the argument.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "STANDARD-CLASS Method.

Applies MAKE-INSTANCE to the class and ARGUMENTS.  This method is, to
all effects, MAKE-INSTANCE in disguise.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "STRUCTURE-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "STRUCTURE-CLASS Method.

Applies the constructor of the STRUCTURE-CLASS to the ARGUMENTS.  The
constructor must have been registered with
REGISTER-STRUCTURE-CONSTRUCTOR to be applicable.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "BUILT-IN-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "BUILT-IN-CLASS Method.

Signals an 'undefined' error.  This method is a sink for the
built-in classes which do not have a specialized method built with EQL.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "CLASS Around Method.

This method helps dealing with some of the vagaries of the CL type
system, e.g., COMPLEX and RATIONAL types with their relationship.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "ARRAY Method.

Calls MAKE-ARRAY after having manipulated the ARGUMENTS.
The 'bare' constructor for objects of 'type' ARRAY  actually behaves
as having the following simple syntax:

   new 'array &optional <initial-contents> &rest <MAKE-ARRAY keywords>

I.e., the constructor figures out the dimensions of the
<initial-contents> before dispatching to MAKE-ARRAY.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "VECTOR Method.

Applies the function VECTOR to the ARGUMENTS.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "STRING Method.

Applies the function STRING to the first of ARGUMENTS.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "LIST Method.

Applies the function VECTOR to the ARGUMENTS.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "CHARACTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "CHARACTER Method.

Applies the function CHARACTER to the first of ARGUMENTS.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "SYMBOL Method.

The SYMBOL method has the following syntax.

   NEW 'SYMBOL S &optional (PACKAGE *PACKAGE*) COPY-PROPERTIES

S can be a STRING or a SYMBOL.  If it is a SYMBOL, S is first copied,
using COPY-SYMBOL and COPY-PROPERTIES (cfr., COPY-SYMBOL in the CL
Standard).  If S is a STRING then MAKE-SYMBOL is initially called.  If
PACKAGE is NIL then a fresh, uninterned symbol is returned, otherwise
the resulting symbol is IMPORTed in PACKAGE.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "PATHNAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "PATHNAME Method.

The PATHNAME method dispatches on the first element of ARGUMENTS.  If
it is a KEYWORD, it assumes that MAKE-PATHNAME is to be called,
applied to all the ARGUMENTS.
Otherwise it checks whether the first of ARGUMENTS ia a STRING, a
STREAM or a PATHNAME, in which case is passes it to the function
PATHNAME.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "NUMBER Method.

The NUMBER method just checks that the argument is a number and
returns it.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "COMPLEX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "COMPLEX Method.

The COMPLEX method applies the function COMPLEX to the arguments.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "REAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "FLOAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "RATIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "RATIO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "FIXNUM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "SINGLE-FLOAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "DOUBLE-FLOAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-HASH-TABLE" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "Copies and HASH-TABLE.

This function is implementation dependent.  The basic behavior
provided just copies an hash-table with the standard components.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "HASH-TABLE Method.

The HASH-TABLE method admits a non-traditional syntax.  It can be
invoked in two forms.

   new 'HASH-TABLE
        &optional <pairs>
        &rest <hash-table-standard-args>
        &key &allow-other-keys
or

   new 'HASH-TABLE
        &rest <hash-table-standard-args>
        &key &allow-other-keys

I.e., it dispatches on the first of the ARGUMENTS to decide whether it
also has to 'fill' the newly created hash table; in this last case, it
behaves as a 'copy' constructor.  If the first of the ARGUMENTS is a
hash-table, the keywords are ignored.  If it is a keyword then it is
assumed that the call must resolve to a simple call to
MAKE-HASH-TABLE.  Otherwise, <pairs> must be an A-LIST of pairs

  (<key> . <value>)

which are then fed into the newly created hash-table.

The result is an hash table.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "HASH-SET" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
          :EXTERNALP NIL))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "HASH-SET Method.

A specialised method yielding a HASH-TABLE with BOOLEAN values.  It
can be invoked in two forms.

   new 'HASH-SET
        &optional <sequence-set>
        &rest <hash-table-standard-args>
        &key &allow-other-keys
or

   new 'HASH-SET
        &rest <hash-table-standard-args>
        &key &allow-other-keys

I.e., it dispatches on the first of the ARGUMENTS to decide whether it
also has to 'fill' the newly created hash table; in this last case, it
behaves as a 'copy' constructor for the hash-table skeleton, and then
it substitutes the values or the resulting hash-table with T.  If the
first of the ARGUMENTS is a hash-table, the keywords are ignored.  If
it is a keyword then it is assumed that the call must resolve to a
simple call to MAKE-HASH-TABLE.  Otherwise, <sequence-set> must be an
SEQUENCE of elements of the set.

The result is an hash table.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "CONS Method.

This is the method that handles the compound type specifiers.  It
eventually calls TYPE-CONS, which is in charge of dealing with each
compound type specifier.

In order to inform the NEW operator of a new compound type specifier
it is thus sufficient to define an appropriate TYPE-CONS method.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SIGNED-BYTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "UNSIGNED-BYTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "BIT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STRUCTURE-CONSTRUCTORS*" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQ)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGISTER-STRUCTURE-CONSTRUCTOR" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "CONSTRUCTOR" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "Registers CONSTRUCTOR for structure class SC.

The CONSTRUCTOR will then be available to NEW whenever a SC needs to be
created.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-STRUCTURE-CONSTRUCTOR" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ERRORP" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "ARRAY Method.

It constructs an array after having manipulated SPEC and ARGUMENTS;
the overall effect is similar to the NEW ARRAY method.
The TYPE-CONS method allows NEW to use the following syntax:

   new '(array &optional
               (<element-type> T)
               <dimension-spec>
               &rest <MAKE-ARRAY-kwds-1>
               &key
               &allow-other-keys)
         &optional
         <initial-contents>
         &rest <MAKE-ARRAY-kwds-2>
         &key
         &allow-other-keys

I.e., the constructor figures out the dimensions of the
<initial-contents> before dispatching to MAKE-ARRAY.  Further checks
are made to ensure that the shape of <initial-contents> (if supplied)
is acceptable.

MAKE-ARRAY-kwds-1 and MAKE-ARRAY-kwds-2 are the normal MAKE-ARRAY
parameters.  The actual call to MAKE-ARRAY is eventually of the form:

   (apply 'make-array
          <computed-dimensions>
          (append
             (and <initial-contents>
                  (list :initial-contents <initial-contents>))
             MAKE-ARRAY-kwd-1
             MAKE-ARRAY-kwd-2))

Therefore, order among the MAKE-ARRAY keywords is important.
It should be noted that

   (array &optional (<element-type> T) <dimension-spec>)

is a valid, yet constrained, type specifier.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-DIMENSIONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RANK" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "DATA" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-DATA-DIMENSIONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DATA" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RANK" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      ((:NAME "ERROR-IF-UNEQUAL-P" :PACKAGE-NAME
        "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NESTED-SEQUENCES" :PACKAGE-NAME
        "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
       (:NAME "DATA" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)))
     :DOCUMENTATION "Computes the dimensions of DATA.

DATA is a sequence of nested sequences.  RANK can be passed to limit
the depth of the reconstruction; if NIL (the default) the dimensions
are computed down to 'atoms'.  ERROR-IF-UNEQUAL-P controls whether an
error is signalled if the shape of DATA is 'ragged'. An error is also
signalled if RANK is higher than the actual DATA rank.")
    (:TYPE :TYPE :SYMBOL
     (:NAME "NUMERIC-REAL-TYPES" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-NUMERIC-INTERVAL-ELEMENT" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "NUM-TYPE-NAME" :PACKAGE-NAME
       "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
      (:NAME "L" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "U" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "COMPLEX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NUM-TYPE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "LOWER-BOUND" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "UPPER-BOUND" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NO-APPLICABLE-METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ITC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
          "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NUM-TYPE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "L" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "U" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NUM-TYPE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "L" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "U" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-RATIONAL" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "D" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       1))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NUM-TYPE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "RATIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "L" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "U" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERVAL-TYPE-CONS" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NUM-TYPE" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "FIXNUM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "L" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "U" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SIGNED-BYTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "UNSIGNED-BYTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-DUMMY-HASH-TABLE*" :PACKAGE-NAME
      "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION "The HASH-TABLE Method.

It constructs a HASH-TABLE by handling a 'type specifier' with a
syntax that makes the following call the NEW possible:

    (new '(hash-table &rest ht-keys
                      &key
                       (test #'eql)
                       (size (hash-table-size *default-dummy-hash-table*))
                       (rehash-size (hash-table-rehash-size *default-dummy-hash-table*))
                       (rehash-threshold (hash-table-rehash-threshold *default-dummy-hash-table*))
                       &allow-other-keys)
         &rest arguments)

The defaults for each of the keyword arguments are implementation dependent.
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "STRUCTURE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "WHAT" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
        :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "SPEC" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL)
      (:NAME "ARGUMENTS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "NEW" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
     :EXTERNALP T)
    (:NAME "NEWQ" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
     :EXTERNALP T)
    (:NAME "REGISTER-STRUCTURE-CONSTRUCTOR" :PACKAGE-NAME
     "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP" :EXTERNALP T)
    (:NAME "TYPE-CONS" :PACKAGE-NAME "IT.UNIMIB.DISCO.MA.CL.EXT.TAC.NEW-OP"
     :EXTERNALP T)))))
