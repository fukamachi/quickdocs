
(:TYPE :SYSTEM :NAME "trivial-types" :AUTHOR "Tomohiro Matsuyama" :MAINTAINER
 NIL :VERSION "0.1" :LICENCE "LLGPL" :DESCRIPTION "Trivial type definitions"
 :LONG-DESCRIPTION "TRIVIAL-TYPES provides missing but important type
definitions such as PROPER-LIST, ASSOCIATION-LIST, PROPERTY-LIST and
TUPLE.

By using these types, you can keep type declarations more
accurate. For example, you may write a class definition like:

    (defclass person ()
      ((name :type string))
      ((age :type fixnum))
      ((friends :type list)))

However, it is not obvious for anyone except you that FRIENDS slot has
only a list of person. If you want declare FRIENDS slot more
accurately, PROPER-LIST is the best for that:

    (defclass person ()
      ((name :type string))
      ((age :type fixnum))
      ((friends :type (proper-list person))))

In addition, TRIVIAL-TYPES also provides standard designators defined
in ANSI standard such as PACKAGE-DESIGNATOR. They are useful when you
write a function that takes a package-oid argument like:

    (defun list-external-symbols (package)
      (declare (package-designator package))
      (loop for symbol being the external-symbol of package
            collect symbol))"
 :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "TRIVIAL-TYPES" :FULL-NAME "TRIVIAL-TYPES"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*STANDARD-OPTIMIZE-QUALITIES*" :PACKAGE-NAME "TRIVIAL-TYPES"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'((SPEED 3) (SAFETY 0) (SPACE 0) (DEBUG 1) (COMPILATION-SPEED 0))")
    (:TYPE :MACRO :SYMBOL
     (:NAME "%PROPER-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ELEMENT-TYPE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROPER-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Returns true if OBJECT is a proper list.

Examples:

    (proper-list-p 1) => NIL
    (proper-list-p '(1 . 2)) => NIL
    (proper-list-p nil) => T
    (proper-list-p '(1 2 3)) => T")
    (:TYPE :TYPE :SYMBOL
     (:NAME "PROPER-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ELEMENT-TYPE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROPERTY-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Returns true if OBJECT is a property list.

Examples:

    (property-list-p 1) => NIL
    (property-list-p '(1 2 3)) => NIL
    (property-list-p '(foo)) => NIL
    (property-list-p nil) => T
    (property-list-p '(foo 1)) => T
    (property-list-p '(:a 1 :b 2)) => T")
    (:TYPE :TYPE :SYMBOL
     (:NAME "PROPERTY-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VALUE-TYPE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATION-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "VAR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Returns true if OBJECT is an association list.

Examples:

    (association-list-p 1) => NIL
    (association-list-p '(1 2 3)) => NIL
    (association-list-p nil) => T
    (association-list-p '((foo))) => T
    (association-list-p '((:a . 1) (:b . 2))) => T")
    (:TYPE :TYPE :SYMBOL
     (:NAME "ASSOCIATION-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY-TYPE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "VALUE-TYPE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TUPLE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Exactly same as LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TUPLEP" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Returns true if OBJECT is a tuple, meaning a proper list.

Examples:

    (tuplep 1) => NIL
    (tuplep '(1 . 2)) => NIL
    (tuplep nil) => T
    (tuplep '(1 2 3)) => T")
    (:TYPE :TYPE :SYMBOL
     (:NAME "TUPLE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENT-TYPES" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Exactly same as LIST.")
    (:TYPE :TYPE :SYMBOL
     (:NAME "CHARACTER-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "FUNCTION-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "FILE-POSITION-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "LIST-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "PACKAGE-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "PATHNAME-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "STREAM-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FILE-ASSOCIATED-STREAM-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Returns true if STREAM is a stream associated to a file.")
    (:TYPE :TYPE :SYMBOL
     (:NAME "FILE-ASSOCIATED-STREAM" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "NON-NIL" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE-SPECIFIER-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TYPE-SPECIFIER" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns true if TYPE-SPECIFIER is a valid type specfiier.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE-EXPAND" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TYPE-SPECIFIER" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP NIL))
     :DOCUMENTATION "Expand TYPE-SPECIFIER in the lexical environment ENV."))
   :EXTERNAL-SYMBOLS
   ((:NAME "PROPER-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "STRING-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "STREAM-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "PROPER-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "PROPERTY-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "ASSOCIATION-LIST" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "TYPE-EXPAND" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "TUPLEP" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "NON-NIL" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "PACKAGE-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "PATHNAME-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "LIST-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "FILE-POSITION-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP
     T)
    (:NAME "PROPERTY-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "FUNCTION-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "TUPLE" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "CHARACTER-DESIGNATOR" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "ASSOCIATION-LIST-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "FILE-ASSOCIATED-STREAM-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP
     T)
    (:NAME "FILE-ASSOCIATED-STREAM" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)
    (:NAME "TYPE-SPECIFIER-P" :PACKAGE-NAME "TRIVIAL-TYPES" :EXTERNALP T)))))
