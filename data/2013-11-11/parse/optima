
(:TYPE :SYSTEM :NAME "optima" :AUTHOR "Tomohiro Matsuyama" :MAINTAINER NIL
 :VERSION "0.2" :LICENCE "LLGPL" :DESCRIPTION
 "Optimized Pattern Matching Library" :LONG-DESCRIPTION
 "optima is a very fast pattern matching library
which uses optimizing techniques widely used in a functional
programming world. See the following references for more detail:

* [Optimizing Pattern Matching](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.6.5507) by Fabrice Le Fessant, Luc Maranget
* [The Implementation of Functional Programming Languages](http://research.microsoft.com/en-us/um/people/simonpj/papers/slpj-book-1987/) by Simon Peyton Jones

Pattern Language
----------------

A pattern specifier, or a pattern for short unless ambiguous, is an
expression that describes how a value matches the pattern. Pattern
specifiers are defined as follows:

    pattern-specifier ::= constant-pattern
                        | variable-pattern
                        | place-pattern
                        | guard-pattern
                        | not-pattern
                        | or-pattern
                        | and-pattern
                        | constructor-pattern
                        | derived-pattern
    
    constant-pattern ::= t | nil
                       | keyword
                       | atom-except-symbol
                       | (quote VALUE)
    
    variable-pattern ::= SYMBOL | (variable SYMBOL)
    
    place-pattern ::= (place SYMBOL)
    
    guard-pattern ::= (guard PATTERN TEST-FORM)
    
    not-pattern ::= (not PATTERN)
    
    or-pattern ::= (or PATTERN*)
    
    and-pattern ::= (and PATTERN*)
    
    constructor-pattern ::= (NAME ARG*)
    
    derived-pattern ::= (NAME PATTERN*)

### Constant-Pattern

A constant-pattern matches the constant itself.

Examples:

    (match 1 (1 2)) => 2
    (match \"foo\" (\"foo\" \"bar\")) => \"bar\"
    (match '(1) ('(1) 2)) => 2

### Variable-Pattern

A variable-pattern matches any value and bind the value to the
variable. _ and otherwise is a special variable-pattern (a.k.a
wildcard-pattern) which matches any value but doesn't bind.

Examples:

    (match 1 (x x)) => 1
    (match 1 (_ 2)) => 2
    (match 1
      (2 2)
      (otherwise 'otherwise))
    => OTHERWISE

### Place-Pattern

A place-pattern matches any value like variable-patterns but bind the
value with SYMBOL-MACROLET.

Examples:

    (defvar c (cons 1 2))
    (match c ((cons (place x) y) (incf x) (incf y)))
    c
     => (2 . 2)

### Guard-Pattern

A guard-pattern is a special pattern that also tests whether TEST-FORM
satisfies in the current matching context.

Examples:

    (match 1 ((guard x (eql x 2)) t))
    => NIL
    (match 1 ((guard x (eql x 1)) t))
    => T

### Not-Pattern

A not-pattern matches a value that is not matched with sub-PATTERN.

Examples:

    (match 1 ((not 2) 3)) => 3
    (match 1 ((not (not 1)) 1)) => 1

### Or-Pattern

An or-pattern matches a value that is matched with one of
sub-PATTERNs. There is a restriction that every pattern of
sub-PATTERNs must have same set of variables.

Examples:

    (match '(2 . 1) ((or (cons 1 x) (cons 2 x)) x))
    => 1

### And-Pattern

An and-pattern matches a value that is matched with all of
sub-PATTERNs. The most common use case is to match a value and bind
the value to a variable.

Examples:

    (match 1 ((and 1 x) x))
    => 1

### Constructor-Pattern

A constructor-pattern matches not a value itself but a structure of
the value. The following constructors are available:

#### CONS

Syntax:

    cons-constructor-pattern ::= (cons CAR-PATTERN CDR-PATTERN)

Examples:

    (match '(1 . 2)
      ((cons a b) (+ a b)))
     => 3

#### ASSOC

Syntax:

    assoc-constructor-pattern ::= (assoc ITEM PATTERN &key key test)

Examples:

    (match '((1 . :one))
      ((assoc 1 x) x))
    => :ONE
    (match '((1 . :one) (2 . :two))
      ((assoc 2 x) x))
    => :TWO
    (match '(1 (2 . 3))
      ((assoc 2 x) x))
    => 3
    (match '((\"a\" . 123))
      ((assoc \"A\" 123 :test #'string-equal) t))
    => T

#### PROPERTY

Syntax:

    property-constructor-pattern ::= (property KEY PATTERN)

Examples:

    (match '(:a 1)
      ((property :a x) x))
    => 1
    (match '(:a 1 :b 2)
      ((property :b x) x))
    => 2
    (match '(:a 1 2)
      ((property :a x) x))
    => 1

#### VECTOR

Syntax:

    vector-constructor-pattern ::= (vector PATTERN*)

Examples:

    (match #(1 2)
      ((vector a b) (+ a b)))
    => 3

#### SIMPLE-VECTOR

Syntax:

    simple-vector-constructor-pattern ::= (simple-vector PATTERN*)

Examples:

    (match #(1 2)
      ((simple-vector a b) (+ a b)))
    => 3

#### CLASS

Matches an instance of a given subclass of standard-class, as well as
the instance's slots.

Syntax:

    class-constructor-pattern ::= (class NAME slot*)
                                | (NAME slot*)
    
    slot ::= SLOT-NAME
           | (SLOT-NAME PATTERN*)

CLASS can be omitted. If slot is a symbol, then it will be regarded
as (slot slot). If more than one PATTERN are given, then they will be
wrapped by and-pattern like (and PATTERN*).

Examples:

    (defclass point ()
      ((x :initarg :x)
       (y :initarg :y)))
    (defvar p (make-instance 'point :x 1 :y 2))
    (match p
      ((point x y) (list x y)))
    => (1 2)
    (match p
      ((point (x 1 x)) x))
    => 1
    (defstruct person (name age))
    (defvar foo (make-person :name \"foo\" :age 30))
    (match foo
      ((person name age) (list name age)))
    => (\"foo\" 30)

You can also use MAKE-INSTANCE style pattern syntax like:

    (match foo
      ((person :name name :age age) (list name age)))
    => (\"foo\" 30)

This is equal to the example above except this implicitly resolves the
slot names using Meta Object Protocol. In this case, you have to make
sure the slot names can be determined uniquely during the
compilation. Otherwise, you will get a compilation error.

#### STRUCTURE

Matches any structure value, and its slot values.

Syntax:

    structure-constructor-pattern ::= (structure CONC-NAME slot*)
                                    | (CONC-NAME slot*)
    
    slot ::= SLOT-NAME
           | (SLOT-NAME PATTERN*)

As well as CLASS constructor-pattern, STRUCTURE can be
omitted. CONC-NAME is a prefix string of a predicate (CONC-NAME +
\"p\") and accessors (CONC-NAME + SLOT-NAME). For example, if we have
the following defstruct,

    (defstruct person name age)

the structure constructor-pattern (person- name age) is valid because
PERSON-P, PERSON-NAME and PERSON-AGE are available here. Technically,
we don't need a structure defined. If we have the following code, for
instance,

    (defun point-p (p) (consp p))
    (defun point-x (p) (car p))
    (defun point-y (p) (cdr p))

the pattern matching below is valid.

    (match (cons 1 2)
      ((point- x y) (list x y)))
    => (1 2)

Examples:

    (defstruct (person (:conc-name :p-)
                       (:predicate p-p))
      name age)
    (match (make-person :name \"foo\" :age 30)
      ((p- name age) (list name age)))
    => (\"foo\" 30)

Same as class constructor-pattern, you can also use MAKE-INSTANCE
style pattern syntax like:

    (match (cons 1 2)
      ((point- :x x :y y) (list x y)))
    => (1 2)

### Derived-Pattern

A derived-pattern is a pattern that is defined with DEFPATTERN. There
are some builtin dervied patterns as below:

#### LIST

Expansion of LIST derived patterns:

    (list a b c) => (cons a (cons b (cons c nil)))

#### LIST*

Expansion of LIST* derived patterns:

    (list* a b c) => (cons a (cons b c))

#### SATISFIES

Expansion of SATISFIES derived patterns:

    (satisfies f) => (guard it (f it))

#### EQ, EQL, EQUAL, EQUALP

Expansion of EQ, EQL, EQUAL, EQUALP derived patterns:

    (eq 'foo) => (guard it (eq it 'foo))
    (eql 123) => (guard it (eql it 123))
    (equal '(1 2)) => (guard it (equal it '(1 2)))
    (equalp \"foo\") => (guard it (equalp it \"foo\"))

#### TYPE

Expansion of TYPE derived patterns:

    (TYPE type) => (guard it (typep it 'type))

Quasiquotation
--------------

You may want to use a quasiquote in a pattern specifier like:

    (match '(1 2 3 4)
      (`(1 ,x ,@y) (list x y)))

To do so, you need to use a specific quasiquote reader, for example
[fare-quasiquote](http://cliki.net/fare-quasiquote) with loading
fare-quasiquote-optima system, because an expanded form of a
quasiquote reader is not standardized."
 :DEPENDS-ON ("ALEXANDRIA" "CLOSER-MOP") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "OPTIMA" :FULL-NAME "OPTIMA" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "SELF-EVALUATING-OBJECT-P" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "OBJECT" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SET1" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "SET2" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPAN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "KEY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "KEY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ONCE-ONLY*" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION "Equality function for comparing patten constants.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "EQUALS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Equality macro for comparing pattern constants. This specializes
the comparison form to some specific form as follows:

    (equals x nil)    => (null x)
    (equals x 'foo)   => (eq x 'foo)
    (equals x 123)    => (eql x 123)
    (equals x '(a b)) => (%equals x '(a b))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%SVREF" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SIMPLE-VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION "Safe SVREF.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%ASSOC" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Safe ASSOC.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%GET-PROPERTY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "PLIST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION "Safe GETF.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DTOR1" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "DTOR2" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DTOR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DTOR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "VARIABLE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)) :DOCUMENTATION
     NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%MAKE-VARIABLE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-VARIABLE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "PLACE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)) :DOCUMENTATION
     NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PLACE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "CONSTANT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)) :DOCUMENTATION
     NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "VALUE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONSTANT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VALUE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)) :DOCUMENTATION
     NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SUBPATTERNS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM97" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "GUARD-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TEST-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-GUARD-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "TEST-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GUARD-PATTERN-SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "NOT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-NOT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NOT-PATTERN-SUBPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "OR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-OR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "AND-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-AND-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "COMPLEX-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SUBPATTERNS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM216" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONSTRUCTOR-PATTERN-ARITY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CAR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CDR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CAR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
        (:NAME "CDR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONS-PATTERN-CAR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONS-PATTERN-CDR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "KEY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOC-PATTERN-VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROPERTY-PATTERN-VALUE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBPATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SLOT-NAMES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%MAKE-CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SUBPATTERNS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM618" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CLASS-NAME" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM619" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "SLOT-NAMES" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM620" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-SPECS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONC-NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SLOT-NAMES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%MAKE-STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "SUBPATTERNS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM741" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "CONC-NAME" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM742" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "SLOT-NAMES" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM743" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONC-NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-SPECS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-EQUAL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      ((:NAME "Y" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-PREDICATE-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESTRUCTOR-FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "VAR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-VARIABLES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the set of variables in PATTERN. If PATTERN is not linear,
an error will be raised.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PLACE-PATTERN-INCLUDED-P" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-PATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check if PATTERNS are valid. Otherwise, an error will be raised.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIFT-GUARD-PATTERNS-1" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION "Lifts GUARD patterns in PATTERN so that the guards can see
any variables in PATTERN. The transform looks like:

       (list x (guard y (equal x y)))
    => (guard (list x y) (equal x y))

Multiple guards will be connected with conjunction in order of
occurence like:

       (list (guard x (consp x)) (guard y (eq y (car x))))
    => (guard (list x (guard y (eq y (car x)))) (consp x))
    => (guard (guard (list x y) (eq y (car x))) (consp x))
    => (guard (list x y) (and (consp x) (eq y (car x))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIFT-GUARD-PATTERNS-2" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION "Lifts OR patterns that include guards like:

       (list 3 (or 1 (guard x (evenp x))))
    => (or (list 3 1) (list 3 (guard x (evenp x))))
    => (or (list 3 1) (guard (list 3 x) (evenp x)))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIFT-GUARD-PATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-EXPAND-FUNCTION" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PATTERN-EXPAND-FUNCTION" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-EXPAND-1" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-EXPAND" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATTERN-EXPAND-ALL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "LAMBDA-LIST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Defines a derived pattern specifier named NAME. This is analogous
to DEFTYPE.

Examples:

    ;; Defines a LIST pattern.
    (defpattern list (&rest args)
      (when args
        `(cons ,(car args) (list ,@(cdr args)))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ASSOC" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "PROPERTY" :PACKAGE-NAME "OPTIMA" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SIMPLE-VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-SPECS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONC-NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-SPECS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "STRUCTURE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-CONSTRUCTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-SPECS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VARIABLE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PLACE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONSTANT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "GUARD-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "NOT-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "OR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "AND-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CONS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "ASSOC-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PROPERTY-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "SIMPLE-VECTOR-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "CLASS-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNPARSE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "STRUCTURE-PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
       (:NAME "PATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL (:NAME "%OR" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to OR except %OR also allows to call (FAIL) in each branch
to jump to its next branch.")
    (:TYPE :MACRO :SYMBOL (:NAME "%IF" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "THEN" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to IF except %IF also allows to call (FAIL) in THEN branch
to jump to ELSE branch.")
    (:TYPE :MACRO :SYMBOL (:NAME "FAIL" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Causes the latest pattern matching be failed and continue to do the
rest of pattern matching.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-CLAUSE-BODY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BODY" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-FAIL" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-VARIABLE-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-PLACE-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-CONSTANT-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-CONSTRUCTOR-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-OR-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-NOT-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-EMPTY-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "GROUP" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-GROUPS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "GROUPS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GROUP-MATCH-CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPROCESS-MATCH-CLAUSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLAUSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPROCESS-MATCH-CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MATCH-1" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-MULTIPLE-VALUE-MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VALUES-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "%MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "ELSE" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compiler cushion macro. This is useful for seeing and debugging the
process of pattern matching compiler.")
    (:TYPE :MACRO :SYMBOL (:NAME "MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Matches ARG with CLAUSES. CLAUSES is a list of the form of (PATTERN
. BODY) where PATTERN is a pattern specifier and BODY is an implicit
progn. If ARG is matched with some PATTERN, then evaluates
corresponding BODY and returns the evaluated value. Otherwise, returns
NIL.

Evaluating a form (FAIL) in the clause body causes the latest pattern
matching be failed. For example,

    (match 1
      (x (if (eql x 1)
             (fail)
             x))
      (_ 'ok))

returns OK, because the form (FAIL) in the first clause is
evaluated.

If BODY starts with the symbols WHEN or UNLESS, then the next form
will be used to introduce (FAIL). That is,

    (match list ((list x) when (oddp x) x))
    (match list ((list x) unless (evenp x) x))

will be translated to

    (match list ((list x) (if (oddp x) x (fail))))
    (match list ((list x) (if (evenp x) (fail) x)))

Examples:

    (match 1 (1 1))
    => 1
    (match 1 (2 2))
    => 2
    (match 1 (x x))
    => 1
    (match (list 1 2 3)
      (list x y z) (+ x y z))
    => 6")
    (:TYPE :MACRO :SYMBOL
     (:NAME "MATCH*" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "MULTIPLE-VALUE-MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VALUES-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Matches the multiple values of VALUES-FORM with CLAUSES. Unlike
MATCH, CLAUSES have to have the form of (PATTERNS . BODY), where
PATTERNS is a list of patterns. The number of values that will be used
to match is determined by the maximum arity of PATTERNS among CLAUSES.

Examples:

    (multiple-value-match (values 1 2)
     ((2) 1)
     ((1 y) y))
    => 2")
    (:TYPE :MACRO :SYMBOL (:NAME "EMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Same as MATCH, except MATCH-ERROR will be raised if not matched.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "EMATCH*" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "MULTIPLE-VALUE-EMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VALUES-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Same as MULTIPLE-VALUE-MATCH, except MATCH-ERROR will be raised if
not matched.")
    (:TYPE :MACRO :SYMBOL (:NAME "CMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARG" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Same as MATCH, except continuable MATCH-ERROR will be raised if not
matched.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CMATCH*" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARGS" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "MULTIPLE-VALUE-CMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VALUES-FORM" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "OPTIMA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Same as MULTIPLE-VALUE-MATCH, except continuable MATCH-ERROR will
be raised if not matched."))
   :EXTERNAL-SYMBOLS
   ((:NAME "PROPERTY" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MATCH-ERROR-PATTERNS" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "CMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "DEFPATTERN" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "EMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-CMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "GUARD" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MATCH-ERROR" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MATCH-ERROR-VALUES" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "FAIL" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "MULTIPLE-VALUE-EMATCH" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)
    (:NAME "PLACE" :PACKAGE-NAME "OPTIMA" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".EXTRA" :FULL-NAME "OPTIMA.EXTRA" :DOCUMENTATION "
### [Pattern] alist

Syntax:

    (alist (KEY . PATTERN)*)

Expansion:

    (alist (k . p)*) => (and (assoc k p)*)

Examples:

    (match '((1 . :one) (2 . :two) (3 . :three))
      ((alist (1 . x) (3 . y)) (list x y)))
    => (:ONE :THREE)

### [Pattern] plist

Syntax:

    (plist {KEY PATTERN}*)

Expansion:

    (plist {k p}*) => (and (property k p)*)

Examples:

    (match '(:name \"John\" :age 23)
      ((plist :name \"John\" :age age) age))
    => 23"
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "IF-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "THEN" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "ELSE" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Equivalent to (match ARG (PATTERN THEN) (otherwise ELSE)).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WHEN-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL))
     :DOCUMENTATION "Equivalent to (match ARG (PATTERN BODY...)).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "UNLESS-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL))
     :DOCUMENTATION "Equivalent to (match ARG (PATTERN) (otherwise BODY...)).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LET-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to LET, except not only a variable but also a pattern can
be used in BINDINGS.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LET-MATCH*" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL))
     :DOCUMENTATION "Similar to LET-MATCH but matches sequentially.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LET-MATCH1" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATTERN" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP NIL))
     :DOCUMENTATION "Equivalent to (let-match ((PATTERN ARG)) BODY...)."))
   :EXTERNAL-SYMBOLS
   ((:NAME "UNLESS-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "ALIST" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "IF-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "LET-MATCH*" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "PLIST" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "LET-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "WHEN-MATCH" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)
    (:NAME "LET-MATCH1" :PACKAGE-NAME "OPTIMA.EXTRA" :EXTERNALP T)))))
