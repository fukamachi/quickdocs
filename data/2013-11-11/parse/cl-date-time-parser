
(:TYPE :SYSTEM :NAME "cl-date-time-parser" :AUTHOR
 "Takaya OCHIAI <tkych.repl@gmail.com>" :MAINTAINER NIL :VERSION "0.1.2"
 :LICENCE "MIT License" :DESCRIPTION
 "Parse date-time-string, and return (values universal-time fraction).
Parsable date-time-format: ISO8601, W3CDTF, RFC3339, RFC822, RFC2822, RFC5322, asctime, RFC850, RFC1036."
 :LONG-DESCRIPTION NIL :DEPENDS-ON
 ("ALEXANDRIA" "SPLIT-SEQUENCE" "ANAPHORA" "CL-PPCRE" "LOCAL-TIME"
  "PARSE-FLOAT")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-DATE-TIME-PARSER" :FULL-NAME "CL-DATE-TIME-PARSER"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*FEATURES-TMP*" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "*FEATURES*")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SECOND+" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+MINUITE-SECS+" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(* 60 CL-DATE-TIME-PARSER::+SECOND+)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HOUR-SECS+" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(* 60 CL-DATE-TIME-PARSER::+MINUITE-SECS+)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+DAY-SECS+" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(* 24 CL-DATE-TIME-PARSER::+HOUR-SECS+)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MONTH-VEC-IN-NORMAL-YEAR*" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "#(\"0 is not month number.\" 0 2678400 5097600 7776000 10368000 13046400 15638400
  18316800 20995200 23587200 26265600 28857600)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MONTH-VEC-IN-LEAP-YEAR*" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "#(\"0 is not month number.\" 0 2678400 5184000 7862400 10454400 13132800 15724800
  18403200 21081600 23673600 26352000 28944000)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MONTH-HT-IN-NORMAL-YEAR*" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ALEXANDRIA.0.DEV:PLIST-HASH-TABLE
 '(\"Jan\" 0 \"Feb\" 2678400 \"Mar\" 5097600 \"Apr\" 7776000 \"May\" 10368000 \"Jun\"
   13046400 \"Jul\" 15638400 \"Aug\" 18316800 \"Sep\" 20995200 \"Oct\" 23587200 \"Nov\"
   26265600 \"Dec\" 28857600 \"January\" 0 \"February\" 2678400 \"March\" 5097600
   \"April\" 7776000 \"May\" 10368000 \"June\" 13046400 \"July\" 15638400 \"August\"
   18316800 \"September\" 20995200 \"October\" 23587200 \"November\" 26265600
   \"December\" 28857600)
 :TEST #'EQUALP)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MONTH-HT-IN-LEAP-YEAR*" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ALEXANDRIA.0.DEV:PLIST-HASH-TABLE
 '(\"Jan\" 0 \"Feb\" 2678400 \"Mar\" 5184000 \"Apr\" 7862400 \"May\" 10454400 \"Jun\"
   13132800 \"Jul\" 15724800 \"Aug\" 18403200 \"Sep\" 21081600 \"Oct\" 23673600 \"Nov\"
   26352000 \"Dec\" 28944000 \"January\" 0 \"February\" 2678400 \"March\" 5184000
   \"April\" 7862400 \"May\" 10454400 \"June\" 13132800 \"July\" 15724800 \"August\"
   18403200 \"September\" 21081600 \"October\" 23673600 \"November\" 26352000
   \"December\" 28944000)
 :TEST #'EQUALP)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TZ-ABBREV-TO-OFFEST*" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ALEXANDRIA.0.DEV:PLIST-HASH-TABLE
 '(\"UT\" 0 \"GMT\" 0 \"ADT\" -10800 \"AST\" -14400 \"EDT\" -14400 \"EST\" -18000 \"CDT\"
   -18000 \"CST\" -21600 \"MDT\" -21600 \"MST\" -25200 \"PDT\" -25200 \"PST\" -28800 \"AT\"
   -14400 \"ET\" -18000 \"CT\" -21600 \"MT\" -25200 \"PT\" -28800 \"A\" 0 \"B\" 0 \"C\" 0 \"D\"
   0 \"E\" 0 \"F\" 0 \"G\" 0 \"H\" 0 \"I\" 0 \"K\" 0 \"L\" 0 \"M\" 0 \"N\" 0 \"O\" 0 \"P\" 0 \"Q\" 0
   \"R\" 0 \"S\" 0 \"T\" 0 \"U\" 0 \"V\" 0 \"W\" 0 \"X\" 0 \"Y\" 0 \"Z\" 0)
 :TEST #'EQUALP)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DAY-OF-WEEK*" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ALEXANDRIA.0.DEV:PLIST-HASH-TABLE
 '(\"Mon\" 1 \"Tue\" 1 \"Wed\" 1 \"Thu\" 1 \"Fri\" 1 \"Sat\" 1 \"Sun\" 1 \"Monday\" 1 \"Tuesday\"
   1 \"Wednesday\" 1 \"Thursday\" 1 \"Friday\" 1 \"Saturday\" 1 \"Sunday\" 1)
 :TEST #'EQUALP)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-OFFSET" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TZ-ABBREV" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CALC-OFFSET" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TZ-ABBREV" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return offset for the time-zone-abbrev. If not find offset, return NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "YEAR-TO-UT" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "YEAR" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LEAP-YEAR-P" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "YEAR" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL))
     :DOCUMENTATION "Return T if YEAR is a leap year, otherwise NIL.
c.f. RFC3339, (Appendix C. Leap Years)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MONTH-TO-UT" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "MONTH" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL)
      (:NAME "LEAP-YEAR?" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-RFC822-GENUS" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "DATE-TIME-STRING" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Parse DATE-TIME-STRING with RFC822 (RFC1123, RFC2822, RFC5322),
RFC850 (RFC1036) or asctime format, and return
 (values UNIVERSAL-TIME FRACTION).

Reference:
 * RFC822  -- http://tools.ietf.org/html/rfc822
 * RFC2822 -- http://tools.ietf.org/html/rfc2822
 * RFC5322 -- http://tools.ietf.org/html/rfc5322
 * RFC850  -- http://tools.ietf.org/html/rfc850
 * RFC1036 -- http://tools.ietf.org/html/rfc1036
 * asctime -- http://en.cppreference.com/w/c/chrono/asctime
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-ISO8601-GENUS" :PACKAGE-NAME "CL-DATE-TIME-PARSER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DATE-TIME-STRING" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Parse DATE-TIME-STRING with ISO8601, W3CDTF or RFC3339 format,
and return (values UNIVERSAL-TIME FRACTION).

Reference:
 * ISO8601:1988, 2000, 2004
           -- http://www.iso.org/iso/home/standards/iso8601.htm
 * W3CDTF  -- http://www.w3.org/TR/1998/NOTE-datetime-19980827
 * RFC3339 -- http://tools.ietf.org/html/rfc3339
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-DATE-TIME" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DATE-TIME-STRING" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Parse DATE-TIME-STRING, and return (values UNIVERSAL-TIME FRACTION).
DATE-TIME-STRING must represent the date-time after 1900-01-01T00:00:00Z.

Parsable Formats:
 * RFC822 Genus: RFC822 (RFC1123, RFC2822, RFC5322), RFC850 (RFC1036) and asctime.
 * ISO8601 Genus: ISO 8601 (:1988, :2000 and :2004. except for no-year format),
                  W3CDTF, RFC3339.
 * Broken format: The above formats with little broken.

Examples:
 * (parse-date-time \"Thu, 23 Jul 2013 19:42:23 JST\")
   => 3583564943, 0

 * (parse-date-time \"2013-07-23T19:42:23+09:00\")
   => 3583564943, 0

 * (parse-date-time \"23 Jul 13 19:42:23 +0900\")
   => 3583564943, 0

 * (parse-date-time \"Thu Jul 23 19:42:23 JST 2013\")
   => 3583564943, 0

 * (parse-date-time \"2013-07-23T19:42:23.45Z\")
   => 3583597343, 0.45

 For more examples, see Eval-Test in date-time-parser.lisp"))
   :EXTERNAL-SYMBOLS
   ((:NAME "PARSE-DATE-TIME" :PACKAGE-NAME "CL-DATE-TIME-PARSER" :EXTERNALP
     T)))))
