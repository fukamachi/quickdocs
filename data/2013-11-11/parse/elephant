
(:TYPE :SYSTEM :NAME "elephant" :AUTHOR "Ben Lee <blee@common-lisp.net>"
 :MAINTAINER
 "Ian Eslick <ieslick@common-lisp.net, Robert Read <read@robertlread.net>"
 :VERSION NIL :LICENCE "LLGPL" :DESCRIPTION "Object database for Common Lisp"
 :LONG-DESCRIPTION
 "An object-oriented database based on Berkeley DB, for CMUCL/SBCL, OpenMCL, and Allegro."
 :DEPENDS-ON ("UFFI" "SB-POSIX" "CL-BASE64") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "-UTILS" :FULL-NAME "ELEPHANT-UTILS" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "WITH-GENSYMS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SYMS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DO-SUBSETS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SUBSET" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
       (:NAME "SUBSET-SIZE" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Look over subsets of the list")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBSETS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SIZE" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Generate subsets of size n from the list; the last subset has 
   the remaining elements if size does not represent an equal division")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-KEYWORDS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEYWORDS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONCAT-SEPARATED-STRINGS" :PACKAGE-NAME "ELEPHANT-UTILS"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEPARATOR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LISTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPEND-SUBLISTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Takes a list of lists and appends all sublists")
    (:TYPE :MACRO :SYMBOL
     (:NAME "IFRET" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "ALT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION
     "If pred is non-null, return the value, otherwise return the alternate value")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AIF" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "DEFAULT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "ALT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Anaphoric if")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AWHEN" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PRED" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Anaphoric when")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MKLIST" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Make sure the argument is a list or 
   make it a list if it's an atom")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-INDEXED-ELEMENT-AND-ADJUST" :PACKAGE-NAME "ELEPHANT-UTILS"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Remove element at idx and adjust the array to
   reduce array length by one")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CURRY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELE-MAKE-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ELE-WITH-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "IGNORED" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELE-MAKE-FAST-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ELE-WITH-FAST-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "IGNORED" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELE-THREAD-HASH-KEY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "This routine has to return something unqiue about the thread which can serve as a hash key.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "IN-DIRECTORY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAUNCH-BACKGROUND-PROGRAM" :PACKAGE-NAME "ELEPHANT-UTILS"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DIRECTORY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PROGRAM" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ARGS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Launch a program in a specified directory - not all shell interfaces
   or OS's support this")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KILL-BACKGROUND-PROGRAM" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PROCESS-HANDLE" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-TEMP-FILENAME" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HINT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-TEMP-DIRNAME" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HINT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-DIRECTORY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE-DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "TARGET-DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-FILE-TO-DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE-PATH" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "TARGET-DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-FILE" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE-PATH" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL)
      (:NAME "TARGET-PATH" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITHOUT-INTERRUPTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Run BODY with interrupts disabled.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-INTERRUPTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION
     "Cancels effect of surrounding (in dynamic scope sense) without-interrupts.
Works only in SBCL."))
   :EXTERNAL-SYMBOLS
   ((:NAME "COPY-FILE-TO-DIR" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "COPY-FILE" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "LAUNCH-BACKGROUND-PROGRAM" :PACKAGE-NAME "ELEPHANT-UTILS"
     :EXTERNALP T)
    (:NAME "WITHOUT-INTERRUPTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "SUBSETS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "REMOVE-KEYWORDS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "KILL-BACKGROUND-PROGRAM" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP
     T)
    (:NAME "DO-SUBSETS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "ELE-THREAD-HASH-KEY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "AWHEN" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "ELE-MAKE-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "CREATE-TEMP-FILENAME" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "ELE-WITH-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "MKLIST" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "COPY-DIRECTORY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "CREATE-TEMP-DIRNAME" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "IFRET" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "REMOVE-INDEXED-ELEMENT-AND-ADJUST" :PACKAGE-NAME "ELEPHANT-UTILS"
     :EXTERNALP T)
    (:NAME "CURRY" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "ELE-MAKE-FAST-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "IT" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "WITH-INTERRUPTS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "AIF" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "WITH-GENSYMS" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)
    (:NAME "ELE-WITH-FAST-LOCK" :PACKAGE-NAME "ELEPHANT-UTILS" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "-MEMUTIL" :FULL-NAME "ELEPHANT-MEMUTIL" :DOCUMENTATION
   "A low-level UFFI-based memory access and
    serialization toolkit.  Provides basic cross-platform
    binary serialization support for backends."
   :SYMBOL-LIST
   ((:TYPE :TYPE :SYMBOL
     (:NAME "POINTER-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "POINTER-VOID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "ARRAY-OR-POINTER-CHAR" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-BUFS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DEST" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "DEST-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "SRC-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+NULL-VOID+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :DOCUMENTATION "A null pointer to a void type." :INITIAL-VALUE
     "(UFFI:MAKE-NULL-POINTER :VOID)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+NULL-CHAR+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :DOCUMENTATION "A null pointer to a char type." :INITIAL-VALUE
     "(UFFI:MAKE-NULL-POINTER :CHAR)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BUFFER-STREAMS*" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :DOCUMENTATION "Vector of buffer-streams, which you can grab / return."
     :INITIAL-VALUE "(MAKE-ARRAY 0 :ADJUSTABLE T :FILL-POINTER T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BUFFER-STREAMS-LOCK*" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ELEPHANT-UTILS:ELE-MAKE-FAST-LOCK)")
    (:TYPE :STRUCT :SYMBOL
     (:NAME "BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "A stream-like interface to foreign (alien) char buffers."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BUFFER" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SIZE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "POSITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "BUFFER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM36" :PACKAGE-NAME NIL :EXTERNALP NIL))
       ((:NAME "ALLOCATE-FOREIGN-OBJECT" :PACKAGE-NAME "UFFI" :EXTERNALP T)
        (:NAME "UNSIGNED-CHAR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 10))
      (((:NAME "SIZE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM37" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "POSITION" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM38" :PACKAGE-NAME NIL :EXTERNALP NIL))
       0)
      (((:NAME "LENGTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM39" :PACKAGE-NAME NIL :EXTERNALP NIL))
       10))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GRAB-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Grab a buffer-stream from the *buffer-streams* resource pool.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a buffer-stream to the *buffer-streams* resource pool.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-BUFFER-STREAMS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "NAMES" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Grab a buffer-stream, executes forms, and returns the
stream to the pool on exit.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 32-bit signed integer from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 32-bit signed integer from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 64-bit signed integer from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Read a 32-bit unsigned integer from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Read a 64-bit unsigned integer from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a single-float from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a double-float from a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit signed integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit signed integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Write a 32-bit unsigned integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 64-bit signed integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-FIXNUM64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit signed integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Write a 64-bit unsigned integer to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a single-float to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "NUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a double-float to a foreign char buffer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OFFSET-CHAR-POINTER" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "P" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Pointer arithmetic.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BYTE-LENGTH" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "S" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Return the number of bytes of the internal representation
of a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%COPY-STR-TO-BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DEST" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "DEST-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "SRC-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-STR-TO-BUF" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "D" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "DO" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "S" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "SO" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "L" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROCESS-STRUCT-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEFS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "STRUCT" :PACKAGE-NAME "SB-ALIEN" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-STRUCT-SLOTS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEFS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "STRUCT" :PACKAGE-NAME "SB-ALIEN" :EXTERNALP T)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESIZE-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Resize the underlying buffer of a buffer-stream, copying the old data.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESIZE-BUFFER-STREAM-NO-COPY" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Resize the underlying buffer of a buffer-stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "'Empty' the buffer-stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-BYTE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "B" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a byte.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "I" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "I" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "U" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 32-bit unsigned integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "I" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 64-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-FIXNUM64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "I" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 64-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "U" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a 64-bit unsigned integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "D" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a single-float.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "D" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write a double-float.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Write the underlying bytes of a string.  On Unicode
   Lisps, this is a 16-bit operation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-BYTE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a byte.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-BYTE-VECTOR" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read the whole buffer into  byte vector.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-BYTE-VECTOR" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BV" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read the whole buffer into  byte vector.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-TO-ARRAY-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARRY" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Buffer relative; read contents of buffer-stream and write them into array at offset")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-FROM-ARRAY-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARRY" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Buffer relative; write array contents into buffer stream")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-OID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "I" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-OID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-FIXNUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INT" :PACKAGE-NAME "SB-ALIEN" :EXTERNALP T)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-UINT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-WRITE-UINT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INT" :PACKAGE-NAME "SB-ALIEN" :EXTERNALP T)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^32+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "4294967296")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^64+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "18446744073709551616")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Read a 32-bit signed integer, which is assumed to be a fixnum.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 32-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 32-bit unsigned integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-FIXNUM64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 64-bit signed integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a 64-bit unsigned integer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a single-float.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Read a double-float.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEW-STYLE-COPY-P" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-UCS1-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BYTE-LENGTH" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T))
     :DOCUMENTATION "Read a UCS1 string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUFFER-READ-UCS4-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
      (:NAME "BYTE-LENGTH" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T))
     :DOCUMENTATION "Read a UCS4 string.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+LITTLE-ENDIAN+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LITTLE-ENDIAN-P" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "BUFFER-READ-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-OID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "BUFFER-READ-FIXNUM64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "RESET-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "+NULL-CHAR+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "POINTER-VOID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-DOUBLE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "WITH-BUFFER-STREAMS" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-UCS4-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
     :EXTERNALP T)
    (:NAME "RESIZE-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-FIXNUM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-UINT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-TO-ARRAY-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
     :EXTERNALP T)
    (:NAME "BUFFER-WRITE-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-OID" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-UINT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-BYTE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-FIXNUM32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "LITTLE-ENDIAN-P" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-STREAM-BUFFER" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "BUFFER-READ-UCS1-STRING" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
     :EXTERNALP T)
    (:NAME "BYTE-LENGTH" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-UINT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "*C-LIBRARY-EXTENSION*" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "BUFFER-WRITE-FLOAT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "+NULL-VOID+" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-UINT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-READ-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-STREAM-LENGTH" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "RESIZE-BUFFER-STREAM-NO-COPY" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
     :EXTERNALP T)
    (:NAME "BUFFER-WRITE-FROM-ARRAY-OFFSET" :PACKAGE-NAME "ELEPHANT-MEMUTIL"
     :EXTERNALP T)
    (:NAME "BUFFER-WRITE-BYTE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "MAKE-BUFFER-STREAM" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "ARRAY-OR-POINTER-CHAR" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "POINTER-INT" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-FIXNUM64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)
    (:NAME "BUFFER-WRITE-INT64" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-STREAM-SIZE" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP T)
    (:NAME "BUFFER-WRITE-INT32" :PACKAGE-NAME "ELEPHANT-MEMUTIL" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME "ELEPHANT" :FULL-NAME "ELEPHANT" :DOCUMENTATION
   "Elephant: an object-oriented database for Common Lisp with
    multiple backends for Berkeley DB, SQL and others."
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-CODE-VERSION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "The current database version supported by the code base"
     :INITIAL-VALUE "'(1 0 0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-CODE-VERSION-INT*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION "The current database version supported by the code base"
     :INITIAL-VALUE "100")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-UNMARKED-CODE-VERSION*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "If a database is opened with existing data but no version then
   we assume it's version 0.6.0"
     :INITIAL-VALUE "'(0 6 0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-PROPERTIES-LABEL*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "This is the symbol used to store properties associated with the
   database in the controller-root through the new properties interface.
   Users attempting to directly write this variable will run into an
   error"
     :INITIAL-VALUE "'ELEPHANT::*DATABASE-PROPERTIES*")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*USER-CONFIGURABLE-PARAMETERS*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'((:BERKELEY-DB-MAP-DEGREE2 ELEPHANT::*MAP-USING-DEGREE2*)
  (:BERKELEY-DB-CACHESIZE ELEPHANT::*BERKELEY-DB-CACHESIZE*)
  (:BERKELEY-DB-MAX-LOCKS ELEPHANT::*BERKELEY-DB-MAX-LOCKS*)
  (:BERKELEY-DB-MAX-OBJECTS ELEPHANT::*BERKELEY-DB-MAX-OBJECTS*)
  (:BERKELEY-DB-MAX-TRANSACTIONS ELEPHANT::*BERKELEY-DB-MAX-TRANSACTIONS*)
  (:BERKELEY-DB-VERSION ELEPHANT::*BDB-VERSION*)
  (:BERKELEY-DB-MVCC ELEPHANT::*DEFAULT-MVCC*)
  (:ENABLE-MULTI-STORE-INDEXING ELEPHANT::*ENABLE-MULTI-STORE-INDEXING*)
  (:WARN-WHEN-DROPPING-PERSISTENT-SLOTS
   ELEPHANT:*WARN-WHEN-DROPPING-PERSISTENT-SLOTS*)
  (:RETURN-NULL-ON-MISSING-INSTANCE
   ELEPHANT::*RETURN-NULL-ON-MISSING-INSTANCE*)
  (:NO-DESERIALIZATION-PACKAGE-FOUND-ACTION
   ELEPHANT::*NO-DESERIALIZATION-PACKAGE-FOUND-ACTION*))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ENABLE-MULTI-STORE-INDEXING*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION "Allow indexed class instances to reside in more than one
   data store.  Inhibits various checks and errors and allows
   the class to cache multiple index controllers.  Set by
   a user configurable parameter."
     :INITIAL-VALUE "NIL")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NONE+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :DOCUMENTATION
     "Cache specification is ignored" :INITIAL-VALUE "0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+TXN+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :DOCUMENTATION
     "Cache values for subsequent reads in a transaction.  Writes
   are write-through so any indices get updated.  This is an
   object-wide policy for all cached slot types"
     :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CHECKOUT+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "An object can be checked out and all cached slots are 
   manipulated entirely in memory.  This provides protection
   only for writes.  An object cannot be written without being
   checked out.  If someone tries to check out an object that
   is checked out, an error is flagged.  This enables critical
   sections to be defined to provide per-process isolation for
   short-term operations.  For long term checkouts, the user 
   will need to provide any needed thread isolation.  It would
   be easy to add multiple-process isolation by maintaining an
   owned state in the in-memory object so a process knew it was
   the one that did the check out and any write operations would
   assert an error."
     :INITIAL-VALUE "2")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CACHED-INSTANCE-DEFAULT-MODE*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION "Determines the global default for cache mode on
    instances.  Override with instance initarg :cache-mode"
     :INITIAL-VALUE "ELEPHANT::+NONE+")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CIRCULARITY-INITIAL-HASH-SIZE*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "This is the default size of the circularity cache used in the serializer"
     :INITIAL-VALUE "50")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MAP-USING-DEGREE2*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "This parameter enables an optimization for the Berkeley DB data store
   that allows a map operator to walk over a btree without locking all
   read data, it only locks written objects and the current object"
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BERKELEY-DB-CACHESIZE*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "This parameter controls the size of the berkeley db data store page
   cache.  This parameter can be increased by to 4GB on 32-bit machines
   and much larger on other machines.  Using the db_stat utility to identify
   cache hit frequency on your application is a good way to tune this number.
   The default is 20 megabytes specified in bytes.  If you need to specify
   Gigbyte + cache sizes, talk to the developers!  This is ignored for
   existing databases that were created with different parameters"
     :INITIAL-VALUE "10485760")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BERKELEY-DB-MAX-LOCKS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "Controls the number of locks allocated for berkeley db.  It helps to increase
   it to enable transactions to be larger.  Typically for bulk loads or large
   transactions."
     :INITIAL-VALUE "2000")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BERKELEY-DB-MAX-OBJECTS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Controls the number of locks allocated for berkeley db.  It helps to increase
   it to enable transactions to be larger.  Typically for bulk loads or large
   transactions.  See berkeley db docs 'Configuring Locking: sizing the system' 
   for more detail"
     :INITIAL-VALUE "2000")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BERKELEY-DB-MAX-TRANSACTIONS*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "Controls the number of transactions allocated for berkeley db. Especially
  MVCC operation (see below) requires a large number of transactions."
     :INITIAL-VALUE "1000")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-MVCC*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "Determines whether a BDB database is enabled for multiple version concurrency
   controller (DB_MULTIVERSION) and transactions are DB_SNAPSHOT by default.
   These can be overridden on a per-transaction basis using the :mvcc argument
   to open-store and :snapshot to with-transaction."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RESOURCED-BYTE-SPEC*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "Byte specs on CMUCL, SBCL and Allegro are conses."
     :INITIAL-VALUE "(BYTE 32 0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :DOCUMENTATION "The store controller which persistent objects talk to."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CURRENT-TRANSACTION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "The transaction which is currently in effect."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-RETRIES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :DOCUMENTATION
     "The number of times the with-transaction macros should retry a
   transaction before the expression passes the error up the stack"
     :INITIAL-VALUE "200")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SERIALIZER-MARK-LIST*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "A placeholder for serializers to push
   new oids to mark.  Should be bound dynamically"
     :INITIAL-VALUE "'ERROR")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SERIALIZER-INST-LIST*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "A placeholder for serializers to push
   new objects to mark.  Should be bound dynamically"
     :INITIAL-VALUE "'ERROR")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NO-DESERIALIZATION-PACKAGE-FOUND-ACTION*" :PACKAGE-NAME
      "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "Issue a warning when deserializing a symbol from a package that is
   not created."
     :INITIAL-VALUE ":WARN")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WARN-ON-MANUAL-CLASS-FINALIZATION*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP T)
     :DOCUMENTATION "Issue a printed warnings when the class mechanism has
   to finalize a class to access indexing information"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIGRATE-MESSAGES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "Print information during migrate to update user on ongoing progress"
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIGRATE-VERBOSE*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "Print more than a simple status line" :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WARN-WHEN-DROPPING-PERSISTENT-SLOTS*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP T)
     :DOCUMENTATION "Signal a continuable error when the user is about to delete
  a bunch of persistent slot values on class redefinition. This
  is nil by default to stop annoying message and confusing new
  users, but it will help keep users from shooting themselves
  in the foot and losing significant amounts of data during
  debugging and development. It can be disabled if change-class
  is used a bunch in the application rather than just defclass
  changes interactively.

  Note that the new class definition will take place even if
  you abort the continuable error; only the removal of the
  slots in the database is prevented. You can access them again
  if you redefine your class once more."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RETURN-NULL-ON-MISSING-INSTANCE*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION "During instance recreation, references to missing instances
   simply return null instead of signaling an error"
     :INITIAL-VALUE "T")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-INHIBITED-WARNINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EXECUTE-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "TXN-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "This is an interface to the backend's transaction function.  The
    body should be executed in a dynamic environment that protects against
    non-local exist, provides ACID properties for DB operations within the
    body and properly binds any relevant parameters.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-TRANSACTION-RECORD" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TXN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PRIOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Backends must use this to assign values to *current-transaction* binding")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSACTION-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TXNREC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get the store that owns the transaction from a transaction record")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSACTION-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TXNREC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get the backend-specific transaction object")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSACTION-PRIOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TXNREC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSACTION-OBJECT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TXNREC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRIOR-OWNED-TXN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PARENT-TXN-REC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Search for a prior txn owned by this store")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OWNED-TXN-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "For debugging")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEYARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
       ((:NAME "PARENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*CURRENT-TRANSACTION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
          NIL)))
       ((:NAME "RETRIES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*DEFAULT-RETRIES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
       (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Execute a body with a transaction in place.  On success,
   the transaction is committed.  Otherwise, the transaction is
   aborted.  If the body deadlocks, the body is re-executed in
   a new transaction, retrying a fixed number of iterations.
   If nested, the backend must support nested transactions.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ENSURE-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEYARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
       ((:NAME "PARENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*CURRENT-TRANSACTION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
          NIL)))
       ((:NAME "RETRIES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*DEFAULT-RETRIES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
       (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Execute the body with the existing transaction, or a new transaction if
   none is currently running.  This allows sequences of database actions to 
   be run atomically whether there is or is not an existing transaction 
   (rather than relying on auto-commit).  with-transaction nests transactions
   where as ensure-transaction can be part of an enclosing, flat transaction")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-BATCH-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "BATCH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TXN-OPTIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Perform a set of DB operations over a list of elements in batches of size 'size'.
   Pass specific transaction options after the list reference.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONTROLLER-START-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Start an elephant transaction")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONTROLLER-COMMIT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Commit an elephant transaction")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONTROLLER-ABORT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Abort an elephant transaction")
    (:TYPE :CLASS :SYMBOL
     (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "Keep a doubly linked list of schemas in the db"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SUCCESSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-SUCCESSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PREDECESSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-PREDECESSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SLOT-RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-SLOT-RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :STRUCT :SYMBOL
     (:NAME "SLOT-REC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SLOT-REC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "TYPE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM20" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "NAME" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM21" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "ARGS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM22" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOT-REC-EQ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "REC1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REC2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INDEXED-SLOT-REC-EQ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REC1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REC2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-SLOT-RECS-BY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLASS-INSTANCE-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compute a schema representation from an instance of persistent-metaclass")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-TRANSIENT-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SLOT-DEF-TYPE-TAGS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'((:PERSISTENT ELEPHANT::PERSISTENT-EFFECTIVE-SLOT-DEFINITION)
  (:INDEXED ELEPHANT::INDEXED-EFFECTIVE-SLOT-DEFINITION)
  (:DERIVED ELEPHANT::DERIVED-INDEX-EFFECTIVE-SLOT-DEFINITION)
  (:CACHED ELEPHANT::CACHED-EFFECTIVE-SLOT-DEFINITION)
  (:SET-VALUED ELEPHANT::SET-VALUED-EFFECTIVE-SLOT-DEFINITION)
  (:ASSOCIATION ELEPHANT::ASSOCIATION-EFFECTIVE-SLOT-DEFINITION))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-SLOT-RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SLOT-TAG-MAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*SLOT-DEF-TYPE-TAGS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION
     "For each slot, compute a serializable record of the important info 
   in that slot")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-TRANSIENT-SLOT-RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-SLOT-RECS-BY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-DEF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Default slot computation.  Capture the name and type tag for the definition")
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-SLOT-RECS-BY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "INDEXED" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "SLOT-DEF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS-OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Special handling for hierarchical indexing, capture the base class name of the index")
    (:TYPE :CLASS :SYMBOL
     (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "UPGRADE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-UPGRADE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "A form or functionname that is to be called
                               when upgrading from the prior version to the current")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "UPGRADED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SCHEMA-UPGRADED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "SCHEMA-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Keep track of changes to schemas classes without having
                            a recursive schema problem so we can run an upgrade
                            over the schema DB when necessary")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOGICAL-COPY-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SCH1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SCH2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCH1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SCH2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SCH1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      ((:NAME "SCH2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION "Are the two schemas functionally equivalent?")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYMBOL<" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SYM1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SYM2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SORTED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SCHEMA-DIFF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NEW" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a list of lists :add, :rem, :change with one or two slot-recs")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIFF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "DIFF-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIFF-RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "DIFF-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DEFAULT-CLASS-CONSTRUCTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Given a schema, construct a class overriding information as necessary
   :subclasses - a list of subclasses for this schema")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOT-DEFS-FROM-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Need to handle default-initargs and other options to defclass")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-READER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OVERRIDE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TEMPLATE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-WRITER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OVERRIDE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TEMPLATE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFAULT-TEMPLATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Abstract superclass for all persistent classes (common
    to both user-defined classes and Elephant-defined objects such as collections.)"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION "All persistent objects have an oid")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DB-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION
       "Persistent objects use a spec pointer to identify which store
                         they are connected to")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "This is useful for debugging and being clear about what is persistent and what is not")
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Metaclass for persistent classes.  Use this metaclass to
    define persistent classes.  All slots are persistent by
    default; use the :transient flag otherwise.  Slots can also
    be indexed for by-value retrieval."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "The code master schema")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%STORE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%STORE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%CLASS-INDEXING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%CLASS-INDEXING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%CACHE-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%CACHE-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%SLOTS-WERE-RECOMPUTED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "%SLOTS-WERE-RECOMPUTED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-STORE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-STORE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CLASS-INDEXING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CACHE-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HAS-CLASS-SCHEMA-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HAS-CLASS-CONTROLLER-SCHEMA-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CLASS-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-CLASS-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-CLASS-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CLASS-INDEXING-ENABLED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIGRATE-CLASS-INDEX-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFPCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PARENTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASS-OPTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Shorthand for defining persistent objects.  Wraps the main
   class definition with persistent-metaclass")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-PERSISTENT-METACLASS-ARGUMENT" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS-OPTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TRIGGERS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DERIVED-SLOT-TRIGGERS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "MCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERSISTENT-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERSISTENT-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALL-PERSISTENT-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALL-SINGLE-VALUED-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CACHED-SLOT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "CACHED-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CACHED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TRIGGERS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DERIVED-SLOT-TRIGGERS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CACHED-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CACHED-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "TRANSIENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TRANSIENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "TRANSIENT-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "TRANSIENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "TRANSIENT-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STANDARD-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP"
       :EXTERNALP T)
      (:NAME "TRANSIENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "TRANSIENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "TRANSIENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRANSIENT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-SLOT-DEFINITION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-TRANSIENT-CHAIN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEFINITIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSIENT-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSIENT-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDEXED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "INDEXED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INHERIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "INHERIT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "INDEXED-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "INDEXED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "INDEXED-SLOT-INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Alist of actual indices by store")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BASE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "INDEXED-SLOT-BASE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The base class to use as an index")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INDEXED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-SLOT-DEF-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL))
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-SLOT-DEF-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL))
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CLEAR-SLOT-DEF-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL))
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INDEXED-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INDEXED-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "DERIVED-INDEX-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DERIVED-FN-REF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "DERIVED-FN-REF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SLOT-DEPS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DERIVED-SLOT-DEPS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "DERIVED-INDEX-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "INDEXED-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "DERIVED-INDEX-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "DERIVED-INDEX-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "INDEXED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "DERIVED-INDEX-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DERIVED-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "DERIVED-INDEX-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DERIVED-INDEX-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPILE-DERIVED-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "REF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GEN-DERIVED-SYM-WRAPPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a closure to handle errors in the derived index function")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GEN-DERIVED-FN-WRAPPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "COMPILED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a closure to handle errors in the derived index function")
    (:TYPE :CLASS :SYMBOL
     (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SET-VALUED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "SET-VALUED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "SET-VALUED-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "SET-VALUED-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-VALUED-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-VALUED-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ASSOC" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       ((:NAME "ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INHERIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "INHERIT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "M2M" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "MANY-TO-MANY-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "ASSOCIATION-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-DIRECT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "ASSOCIATION-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
       :EXTERNALP NIL)
      (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       ((:NAME "ASSOCIATION-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BASE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ASSOCIATION-SLOT-BASE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The base class to use as an index")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ASSOCIATION-SLOT-INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Alist of actual indices by store")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "FOREIGN-CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "FOREIGN-SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       ((:NAME "FOREIGN-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Direct pointer to foreign class; late binding")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATION-END-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATION-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATION-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATION-END-SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-ASSOCIATION-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-SLOT-DEF-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-EFFECTIVE-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL))
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Since endpoints of an association implement an index we should be able to perform
   inverted-index relation functions on them directly")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-ASSOCIATION-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-ASSOCIATION-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "VALIDATE-SUPERCLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SUPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Persistent classes may inherit from ordinary classes.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "VALIDATE-SUPERCLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SUPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Ordinary classes may NOT inherit from persistent classes.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-ALLOCATION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-DEFINITION-ALLOCATION" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "BIND-STANDARD-INIT-ARGUMENTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DIRECT-SLOT-DEFINITION-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Checks for the transient tag (and the allocation type)
   and chooses persistent or transient slot definitions.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "EFFECTIVE-SLOT-DEFINITION-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Chooses the persistent or transient effective slot
definition class depending on the keyword.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" :PACKAGE-NAME "SB-PCL"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-DEFINITIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-CLASS-FOR-DIRECT-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-DIRECT-SLOT-DEF-BY-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-SLOT-DEF-BY-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-SLOT-DEFS-BY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BY-SUBTYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-SLOT-DEF-NAMES-BY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BY-SUBTYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COUNT-TRUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEBUG-SI*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Each persistent instance has an oid and a home controller spec")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIAL-PERSISTENT-SETUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGISTER-NEW-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-VALID-STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-COLLECTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Abstract superclass of all collection types." :SLOT-LIST
     NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "Superclass for all user-defined persistent classes.  This is
    automatically inherited if you use the persistent-metaclass
    metaclass.  This allows specialization of functions for user
    objects that would not be appropriate for Elephant objects
    such as persistent collections"
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DIRECT-SUPERCLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DIRECT-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Ensures we inherit from persistent-object prior to initializing.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-CLASS-INHERITS-FROM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-CLASSNAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DIRECT-SUPERCLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUPERCLASS-MEMBER-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Searches superclass list for class")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HAS-CACHED-SLOT-SPECIFICATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "DIRECT-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WARN-ON-REINITIALIZATION-DATA-LOSS" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Warnings at class def time:
   - set-valued/assoc (warn!)
   - persistent/indexed/cached (warn?)
   - derived hints?
   Be nice to be able to restore the slots rather than just
   avoid updating")
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-SLOTS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-REFRESH-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Call ensure-schema, but only as needed (if slots were recomputed) and 
go through subclasses recursively (required for current versions of SBCL and CCL, but
not AllegroCL and Lispworks")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE-INHERITANCE" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENSURE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENSURE-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Constructs the metaclass schema when the class hierarchy is valid")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-DERIVED-INDEX-TRIGGERS" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "E-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-SLOTS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Derived index triggers can be computed only after we have all effective slot definitions")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BIND-SLOT-DEFS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Bindings contain name, accessor pairs.  Extract 
   slot-definitions into variable name using accessor and
   filter by the list of valid slots")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Helper function for bind-slot-defs")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Ensure instance creation is inside a transaction, huge (5x) performance impact per object")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Initializes the persistent slots via initargs or forms.
This seems to be necessary because it is typical for
implementations to optimize setting the slots via initforms
and initargs in such a way that slot-value-using-class et al
aren't used.  We also handle writing any indices after the 
class is fully initialized.  Calls the next method for the transient 
slots.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-PERSISTENT-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PERSISTENT-SLOT-INITS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJECT-EXISTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-SET-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SET-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-FROM-INITARG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-INIT-SLOTNAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ACCESSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WARN-ABOUT-DROPPED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RECREATE-INSTANCE-USING-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Implement a subset of the make-instance functionality to avoid initialize-instance
   calls after the initial creation time")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-COLLECTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPDATE-INSTANCE-FOR-REDEFINED-CLASS" :PACKAGE-NAME "COMMON-LISP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "ADDED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DISCARDED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PROPERTY-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "NEW-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPDATE-INSTANCE-FOR-DIFFERENT-CLASS" :PACKAGE-NAME "COMMON-LISP"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NEW-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Get the slot value from the database.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Set the slot value in the database.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-BOUNDP-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Checks if the slot exists in the database.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-BOUNDP-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Checks if the slot exists in the database.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Removes the slot value from the database.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VALID-PERSISTENT-REFERENCE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Ensures that object can be written as a reference into store sc")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIGNAL-CROSS-REFERENCE-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Adds a special value slot to store checkout state"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PCHECKED-OUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "PCHECKED-OUT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CHECKED-OUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CHECKED-OUT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL))
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FROM-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "MAKE-CACHED-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "MAKE-CACHED-INSTANCE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL))
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CACHE-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Make a values-weak hash table: when a value has been
collected, so are the keys.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get a value from a cache-table.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-FINALIZER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMCACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SETF-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Set a value in a cache-table.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "IN-GC-MARK-CONTEXT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Establish binding for serializer to push instances and oids
   Walk the objects when the form exists if necessary")
    (:TYPE :MACRO :SYMBOL
     (:NAME "GC-MARK-NEW-WRITE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "INST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-NEW-WRITES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OIDS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Mark newly written objects, walking if not already marked")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FROB" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Generic interface to serialization that dispatches based on the 
   current Elephant version")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OID-ONLY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Generic interface to serialization that dispatches based on the 
   current Elephant version")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ELEPHANT-DESERIALIZATION-ERROR-REPORT" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "STRUCT-CONSTRUCTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Called to get the constructor name for a struct class.  Users
                  should overload this when they want to serialize non-standard
                  constructor names.  The default constructor make-xxx will work by 
                  default.  The argument is an eql style type: i.e. of type (eql 'my-struct)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "STRUCT-CONSTRUCTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-TO-BASE64-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Encode object using the store controller's serializer format,
   but encoded in a base64")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-BUFFER-TO-BASE64-STRING" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-FROM-BASE64-STRING" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Decode a base64-string using the store controller's deserialize method")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-BUFFER-FROM-BASE64-STRING" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+RESERVED-DBINFO+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "240")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ELEPHANT-VERSION+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ELEPHANT-SERIALIZER-VERSION+" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "2")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-DATABASE-VERSION-KEY" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Given a buffer-stream, encode a key indicating the version using
   the constant +elephant-version+")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-DATABASE-VERSION-VALUE" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Serializes a list containing three integers to the buffer stream bs")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-DATABASE-VERSION-VALUE" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Deserializes the 3 integer list from buffer stream bs")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-DATABASE-SERIALIZER-VERSION-KEY" :PACKAGE-NAME
      "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-DATABASE-SERIALIZER-VERSION-VALUE" :PACKAGE-NAME
      "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-DATABASE-SERIALIZER-VERSION-VALUE" :PACKAGE-NAME
      "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-RESERVED-TAG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-SYSTEM-TAG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BYTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-SYSTEM-INTEGER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-SYSTEM-INTEGER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "BS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOTS-AND-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "O" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "List of slot names followed by values for object")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRUCT-SLOTS-AND-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "List of slot names followed by values for structure object")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "ARRAY-TYPE-TO-BYTE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST 'EQUALP)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "BYTE-TO-ARRAY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST 'EQUALP)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE-NUM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Define a type order; no guarantee that backend and front-end match
   so we can't iterate over types, just all members of a give type class
   (i.e. numbers, etc)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE<=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJ2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE<" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJ2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJ2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ARRAY-TYPE=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "T1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "T2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ARRAY-TYPE-FROM-BYTE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "B" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BYTE-FROM-ARRAY-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INT-BYTE-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "POSITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Shared byte-spec peformance hack; not thread safe so removed
   from use for serializer2")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-DATA-STORES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "Tells the main elephant code the tag used in a store spec to
   refer to a given data store.  The second argument is an asdf
   dependency list.  Entries have the form of 
  (data-store-type-tag asdf-depends-list"
     :INITIAL-VALUE
     "'((:BDB (:ELE-BDB)) (:CLP (:ELE-CLP)) (:CLSQL (:ELE-CLSQL)) (:PREVALENCE NIL)
  (:POSTMODERN (:ELE-POSTMODERN)))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-CONTROLLER-INIT*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGISTER-DATA-STORE-CON-INIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONTROLLER-INIT-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data stores must call this function during the
   loading/compilation process to register their initialization
   function for the tag name in *elephant-data-stores*.  The
   initialization function returns a fresh instance of the
   data stores store-controller subclass")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOOKUP-DATA-STORE-CON-INIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DBCONNECTION-SPEC*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DBCONNECTION-LOCK*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ELEPHANT-UTILS:ELE-MAKE-LOCK)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-CON" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "This is used to find and validate the connection spec
   maintained for in-memory persistent objects.  Should
   we re-open the controller from the spec if it's not
   cached?  That might be dangerous so for now we error")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIGNAL-CONTROLLER-LOST-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOOKUP-CON-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FAST-LOOKUP-CON-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOW-LOOKUP-CON-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-CON-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DELETE-CON-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CON" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "This is used by open-store to fetch or open a controller.
   This maintains the dbconnection-spec table so should be
   the only point of entry for getting access to controllers
   from specs.  Get-con is used to validate connections and
   reopen if necessary and perhaps these two should be combined
   at some point")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BUILD-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Actually construct the controller & load dependencies")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOAD-DATA-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SATISFY-ASDF-DEPENDENCIES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "DEP-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-USER-CONFIGURATION-PARAMETER" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "This function pulls a value from the key-value pairs stored in
   my-config.sexp so data stores can have their own pairs for appropriate
   customization after loading.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-USER-PARAMETERS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Superclass for the data store controller, the main interface
    to any book-keeping, references to DB handles, the instance
    cache, btree table creation, counters, locks, the roots (for
    garbage collection,) et cetera.  Behavior is shared between
    the superclass and subclasses.  See slot documentation for
    details."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONTROLLER-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Data store initialization functions are
	 expected to initialize :spec on the call to
	 make-instance")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OPENING-ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-OPENING-ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "List of keyword arguments passed to the
         OPEN-STORE function when opening (or re-opening) a controller.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DB-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONTROLLER-DATABASE-VERSION" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS
       ((:NAME "CONTROLLER-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "This is an instance of the data store
	 persistent btree.  It should have an OID that is fixed in
	 the code and does not change between sessions.  Usually
	 it this is something like 0, 1 or -1")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTROLLER-SCHEMA-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION "Schema id to schema database table")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-NAME-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTROLLER-SCHEMA-NAME-INDEX" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "Schema name to schema database table")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-SCHEMA-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "This is a cache of class schemas stored in the database indexed by classid")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-SCHEMA-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Maintains a list of all classes that have a cached schema value so we can shutdown cleanly")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCHEMA-CACHE-LOCK" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-SCHEMA-CACHE-LOCK" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Protection for updates to the cache from multiple threads.  
                                        Do not override.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INSTANCE-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTROLLER-INSTANCE-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION "Contains btree of oid to class ids")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INSTANCE-CLASS-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTROLLER-INSTANCE-CLASS-INDEX" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "A reverse map of class id to oid")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INSTANCE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-INSTANCE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "This is an instance cache and part of the
                    metaclass protocol.  Data stores should not
                    override the default behavior.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INSTANCE-CACHE-LOCK" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-INSTANCE-CACHE-LOCK" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Protection for updates to
			the cache from multiple threads.  Do not
			override.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INDEX-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "CONTROLLER-INDEX-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION
       "This is another root for class indexing that is
	       also a data store specific persistent btree instance
	       with a unique OID that persists between sessions.
               No cache is needed because we cache in the class slots.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERIALIZER-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-SERIALIZER-VERSION" :PACKAGE-NAME "ELEPHANT"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Governs the default
		       behavior regarding which serializer
		       version the current elephant core is
		       using.  Data stores can override by creating
		       a method on initialize-serializer.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONTROLLER-SERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Accessed by elephant::serialize to
	      get the entry point to the default serializer or to
	      a data store specific serializer")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERIALIZE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-SERIALIZE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Accessed by elephant::serialize to
	      get the entry point to the default serializer or to
	      a data store specific serializer")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DESERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONTROLLER-DESERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Contains the entry point for the
		specific serializer to be called by
		elephant::deserialize")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DESERIALIZE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-DESERIALIZE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Contains the entry point for the
		specific serializer to be called by
		elephant::deserialize")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GC-MARKING-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-MARKING-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Used by the online GC to keep
                 track of whether we're in the mark phase of a
                 mark and sweep pass")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GC-MARK-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-MARK-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "During a mark pass, we need to
                mark any objects we write to the store.  This
                maintains a local cache so we don't do redundant
                writes and increase contention")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GC-MAX-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CONTROLLER-MAX-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "We conservatively mark any 
               oid created after the GC mark pass starts")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GC-MARK-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CONTROLLER-MARK-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "This keeps track of the mark
                  table used by the GC during the GC run")))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCHEMA-CLASSNAME-KEYFORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INSTANCE-CIDX-KEYFORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CIDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REGISTER-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "When creating an instance for the first time, write it to the persistent
   instance table using the controller instance for its class")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLASS-SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-INSTANCE-SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get the class object using the oid or using the provided classname")
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-SCHEMA-ID-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get the class given the schema id")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIGNAL-MISSING-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONTROLLER-RECREATE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Called by the deserializer to return an instance")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CACHE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Cache a persistent object with the controller.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CACHED-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get a cached instance, or instantiate!")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNCACHE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FLUSH-INSTANCE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Reset the instance cache (flush object lookups).  Useful 
   for testing.  Does not reclaim existing objects so there
   will be duplicate instances with identical functionality")
    (:TYPE :METHOD :SYMBOL
     (:NAME "OID->SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DEFAULT-CLASS-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BASE-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "A method implemented by the store controller for providing
   fixed class ids for basic btree derivative types")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DEFAULT-CLASS-ID-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "A method implemented by the store controller which provides
   the type associated with a default id or nil if the id does not match")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "RESERVED-OID-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Is this OID reserved by the controller? GC doesn't touch")
    (:TYPE :METHOD :SYMBOL
     (:NAME "LOOKUP-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Get the latest db class schema from caches, etc.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Find the db class schema by schema id. CLASS needs to be supplied
  if the class object isn't registered via (SETF FIND-CLASS) yet.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CREATE-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "We don't have a cached version, so create a new one")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPDATE-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "UPDATE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Use this to update the schema version that is on store and in 
   all the various caches")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Insert a new schema into the controller table")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Remove a schema from the controller table; uncache separately")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNCACHE-CONTROLLER-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CURRENT-DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-DB-SCHEMAS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return schemas ordered oldest to youngest (ascending cids)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DATABASE-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data stores implement this to store the serializer version.
                   The protocol requires that data stores report their database
                   version.  On new database creation, the database is written with the
                   *elephant-code-version* so that is returned by database-version.
                   If a legacy database does not have a version according to the method
                   then it should return nil")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DATABASE-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Default version assumption for unmarked databases is 0.6.0.
   It is possible to check for 0.5.0 databases, but it is not implemented 
   now due to the low (none?) number of users still on 0.5.0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRIOR-VERSION-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "V1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Is v1 an equal or earlier version than v2")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ELEPHANT-UPGRADE-TABLE*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(((1 0 0) (0 6 0)) ((1 0 0) (0 9 0)) ((1 0 0) (0 9 1)) ((1 0 0) (0 9 2)))")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UP-TO-DATE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADABLE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Determine if this store can be brought up to date using the upgrade function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "UPGRADE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Given an open store controller from a prior version, 
                   open a new store specified by spec and migrate the
                   data from the original store to the new one, upgrading
                   it to the latest version")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "TARGET-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-SERIALIZER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Establish serializer version on controller startup.  Data stores call this before
   they need the serializer to be valid and after they enable their database-version
   call.  If the data store shadows this, it has to keep track of serializer versions 
   associated with the database version that is opened.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ALWAYS-CONVERT*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LEGACY-SYMBOL-CONVERSIONS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(((\"elephant\" . \"bdb-btree\") \"sleepycat\" . \"bdb-btree\")
  ((\"elephant\" . \"bdb-indexed-btree\") \"sleepycat\" . \"bdb-indexed-btree\")
  ((\"elephant\" . \"bdb-btree-index\") \"sleepycat\" . \"bdb-btree-index\"))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-SYMBOL-CONVERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OLD-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-PACKAGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-PACKAGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Users can specify specific symbol conversions on upgrade prior to 
   migrating old databases")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-LEGACY-SYMBOLS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PACKAGE-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LEGACY-PACKAGE-CONVERSIONS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'((\"ELEPHANT-CLSQL\" . \"DB-CLSQL\") (\"SLEEPYCAT\" . \"DB-BDB\"))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-PACKAGE-CONVERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OLD-PACKAGE-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-PACKAGE-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Users can specify wholesale package name conversions on upgrade 
   prior to migrating old databases")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-LEGACY-PACKAGE-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PACKAGE-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-LEGACY-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PACKAGE-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OLD-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSLATE-AND-INTERN-SYMBOL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SYMBOL-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PACKAGE-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Service for the serializer to translate any renamed packages or symbols
   and then intern the decoded symbol.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "OPEN-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RECOVER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "RECOVER-FATAL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "THREAD" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Opens the underlying environment and all the necessary
database tables.  Different data stores may use different keys so
all methods should &allow-other-keys.  There are three standard
keywords: :recover, :recover-fatal and :thread.  Recover means
that recovery should be checked for or performed on startup.
Recover fatal means a full rebuild from log files is requested.
Thread merely indicates to the data store that it is a threaded
application and any steps that need to be taken (for example
transaction implementation) are taken.  :thread is usually
true.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CLOSE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Close the db handles and environment.  Should be in a state
   where lisp could be shut down without causing an inconsistent
   state in the db.  Also, the object could be used by
   open-controller to reopen the database")
    (:TYPE :METHOD :SYMBOL
     (:NAME "OPEN-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CLOSE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONNECTION-IS-INDEED-OPEN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Validate the controller and the db that it is connected to")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONNECTION-IS-INDEED-OPEN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONNECTION-IS-INDEED-OPEN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NEXT-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Provides a persistent source of unique id's")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NEXT-CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Provides a unique class schema id's")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "OPTIMIZE-LAYOUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "If supported, speed up the index and allocation by freeing up
                   any available storage and return it to the free list.  See the
                   methods of data stores to determine what options are valid. Supported
                   both on stores (all btrees and persistent slots) and specific btrees")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PERSISTENT-SLOT-READER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OIDS-ONLY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data store specific slot reader function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PERSISTENT-SLOT-WRITER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data store specific slot writer function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PERSISTENT-SLOT-BOUNDP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data store specific slot bound test function")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PERSISTENT-SLOT-MAKUNBOUND" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Data store specific slot makunbound handler")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OPEN-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Conveniently open a store controller.  Set *store-controller* to the new controller
   unless it is already set (opening a second controller means you must keep track of
   controllers yourself.  *store-controller* is a convenience variable for single-store
   applications or single-store per thread apps.  Multi-store apps should either confine
   their *store-controller* to a given dynamic context or wrap each store-specific op in
   a transaction using with or ensure transaction.  Returns the opened store controller.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLOSE-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Conveniently close the store controller.  If you pass a custom store controller, you are responsible for setting it to NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLOSE-ALL-STORES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-OPEN-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Executes the body with an open controller,
   unconditionally closing the controller on exit.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-TO-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Add an arbitrary persistent thing to the root, so you can
   retrieve it in a later session.  Anything referenced by an
   object added to the root is considered reachable and thus live")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-FROM-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Get the value associated with key from the root.  Returns two
   values, the value, or nil, and a boolean indicating whether a
   value was found or not (so you know if nil is a value or an
   indication of non-presence)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ROOT-EXISTSP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Test whether a given key is instantiated in the root")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-FROM-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Remove something from the root by the key value")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Takes a function of two arguments, key and value, to map over
   all key-value pairs in the root")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "drop-instance reclaims persistent object storage by unbinding
   all persistent slot values.  It can also helps catch errors
   where an object should be unreachable, but a reference still
   exists elsewhere in the DB.  On access, the unbound slots
   should flag an error in the application program.  IMPORTANT:
   this function does not clear any serialized references still in the db.  
   Need a migration or GC for that!  drop-instances is the user-facing call 
   as it implements the proper behavior for indexed classes")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DROP-INSTANCE-SEMANTICS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Bound when dropping an instances, relaxes constraints etc."
     :INITIAL-VALUE "NIL")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "INST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "INST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DROP-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "TXN-SIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) 500))
     :DOCUMENTATION "Removes a list of persistent objects from all class indices
   and unbinds any persistent slot values associated with those instances")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DROP-INSTANCE-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A helper function for drop-instance, that deletes the storage of 
   persistent slots of instance from the db")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DROPPED-INSTANCE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "An instance has not been dropped if it is in the instance
   table and has a valid class id")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RESTRICTED-PROPERTIES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION "Properties that are not user manipulable" :INITIAL-VALUE
     "'NIL")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONTROLLER-PROPERTIES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-ELE-PROPERTY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PROPERTY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-ELE-PROPERTY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PROPERTY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LAZY-DB-INSTANCE-UPGRADING*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Only upgrade instances when loaded.  This may require a chain of 
   transformations and delay reclimation of space, but it amortizes
   upgrade costs over time.  Not compatible with valid, up-to-date 
   indices!"
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LAZY-MEMORY-INSTANCE-UPGRADING*" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "Walk through a given store's memory cache on class redefinition by default.
   Setting this variable inhibits calling
   update-instance-for-redefined-class for any instances that
   have been invalidated by the MOP"
     :INITIAL-VALUE "NIL")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SYNCHRONIZE-STORE-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASS-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Synchronize all schemas in the stores to in-memory classes.
   This also populates the schema cache.  It is meant to be
   called when a controller is opened.  If a class and db schema
   mismatch, synchronize the class then update all versions of
   the class to the new schema. If CLASS-LIST is given only upgrade
   the classes named/given therein. Every symbol in CLASS-LIST must
   name a currently defined class.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SYNCHRONIZE-STORES-FOR-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Synchronize all stores connected to a given class.  Meant to be
   called during class redefinition to keep all DB instances in sync.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SYNCHRONIZE-STORE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Synchronizing a store means adding/removing indices, upgrading
   the default schema if necessary, etc.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-CLASS-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DIFF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ADD" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "At the store level, we'll only need to deal with structures that are at the
   class level, not managed in the individual instance")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-CLASS-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DIFF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "REM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Drop index and association storage on upgrade.  Loss of data for associations should
   be flagged during the redefinition.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-CLASS-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DIFF-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CHANGE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "For now, we can effectively remove and add at the store level")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-ALL-MEMORY-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Touch each instance in memory to force update-instance-for-redefined class
   to be called on classes that were just redefined.  This in turn calls 
   upgrade-instance.  This should be called after a redefinition.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOOP-HASHTAB-NEXT-141" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-ALL-DB-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "This does a scan and upgrades each instance of the class referred to
   by the class schema.  If there is a predecessor class in the database,
   its instances are upgraded to the current.  If the db-schema and class
   schema do not match (i.e. we are connecting to a store) then go ahead and
   run synchronize-store-class to upgrade class-level info like indices")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-DB-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "NEW-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      ((:NAME "OLD-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DB-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "OLD-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Upgrade a database instance from the old-schema to the new-schema.
   This does mean loading it into memory (for now)!")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CHANGE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Handle changes in class type")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "REM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Handle slot removal and cleanup of values, such as sets")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UPGRADE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ADD" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Not needed, new slots are initialized above")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-NEW-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DIFF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-DB-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Change a database instance from one schema & class to another
   These are different objects with the same oid")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CHANGE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Handle changes in class type")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "REM" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Handle slot removal and cleanup of values, such as sets")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CHANGE-INSTANCE-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PREVIOUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ADD" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "RECS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Not needed, new slots are initialized above")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-SCHEMA-CHANGE-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-SCHEMA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNINDEX-SLOT-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLD-BASE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-CLASS-SCHEMA-STATUS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Always write local slot value; maybe write persistent value if no caching or write-through")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-BOUNDP-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Checks if the slot exists in the database.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Removes the slot value from the database.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CACHING-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CACHING-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CACHEABLE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-CHECKED-OUT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-CHECKOUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Set the checkout state and refresh the memory slots")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-SYNC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Synchronize the slots to the database without a checkin")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAYBE-PERSISTENT-SYNC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAYBE-PERSISTENT-SYNC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Synchronize the slots to the database without a checkin")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-CHECKIN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Flush the slot states to the database and release the checkout state.
   NOTE: Can this operation fail under concurrency if user enforces 
   single writer - e.g. checkin parallel with access, checkin parallel
   with attempted checkout?")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PERSISTENT-CHECKOUT-CANCEL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CACHEABLE-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-PERSISTENT-CHECKOUTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Make sure objects are checked out in the body and are
   checked back in when the form returns.  This acts as
   a guard by ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REFRESH-CACHED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Assumes checkout mode is t so side effects are only
   in memory")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLUSH-CACHED-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Assumes object is checked out")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Constructs a new BTree instance for use by the user.  Each backend
   returns its own internal type as appropriate and ensures that the 
   btree is associated with the store-controller that created it.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Construct a btree of the appropriate type corresponding to this store-controller.")
    (:TYPE :CLASS :SYMBOL (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-COLLECTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "A hash-table like interface to a BTree, which stores things 
    in a semi-ordered fashion."
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get a value from a Btree.")
    (:TYPE :GENERIC :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "GET-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Put a key / value pair into a BTree.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "REMOVE-KV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Remove a key / value pair from a BTree.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EXISTSP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Test existence of a key / value pair in a BTree")
    (:TYPE :METHOD :SYMBOL
     (:NAME "OPTIMIZE-LAYOUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "The standard method for reclaiming storage of persistent objects")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DROP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Delete all key-value pairs from the btree and
   render it an invalid object in the data store")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Constructs a new indexed BTree instance for use by the user.
   Each backend returns its own internal type as appropriate and
   ensures that the btree is associated with the store-controller
   that created it.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Construct a btree of the appropriate type corresponding to this store-controller.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST ((:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "A BTree which supports secondary indices." :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ADD-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "POPULATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Add a secondary index.  The indices are stored in an eq
hash-table, so the index-name should be a symbol.  key-form
should be a symbol naming a function, a function call form
eg '(create-index 3) or a lambda expression -- 
actual functions aren't supported.
Lambda expresssions are converted to functions through compile
and function call forms are transformed applying
the first element of the list to the rest of the list.
The function should take 3 arguments: the secondary DB, primary
key and value, and return two values: a boolean indicating
whether to index this key / value, and the secondary key if
so.  If populate = t it will fill in secondary keys for
existing primary entries (may be expensive!)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get a named index.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "REMOVE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Remove a named index.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAP-INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Calls a two input function with the name and 
   btree-index object of all secondary indices in the btree")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENSURE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "IBT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "IDXNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "POPULATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PRIMARY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "Construct a btree of the appropriate type corresponding to this store-controller.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Secondary index to an indexed-btree." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PRIMARY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :ACCESSORS NIL
       :READERS ((:NAME "PRIMARY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :ACCESSORS NIL
       :READERS ((:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "KEY-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :ACCESSORS
       ((:NAME "KEY-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FUNCTION<-KEYFORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHARED-INITIALIZE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-PRIMARY-KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get the primary key from a secondary key.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "GET-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Puts are not allowed on secondary indices.  Try adding to
the primary.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-KV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Remove a key / value from the PRIMARY by a secondary
lookup, updating ALL other secondary indices.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST ((:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Construct a btree of the appropriate type corresponding to this store-controller.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "A cursor for traversing (primary) BTrees." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CURSOR-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INITIALIZED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "CURSOR-INITIALIZED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Predicate indicating whether
the btree in question is initialized or not.  Initialized means
that the cursor has a legitimate position, not that any
initialization action has been taken.  The implementors of this
abstract class should make sure that happens under the
sheets...  Cursors are initialized when you invoke an operation
that sets them to something (such as cursor-first), and are
uninitialized if you move them in such a way that they no longer
have a legimtimate value.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :ACCESSORS
       ((:NAME "CURSOR-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Construct a cursor for traversing BTrees.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-SIMPLE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Allow users to walk secondary indices and only 
                   get back primary keys rather than associated 
                   primary values")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-CLOSE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Close the cursor.  Make sure to close cursors before the
enclosing transaction is closed!")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-DUPLICATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Duplicate a cursor.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Get the key / value at the cursor position.  Returns
has-pair key value, where has-pair is a boolean indicating
there was a pair.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-FIRST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Move the cursor to the beginning of the BTree, returning
has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-LAST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Move the cursor to the end of the BTree, returning
has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-NEXT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Advance the cursor, returning has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PREV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Move the cursor back, returning has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Move the cursor to a particular key, returning has-pair
key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-SET-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Move the cursor to the first key-value pair with key
greater or equal to the key argument, according to the lisp
sorter.  Returns has-pair key value.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Cursor for traversing secondary indices." :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-GET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Moves the cursor to a particular key / value pair,
returning has-pair key value.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-GET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-GET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-GET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Moves the cursor to the first key / value pair with key
equal to the key argument and value greater or equal to the
value argument.  Not really useful for us since primaries
don't have duplicates.  Returns has-pair key value.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-GET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-GET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-DELETE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Delete by cursor.  The cursor is at an invalid position,
and uninitialized, after a successful delete.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Overwrite value at current cursor location.  Cursor remains
   at the current location")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-PUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-PUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PCURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Returns has-tuple / secondary key / value / primary key
at the current position.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PFIRST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Moves the key to the beginning of the secondary index.
Returns has-tuple / secondary key / value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PLAST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Moves the key to the end of the secondary index.  Returns
has-tuple / secondary key / value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PNEXT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Advances the cursor.  Returns has-tuple / secondary key /
value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PPREV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Moves the cursor back.  Returns has-tuple / secondary key
/ value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Moves the cursor to a particular key.  Returns has-tuple
/ secondary key / value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PSET-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Move the cursor to the first key-value pair with key
greater or equal to the key argument, according to the lisp
sorter.  Returns has-pair secondary key value primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PGET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Moves the cursor to a particular secondary key / primary
key pair.  Returns has-tuple / secondary key / value /
primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PGET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Moves the cursor to a the first secondary key / primary
key pair, with secondary key equal to the key argument, and
primary key greater or equal to the pkey argument.  Returns
has-tuple / secondary key / value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-NEXT-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the next duplicate element (with the same key.)
Returns has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-NEXT-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the next non-duplicate element (with different
key.)  Returns has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PNEXT-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the next duplicate element (with the same key.)
Returns has-tuple / secondary key / value / primary key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PNEXT-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the next non-duplicate element (with different
key.)  Returns has-tuple / secondary key / value / primary
key.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the previous duplicate element (with the same key.)
Returns has-pair key value.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-PREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PREV-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the previous non-duplicate element (with
different key.)  Returns has-pair key value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PPREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the previous duplicate element (with the same key.)
Returns has-tuple / secondary key / value / primary key.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CURSOR-PPREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CURSOR-PPREV-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Move to the previous non-duplicate element (with
different key.)  Returns has-tuple / secondary key / value /
primary key.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-BTREE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Macro which opens a named cursor on a BTree (primary or
not), evaluates the forms, then closes the cursor.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-KV-PAIR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "DBT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Too bad there isn't a direct way to do this, but with
   ordered duplicates this should be reasonably efficient")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Btree indices don't need to have values removed,
   this happens on the primary when remove-kv is called")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISP-COMPARE<=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A comparison function that mirrors the ordering of the data stores for <=
   on all sortable types.  It does not provide ordering on non-sorted values
   other than by type class (i.e. not serialized lexical values)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISP-COMPARE<" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A comparison function that mirrors the ordering of the data stores for <
   on all sortable types.  It does not provide ordering on non-sorted values
   other than by type class (i.e. not serialized lexical values)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISP-COMPARE-EQUAL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A lisp compare equal in same spirit as lisp-compare<.  Case insensitive for strings.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISP-COMPARE>=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CURRENT-CURSOR*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION
     "This dynamic variable is referenced only when deleting elements
   using the following function.  This allows mapping functions to
   delete elements as they map.  This is safe as we don't revisit
   values during maps"
     :INITIAL-VALUE "NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CURRENT-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-CURRENT-KV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Map btree maps over a btree from the value start to the value of end.
   If values are not provided, then it maps over all values.  BTrees 
   do not have duplicates, but map-btree can also be used with indices
   in the case where you don't want access to the primary key so we 
   require a value argument as well for mapping duplicate value sets.
   The collect keyword will accumulate the results from
   each call of fn in a fresh list and return that list in the 
   same order the calls were made (first to last).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VALIDATE-MAP-CALL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-MAP-COLLECTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "COLLECT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds free var results to the collected results of function in
   symbol-argument fn based on boolean parameter collect-p,
   otherwise result is nil")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-MAP-WRAPPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds variable sc to the store controller, overrieds fn with a collector
   if dynamic value of collect is true and binds variable named cur to
   the current cursor")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CURSOR-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Binds exists?, skey, val and pkey from expression assuming
   expression returns a set of cursor operation values or nil")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ITERATE-MAP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONTINUE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "In context with bound variables: cur, sc, value, start, end, fn
   Provide a start expression that returns index cursor values
   Provide a continue expression that uses the
     bound variables key, start, value or end to determine if 
     the iteration should continue
   Provide a step expression that returns index cursor values.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VALUE-SET-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-BTREE-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-BTREE-FROM-START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-BTREE-FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Map-index is like map-btree but for secondary indices, it
   takes a function of three arguments: key, value and primary
   key.  As with map-btree the keyword arguments start and end
   determine the starting element and ending element, inclusive.
   Also, start = nil implies the first element, end = nil implies
   the last element in the index.  If you want to traverse only a
   set of identical key values, for example all nil values, then
   use the value keyword which will override any values of start
   and end.  The collect keyword will accumulate the results from
   each call of fn in a fresh list and return that list in the 
   same order the calls were made (first to last)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-MAP-INDEX-COLLECTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "COLLECT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds free var results to the collected results of function in
   symbol-argument fn based on boolean parameter collect-p,
   otherwise result is nil")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ITERATE-MAP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONTINUE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "In context with bound variables: cur, sc, value, start, end, fn
   Provide a start expression that returns index cursor values
   Provide a continue expression that uses the
     bound variables key, start, value or end to determine if 
     the iteration should continue
   Provide a step expression that returns index cursor values.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-MAP-INDEX-WRAPPER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Binds variable sc to the store controller, overrieds fn with a collector
   if dynamic value of collect is true and binds variable named cur to
   the current cursor")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PSET-RANGE-FOR-DESCENDING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CUR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VALUE-SET-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-INDEX-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-INDEX-FROM-START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-INDEX-FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EMPTY-BTREE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "ALLOW-WITH-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-INTERRUPTS" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WITH-FORMS" :PACKAGE-NAME "SB-UNIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-BTREE-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PRINT-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "PRINT-BTREE-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Print the contents of a btree for easy inspection & debugging")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-BTREE-KEY-AND-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BTREE-KEYS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PRINT-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "PRINT-BTREE-KEY-AND-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
         NIL)))
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-INDEX-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PK" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DUMP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "IDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PRINT-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "PRINT-INDEX-ENTRY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "BTREE-DIFFER-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "X" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "Y" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Update indices when writing an indexed slot.  Make around method to ensure a single transaction
   for write + index update")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Removes the slot value from the database.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DERIVED-INDEX-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Derived slot values are always set in response to a slot write")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "DERIVED-INDEX-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT"
        :EXTERNALP NIL)))
     :DOCUMENTATION
     "Unbinding cannot be performed explicitly.  It is effectively 
   inhibited when the derived fn says 'no'")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DERIVED-INDEX-UPDATER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "WRITTEN-SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compute the derived indices to update from the slot-def that is
   being written to.  Should be called in a transaction")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPDATE-DERIVED-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DERIVED-SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a copy of the functionality here to be more efficient")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPDATE-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Update an index value when written")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CONTROLLER-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get the slot-def's index from the store")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-SLOT-DEF-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "If a slot's index does not exist, create it")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "NEW-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Add it to the index table and the class slot def")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REBUILD-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TOPOLOGICAL-SORT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "GRAPH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION
     "Graph is an association list whose keys are objects and whose
values are lists of objects on which the corresponding key depends.
Test is used to compare elements, and should be a suitable test for
hash-tables.  Topological-sort returns two values.  The first is a
list of objects sorted toplogically.  The second is a boolean
indicating whether all of the objects in the input graph are present
in the topological ordering (i.e., the first value).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REBUILD-SLOT-INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Rebuild all slot indices for CLASS, or all known classes
  if CLASS is NIL. CLASS may be a class or class name.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KNOWN-CLASSES/SORTED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KNOWN-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return all classes that are known both to SC and the current
  Lisp image.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOT-INDEX-SANE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ERRORP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSERT-SLOT-INDEX-SANITY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLOT-INDICES-SANE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check slot index sanity for CLASS or all classes known to SC if
  CLASS is NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSERT-SLOT-INDEX-SANITY-FOR-CLASS" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-INVERTED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NULL-ON-FAIL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-INVERTED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NULL-ON-FAIL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-FINALIZED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-INSTANCES-BY-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "Retrieve all instances from the class index as a list of objects")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-INSTANCE-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Retrieve instances from a slot index by value.  Will return only the first
                  instance if there are duplicates.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-INSTANCES-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a list of all instances where the slot value is equal to value.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GET-INSTANCES-BY-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Returns a list of all instances that match
                   values between start and end.  An argument of
                   nil to start or end indicates, respectively,
                   the lowest or highest value in the index")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IDENTITY2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IDENTITY3" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PK" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCE-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCE-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SLOT-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-INSTANCES-BY-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "IDX-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OIDS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Perform a map operation over all instances of class.  Takes a
   function of one argument, a class instance.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-INVERTED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VALUE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "FROM-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "COLLECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OIDS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "map-inverted-index maps a function of two variables, taking key
   and instance, over a subset of class instances in the order
   defined by the index.  Specify the class by classname or class object 
   and index by quoted name.  The index may be a slot index, derived index,
   or a valued association slot.

   To map only a subset of key-value pairs, specify the range
   using the :start and :end keywords; all elements greater than
   or equal to :start and less than or equal to :end will be
   traversed regardless of whether the start or end value is in
   the index.  

   Use nil in the place of start or end to specify the first
   element or last element, respectively.  

   To map a single value, iff it exists, use the :value keyword.
   This is the only way to travers all nil values.

   To map from :end to :start in descending order, set :from-end
   to true.  If :value is used, :from-end is ignored

   The 'oids' argument passes the oid of the instance to the provided
   function instead of the recreated instance.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-UNIQUE-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&AUX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "VALUES" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "PERSISTENT-COLLECTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION
     "An unordered persistent collection of unique elements according to
                   serializer equal comparison"
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INSERT-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Insert a new item into the pset")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "REMOVE-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Remove specified item from pset")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Map operator for psets")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "FIND-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Find a an item in the pset using key and test")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PSET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Convert items of pset into a list for processing")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Construct an empty default pset or backend specific pset.
                   This is an internal function used by make-pset")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DROP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Release pset storage to database for reuse")
    (:TYPE :CLASS :SYMBOL
     (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :ACCESSORS
       ((:NAME "PSET-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "BUILD-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Default pset method; override if backend has better policy")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ITEMS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INSERT-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQUAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       (:NAME "TEST-SUPPLIED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PSET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Ensure that there is a slot-set in the slot (lazy instantiation)")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Setting a value adds it to the slot set")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SET-VALUED-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Make sure we reclaim the pset storage")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Sugar for getting a list from a set slot")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SET-INSERT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Sugar for inserting items under #'equal from the set slot")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SET-REMOVE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Sugar for removing items via #'equal from the set slot")
    (:TYPE :CLASS :SYMBOL
     (:NAME "SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "A proxy object for a set stored in a slot." :SLOT-LIST
     NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
      (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "slot-set based on pset" :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "DEFAULT-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DEFAULT-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "A default slot-set implementation" :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BUILD-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Construct an empty default pset or backend specific pset.
                   This is an internal function used by make-pset")
    (:TYPE :METHOD :SYMBOL
     (:NAME "BUILD-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SLOT-SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Convert items of pset into a list for processing")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
     :DOCUMENTATION "Map operator for psets")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DROP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)) :DOCUMENTATION
     "Release pset storage to database for reuse")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "SET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PSET-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-VALUE-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-BOUNDP-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MAKUNBOUND-USING-CLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ASSOCIATION-SLOT-DEFINITION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
        NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE-CHECK-ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OTHER-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-ASSOCIATED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPDATE-ASSOCIATION-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TARGET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get the association index and add the target object as a key that
   refers back to this instance so we can get the set of referrers to target")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-ASSOCIATION-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ASSOCIATED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPDATE-OTHER-ASSOCIATION-END" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OTHER-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Update the association index for the other object so that it maps from
   us to it.  Also add error handling.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-FOREIGN-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-FOREIGN-SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-ASSOCIATION-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CONTROLLER-ASSOCIATION-INDEX" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SLOT-DEF" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ASSOCIATED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOTNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ASSOCIATED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-ASSOCIATIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ASSOCIATEDP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SLOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ASSOCIATED" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Migrate an object from the src object, collection or controller
    to the dst controller.  Returns a copy of the object in the new
    store so you can drop it into a parent object or the root of
    the dst controller")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIGRATE-FROM-CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIGRATE-CLASS-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INHIBITED-CLASS-COPY-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Ignore all classes that ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIGRATE-FROM-LEGACY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Perform a wholesale repository migration from the root. 
   Also acts as a poor man's GC if you copy to another store 
   of the same type!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-CINDEX-CONTENTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OLDIDX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Default: standard objects are automatically migrated")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "This provides some sanity checking that we aren't trying to copy
   to the same controller.  We also need to be careful about deadlocking
   our transactions among the two gets/puts.  Each leaf migration should
   be in its own transaction to avoid too many write locks. ")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "This method ensures that we reset duplicate object detection over the store-controller")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "This method ensures that we reset duplicate object detection over the store-controller")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INHIBIT-SLOT-COPY*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION
     "Migrate a persistent object and apply a binary (lambda (dst src) ...) 
    function to the new object.  Users can override migrate by creating
    a function that calls the default copy and then does stuff with the
    slot values.  A dynamic variable: *inhibit-slot-copy* can be bound
    in the caller to keep the new object from having its slots copied")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DSTSC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Copy the persistent object reference by making a new one and
   potentially copy over the slot values as well")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-PERSISTENT-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DSTSC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Copy only persistent slots from src to dst")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-INHIBITED-SLOT-COPY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A user macro to support special slot handling in persistent objects")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Copy an index and it's contents to the target repository")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Also copy the inverse indices for indexed btrees")
    (:TYPE :METHOD :SYMBOL
     (:NAME "COPY-BTREE-CONTENTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "If we have persistent objects that are unindexed and ONLY stored in
   a standard object slot that is referenced from the root, then it
   will only be copied by recursing through the slot substructure just
   as the serializer will, but copying any persistent objects found")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Walks structure slot values and ensures that any persistent references
   are written back into the slot pointint to the new store")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PATHNAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Migrate pathname as just return itself")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "WARNING: This doesn't work for circular lists")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "We really only need to handle arrays of type 't' that point 
   to other objects; fixnum, float, etc array can just be 
   written to the new store but we don't bother to optimize here")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Migrate each hash element as the types are non-uniform")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OID-HASH*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OID-STORE*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OID-SPEC*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OID-BTREE*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-OID-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Set to nil to perform oid mapping in memory, set to a valid spec to
   perform the mapping on disk")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-MIGRATE-DUPLICATE-DETECTION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Reset oid map so that all references to a given object
   in the source only point to one copy in the target")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-MIGRATE-DUPLICATE-DETECTION" :PACKAGE-NAME "ELEPHANT"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OBJECT-WAS-COPIED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Test whether a source object has been copied")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGISTER-COPIED-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "When copying a source object, store it in the oid map")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETRIEVE-COPIED-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Get a copied object from the oid map")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPDATE-IN-MEMORY-OBJECTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Takes all in-memory objects from src and maps the instances into the dst store.
   After this call, all in-memory references point into the new store, the objects
   used to copy into migrate have been flushed and the original store cache is also
   flushed.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-AND-SWEEP-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SETUP-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEANUP-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-MEMORY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Inhibit loading new objects while we extract the live items
   from the cache and then walk them from outside the lockup.
   The cache lock is acquired for any lookup of an object from
   the cache - i.e. when the system is reading in a new object.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-MEMORY-FINAL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "We need to ensure that any loaded objects that are unlinked
   and not yet written back to a live variable are marked prior
   to the sweep.  This locks the cache up for the longest period
   as we want to be completely quiescent (no new objects) until
   we have an accurate mark list for the system")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIVE-MEMORY-OBJECTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Return the list of oids and list of instances currently
   in memory.  This should be equal to the set of live objects.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-ROOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CHUNK-SIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) 100))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MARK-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SWEEP-UNINDEXED-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 5))
     :DOCUMENTATION "For each unindexed class, sweep all instances that
   are not on the mark list.  One txn per class for now")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SWEEP-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      ((:NAME "START" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) 0))
     :DOCUMENTATION "Sweep over the class and reclaim instances")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SWEEP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Drop an instance unless it is marked")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SWEEP-DEBUG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WALK-INDEXED-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     "Treat heap objects like a tree and walk over
     aggregate objects to leaf elements (persistent objects and scalara values)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION "Key values of indices can be persistent objects")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WALK-HEAP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "OBJ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INDEXED-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNINDEXED-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ALL-PERSISTENT-COLLECTIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "STOP-AND-COPY-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Wrap all the migrate machinery in a
   simple top-level gc call.  This will copy all the data
   in the source store to the target store.  Accesses to 
   the store should be inhibited by the user.  
   mapspec saves on memory space by storing oid->object maps on disk
   replace-source means to have the resulting spec be the same 
      as the source using copy-spec.  
   delete-source means do not keep a backup 
   backup means to make a backup with a name derived from the src")
    (:TYPE :METHOD :SYMBOL
     (:NAME "STOP-AND-COPY-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TARGET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "MAPSPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REPLACE-SOURCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "DELETE-SOURCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BACKUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GC-OPEN-TARGET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Ignore *store-controller*")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TEMP-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Create a temporary specification with source spec as hint")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TEMP-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "TEMP-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DELETE-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Delete the storage associated with spec")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DELETE-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DELETE-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "COPY-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TARG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION "Copy files associated with spec from src to targ")
    (:TYPE :METHOD :SYMBOL
     (:NAME "COPY-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TARG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COPY-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SRC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TARG" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STRING-RELATION-FUNCTIONS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "`((< ,@#'STRING<) (<= ,@#'STRING<=) (> ,@#'STRING>) (>= ,@#'STRING>=)
  (= ,@#'EQUAL)
  (ELEPHANT::!=
   ,@(LAMBDA (ELEPHANT::X ELEPHANT::Y) (NOT (EQUAL ELEPHANT::X ELEPHANT::Y)))))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NUMBER-RELATION-FUNCTIONS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "`((< ,@#'<) (<= ,@#'<=) (> ,@#'>) (>= ,@#'>=) (= ,@#'=)
  (ELEPHANT::!=
   ,@#'(LAMBDA (ELEPHANT::X ELEPHANT::Y) (NOT (= ELEPHANT::X ELEPHANT::Y)))))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*GENERIC-RELATION-FUNCTIONS*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "`((< ,@#'ELEPHANT::LISP-COMPARE<) (<= ,@#'ELEPHANT::LISP-COMPARE<=)
  (>
   ,@#'(LAMBDA (ELEPHANT::X ELEPHANT::Y)
         (NOT (ELEPHANT::LISP-COMPARE<= ELEPHANT::X ELEPHANT::Y))))
  (>=
   ,@#'(LAMBDA (ELEPHANT::X ELEPHANT::Y)
         (NOT (ELEPHANT::LISP-COMPARE< ELEPHANT::X ELEPHANT::Y))))
  (=
   ,@#'(LAMBDA (ELEPHANT::X ELEPHANT::Y)
         (ELEPHANT::LISP-COMPARE-EQUAL ELEPHANT::X ELEPHANT::Y)))
  (ELEPHANT::!=
   ,@#'(LAMBDA (ELEPHANT::X ELEPHANT::Y)
         (NOT (ELEPHANT::LISP-COMPARE-EQUAL ELEPHANT::X ELEPHANT::Y)))))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RELATION-STRING-FUNCTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "REL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RELATION-NUMBER-FUNCTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "REL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RELATION-GENERIC-FUNCTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "REL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-RELATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "IVAL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "TVALS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-QUERY-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONSTRAINTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get a list of instances according to the query constraints")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-CLASS-QUERY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONSTRAINTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Map instances using the query constaints to filter objects, exploiting
   slot indices (for last query) and stack allocated test closures.  This is
   a minimally optimizing version that uses the first index it finds, and 
   then does a nested loop join on the rest of the parameters.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "COMPARISON-2OPS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(< > >= <= = STRING= STRING< STRING> STRING<= STRING>=)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUERY-SELECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VARS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SATISFIED-BINDINGS-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "VARS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CDRS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MATCH-SYMBOL-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYM1" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "SYM2" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPRET-CONSTRAINTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONSTRAINTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPRET-SINGLE-CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPARISON-CONSTRAINT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AND-EXPR-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPRET-AND-CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OR-EXPR-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPRET-OR-CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "CONSTRAINT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUERY-VARIABLE?" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-ASSOC-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REFERENCE-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "BINDINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SORT-TUPLES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "ORDER-BY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION
     "Orders elements in the sequence using values returned by key-fn")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-TUPLE-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "MAP-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CDR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Returns a list of elements from tuples returned by map-fn 
   on the sequence elements that are within the range on seq"))
   :EXTERNAL-SYMBOLS
   ((:NAME "CURSOR-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-NEXT-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*WARN-ON-MANUAL-CLASS-FINALIZATION*" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP T)
    (:NAME "*DEFAULT-RETRIES*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-CLASS-DERIVED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "LOOKUP-PERSISTENT-SYMBOL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*WARN-WHEN-DROPPING-PERSISTENT-SLOTS*" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP T)
    (:NAME "DROP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-BTREE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DEFPCLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "BTREE-DIFFER-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ADD-SYMBOL-CONVERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*DEFAULT-INDEXED-CLASS-SYNCH-POLICY*" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP T)
    (:NAME "ADD-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PNEXT-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ADD-TO-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MIGRATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ADD-PACKAGE-CONVERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-FIRST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "STOP-AND-COPY-GC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-FROM-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SET-REMOVE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-INVERTED-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PPREV-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-CHECKED-OUT-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "TRANSACTION-RETRY-COUNT-EXCEEDED" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP T)
    (:NAME "CURSOR-LAST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SET-OID-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-OPEN-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-INITIALIZED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-CHECKOUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-CURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-QUERY-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-CLASS-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "BDB-DB-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PLAST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "KEY-FORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROP-INSTANCES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "FIND-INVERTED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-KV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "FIND-CLASS-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-CURRENT-KV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "STRUCT-CONSTRUCTOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-COMMIT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "MAP-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-GET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ROOT-EXISTSP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "OPEN-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-CLASS-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SLOT-SET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-INHIBITED-WARNINGS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PSET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-CLASS-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*ALWAYS-CONVERT*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROPPING-PERSISTENT-SLOT-DATA" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "DISABLE-CLASS-INDEXING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-GET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SLOT-SET-LIST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-INVERTED-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROP-INSTANCE-SLOTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-INSTANCE-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ENABLE-CLASS-INDEXING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-ASSOCIATIONS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DUMP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CLOSE-ALL-STORES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-DELETE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ELEPHANT-DESERIALIZATION-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "WITH-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*STORE-CONTROLLER*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CROSS-REFERENCE-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-KV-PAIR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-INVERTED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "OPTIMIZE-LAYOUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-SIMPLE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*OID-ONLY*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-SYNC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-START-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "CURSOR-PPREV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "LOOKUP-PERSISTENT-SYMBOL-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DESCRIBE-DB-CLASS-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PGET-BOTH-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-INSTANCES-BY-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ELEPHANT-TYPE-DESERIALIZATION-ERROR" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP T)
    (:NAME "ADD-ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PNEXT-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CACHING-STYLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-LOST-ERROR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-INSTANCES-BY-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "TRANSLATE-AND-INTERN-SYMBOL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "INSERT-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-PERSISTENT-CHECKOUTS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PCURRENT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-INSTANCES-BY-VALUE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PSET-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SECONDARY-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "*INHIBIT-SLOT-COPY*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-METACLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PSET" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "BTREE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-CHECKIN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-INDICES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CACHEABLE-CLASS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-FROM-ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REPORT-INDEXED-CLASSES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-CLOSE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REBUILD-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ADD-CLASS-DERIVED-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "FLUSH-INSTANCE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DROP-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PREV-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PREV" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "BTREE-KEYS" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "UPGRADE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "DUMP-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CLOSE-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-COLLECTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PGET-BOTH" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PPREV-DUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "STORE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "EXISTSP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ADD-CLASS-SLOT-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SET-INSERT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-NEXT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PRIMARY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-PRIMARY-KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-NEXT-NODUP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PNEXT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "WITH-CLASS-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-SET-RANGE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ASSOCIATEDP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CLASS-INDEXEDP-BY-NAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PUT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "PERSISTENT-CHECKOUT-CANCEL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAP-CLASS-QUERY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-DUPLICATE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-ABORT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "MAKE-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "REMOVE-ASSOCIATION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "KEY-FN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "GET-ASSOCIATION-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "MAKE-CURSOR" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "EMPTY-BTREE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "FIND-ITEM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CURSOR-PFIRST" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "ENSURE-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "-USER" :FULL-NAME "ELEPHANT-USER" :DOCUMENTATION
   "A user package for experimenting with Elephant" :SYMBOL-LIST NIL
   :EXTERNAL-SYMBOLS NIL)
  (:TYPE :PACKAGE :NAME "-SERIALIZER1" :FULL-NAME "ELEPHANT-SERIALIZER1"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :TYPE :SYMBOL
     (:NAME "FOREIGN-CHAR" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+FIXNUM+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CHAR+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "2")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SINGLE-FLOAT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "3")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+DOUBLE-FLOAT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "4")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NEGATIVE-BIGNUM+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "5")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+POSITIVE-BIGNUM+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "6")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+RATIONAL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "7")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NIL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "8")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS1-SYMBOL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "9")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS1-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "10")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS1-PATHNAME+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "11")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS2-SYMBOL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "12")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS2-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "13")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS2-PATHNAME+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "14")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS4-SYMBOL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "20")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS4-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "21")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UCS4-PATHNAME+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "22")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PERSISTENT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "15")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CONS+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "16")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HASH-TABLE+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "17")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+OBJECT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "18")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ARRAY+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "19")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+RESERVED-DBINFO+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "240")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+FILL-POINTER-P+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "64")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ADJUSTABLE-P+" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "128")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LISP-OBJ-ID*" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP
      NIL)
     :DOCUMENTATION "Circularity ids for the serializer." :INITIAL-VALUE "0")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CIRCULARITY-HASH*" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :DOCUMENTATION "Circularity hash for the serializer." :INITIAL-VALUE
     "(MAKE-HASH-TABLE)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-CIRCULARITY-HASH" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "This handles the case where we store an object with lots
   of object references.  CLRHASH then starts to dominate
   performance as it has to visit ever spot in the table so
   we're better off GCing the old table than clearing it")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FROB" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL))
     :DOCUMENTATION "Serialize a lisp value into a buffer-stream.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TRACE-SERIALIZER*" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TAG-TABLE*" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "`((,ELEPHANT-SERIALIZER1::+FIXNUM+ ,@\"fixnum32\")
  (,ELEPHANT-SERIALIZER1::+CHAR+ ,@\"char\")
  (,ELEPHANT-SERIALIZER1::+SINGLE-FLOAT+ ,@\"single-float\")
  (,ELEPHANT-SERIALIZER1::+DOUBLE-FLOAT+ ,@\"double float\")
  (,ELEPHANT-SERIALIZER1::+NEGATIVE-BIGNUM+ ,@\"neg bignum\")
  (,ELEPHANT-SERIALIZER1::+POSITIVE-BIGNUM+ ,@\"pos bignum\")
  (,ELEPHANT-SERIALIZER1::+RATIONAL+ ,@\"rational number\")
  (,ELEPHANT-SERIALIZER1::+NIL+ ,@\"null\")
  (,ELEPHANT-SERIALIZER1::+UCS1-SYMBOL+ ,@\"8-bit symbol\")
  (,ELEPHANT-SERIALIZER1::+UCS1-STRING+ ,@\"8-bit string\")
  (,ELEPHANT-SERIALIZER1::+UCS1-PATHNAME+ ,@\"8-bit pathname\")
  (,ELEPHANT-SERIALIZER1::+UCS2-SYMBOL+ ,@\"16-bit symbol\")
  (,ELEPHANT-SERIALIZER1::+UCS2-STRING+ ,@\"16-bit string\")
  (,ELEPHANT-SERIALIZER1::+UCS2-PATHNAME+ ,@\"16-bit pathname\")
  (,ELEPHANT-SERIALIZER1::+UCS4-SYMBOL+ ,@\"32-bit symbol\")
  (,ELEPHANT-SERIALIZER1::+UCS4-STRING+ ,@\"32-bit string\")
  (,ELEPHANT-SERIALIZER1::+UCS4-PATHNAME+ ,@\"32-bit pathname\")
  (,ELEPHANT-SERIALIZER1::+PERSISTENT+ ,@\"persistent object\")
  (,ELEPHANT-SERIALIZER1::+CONS+ ,@\"cons cell\")
  (,ELEPHANT-SERIALIZER1::+HASH-TABLE+ ,@\"hash table\")
  (,ELEPHANT-SERIALIZER1::+OBJECT+ ,@\"standard object\")
  (,ELEPHANT-SERIALIZER1::+ARRAY+ ,@\"array\"))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENABLE-SERIALIZER-TRACING" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISABLE-SERIALIZER-TRACING" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-PRE-DESERIALIZE-TAG" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TAG" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-POST-DESERIALIZE-TAG" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF-STR" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL))
     :DOCUMENTATION "Deserialize a lisp value from a buffer-stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-BIGNUM" :PACKAGE-NAME "ELEPHANT-SERIALIZER1"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "POSITIVE" :PACKAGE-NAME "ELEPHANT-SERIALIZER1" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS NIL)
  (:TYPE :PACKAGE :NAME "-SERIALIZER2" :FULL-NAME "ELEPHANT-SERIALIZER2"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :TYPE :SYMBOL
     (:NAME "FOREIGN-CHAR" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+FIXNUM32+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+FIXNUM64+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "2")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CHAR+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "3")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SINGLE-FLOAT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "4")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+DOUBLE-FLOAT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "5")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NEGATIVE-BIGNUM+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "6")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+POSITIVE-BIGNUM+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "7")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+RATIONAL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "8")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UTF8-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "9")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UTF16-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "10")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UTF32-STRING+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "11")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PATHNAME+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "12")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SYMBOL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "13")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PERSISTENT-REF+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "14")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PERSISTENT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "15")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CONS+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "16")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HASH-TABLE+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "17")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+OBJECT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "18")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ARRAY+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "19")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+STRUCT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "20")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CLASS+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "21")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+COMPLEX+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "22")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SHORT-FLOAT+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "30")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NIL+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "63")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+RESERVED-DBINFO+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "240")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+FILL-POINTER-P+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "32")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ADJUSTABLE-P+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "64")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CIRCULARITY-HASH-QUEUE*" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :DOCUMENTATION "Circularity ids for the serializer." :INITIAL-VALUE
     "(MAKE-ARRAY 20 :FILL-POINTER 0 :ADJUSTABLE T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SERIALIZER-FAST-LOCK*" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(ELEPHANT-UTILS:ELE-MAKE-FAST-LOCK)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CIRCULARITY-HASH" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Get a clean hash for object serialization")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RELEASE-CIRCULARITY-HASH" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HASH" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION "Return the hash to the queue for reuse")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CIRCULARITY-VECTOR-QUEUE*" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :DOCUMENTATION "A list of vectors used for linear deserialization.
   This works nicely because all ID's are written
   in integer order to the stream, so we can just write
   the next one into the array already knowing what the
   ID is"
     :INITIAL-VALUE "(MAKE-ARRAY 20 :FILL-POINTER 0 :ADJUSTABLE T)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CIRCULARITY-VECTOR" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Get a fresh vector")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RELEASE-CIRCULARITY-VECTOR" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Don't need to erase, just reset fill-pointer as it 
   determines extent of valid data")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^31+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(EXPT 2 31)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^32+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(EXPT 2 32)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^63+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(EXPT 2 63)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+2^64+" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(EXPT 2 64)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FROB" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION "Serialize a lisp value into a buffer-stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-BIGNUM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "FROB" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "BS" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION "Serialize bignum to buffer stream")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TRACE-DESERIALIZER*" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TAG-TABLE*" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "`((,ELEPHANT-SERIALIZER2::+FIXNUM32+ ,@\"fixnum32\")
  (,ELEPHANT-SERIALIZER2::+FIXNUM64+ ,@\"fixnum64\")
  (,ELEPHANT-SERIALIZER2::+CHAR+ ,@\"char\")
  (,ELEPHANT-SERIALIZER2::+SHORT-FLOAT+ ,@\"short-float\")
  (,ELEPHANT-SERIALIZER2::+SINGLE-FLOAT+ ,@\"single-float\")
  (,ELEPHANT-SERIALIZER2::+DOUBLE-FLOAT+ ,@\"double float\")
  (,ELEPHANT-SERIALIZER2::+NEGATIVE-BIGNUM+ ,@\"neg bignum\")
  (,ELEPHANT-SERIALIZER2::+POSITIVE-BIGNUM+ ,@\"pos bignum\")
  (,ELEPHANT-SERIALIZER2::+RATIONAL+ ,@\"rational number\")
  (,ELEPHANT-SERIALIZER2::+NIL+ ,@\"null\")
  (,ELEPHANT-SERIALIZER2::+UTF8-STRING+ ,@\"UTF8 string\")
  (,ELEPHANT-SERIALIZER2::+UTF16-STRING+ ,@\"UTF16le string\")
  (,ELEPHANT-SERIALIZER2::+UTF32-STRING+ ,@\"UTF32le string\")
  (,ELEPHANT-SERIALIZER2::+SYMBOL+ ,@\"symbol\")
  (,ELEPHANT-SERIALIZER2::+PATHNAME+ ,@\"pathname\")
  (,ELEPHANT-SERIALIZER2::+PERSISTENT+ ,@\"persistent object (old)\")
  (,ELEPHANT-SERIALIZER2::+PERSISTENT-REF+
   ,@\"persistent object reference (new)\")
  (,ELEPHANT-SERIALIZER2::+CONS+ ,@\"cons cell\")
  (,ELEPHANT-SERIALIZER2::+HASH-TABLE+ ,@\"hash table\")
  (,ELEPHANT-SERIALIZER2::+OBJECT+ ,@\"standard object\")
  (,ELEPHANT-SERIALIZER2::+ARRAY+ ,@\"array\")
  (,ELEPHANT-SERIALIZER2::+STRUCT+ ,@\"struct\")
  (,ELEPHANT-SERIALIZER2::+CLASS+ ,@\"class\")
  (,ELEPHANT-SERIALIZER2::+COMPLEX+ ,@\"complex\"))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENABLE-DESERIALIZER-TRACING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISABLE-DESERIALIZER-TRACING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-PRE-DESERIALIZE-TAG" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TAG" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-POST-DESERIALIZE-VALUE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUF-STR" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "SC" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OID-ONLY" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION "Deserialize a lisp value from a buffer-stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESERIALIZE-BIGNUM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BS" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "POSITIVE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION
     "Try to write each format type and bail if code is too big")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-TO-UTF8" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION "Standard serialization")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-TO-UTF16LE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION
     "Serialize to utf16le compliant format unless contains code pages > 0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIALIZE-TO-UTF32LE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION
     "Serialize to utf32 compliant format unless contains code pages > 0")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "NATIVE-STRING-TYPE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE ":UTF32LE")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPATIBLE-UNICODE-SUPPORT-P" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ENCODING-TYPE" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
       NIL))
     :DOCUMENTATION "This is a crude hack and can be improved later, but
   we assume if you have code pages > 0 you need or use
   a 32-bit encoding.  I'm assuming that 16-bit unicode
   supporting lisps only support code page 0 and do not
   use conjugate pair coding and variable length unicode
   string representations (formal utf-16)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DESERIALIZE-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEMP-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESERIALIZE-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "UTF8" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEMP-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESERIALIZE-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "UTF16LE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEMP-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "All returned strings are simple-strings for, uh, simplicity")
    (:TYPE :MACRO :SYMBOL (:NAME "NEXT-BYTE" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DESERIALIZE-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "UTF32LE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "BSTREAM" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEMP-STRING" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL (:NAME "NEXT-BYTE" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OFFSET" :PACKAGE-NAME "ELEPHANT-SERIALIZER2" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS NIL)
  (:TYPE :PACKAGE :NAME "-DATA-STORE" :FULL-NAME "ELEPHANT-DATA-STORE"
   :DOCUMENTATION "Data stores should use this to get access to internal symbols
   of elephant that importers of elephant shouldn't see.  Backends should also
   import elephant to get use-api generic function symbols, classes and globals"
   :SYMBOL-LIST NIL :EXTERNAL-SYMBOLS
   ((:NAME "DESERIALIZE-FROM-BASE64-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "SCHEMA-CLASSNAME-KEYFORM" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-COMMIT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "SERIALIZE-DATABASE-VERSION-VALUE" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP NIL)
    (:NAME "OPEN-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-SERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SCHEMA-NAME-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "ROOT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SLOT-DEFINITION-NAME" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
    (:NAME "OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "STRUCT-SLOTS-AND-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SERIALIZE-DATABASE-VERSION-KEY" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "SERIALIZE-TO-BASE64-STRING" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "SCHEMA-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "BUILD-INDEXED-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "OID->SCHEMA-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "*ELEPHANT-CODE-VERSION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "GET-CACHED-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "BUILD-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DESERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "GET-USER-CONFIGURATION-PARAMETER" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP NIL)
    (:NAME "PERSISTENT-SLOT-READER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONNECTION-IS-INDEED-OPEN" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CURSOR-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "LISP-COMPARE-EQUAL" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "TEMP-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "FLUSH-INSTANCE-CACHE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "SCHEMA-CLASSNAME" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "TRANSACTION-STORE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "REGISTER-DATA-STORE-CON-INIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "CACHE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-DATABASE-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "GET-CON" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "LISP-COMPARE<" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "TRANSACTION-OBJECT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "RESERVED-OID-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CLOSE-CONTROLLER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "INDEX-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "BUILD-DUP-BTREE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "UP-TO-DATE-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "PERSISTENT-SLOT-WRITER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-DESERIALIZE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DESERIALIZE-DATABASE-VERSION-VALUE" :PACKAGE-NAME "ELEPHANT"
     :EXTERNALP NIL)
    (:NAME "*CURRENT-TRANSACTION*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "LISP-COMPARE<=" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "INSTANCE-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "UNCACHE-INSTANCE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CURSOR-INITIALIZED-P" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "CONTROLLER-SERIALIZER-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "CONTROLLER-START-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "PERSISTENT-SLOT-MAKUNBOUND" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "LOOKUP-DATA-STORE-CON-INIT" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     NIL)
    (:NAME "CONTROLLER-INSTANCE-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DATABASE-VERSION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "EXECUTE-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "MAKE-TRANSACTION-RECORD" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "WITH-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP T)
    (:NAME "COPY-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "NEXT-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "*DBCONNECTION-SPEC*" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-SCHEMA-TABLE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DEFAULT-CLASS-ID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "INITIALIZE-SERIALIZER" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "ENSURE-INDEX" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SLOTS-AND-VALUES" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CONTROLLER-ABORT-TRANSACTION" :PACKAGE-NAME "ELEPHANT" :EXTERNALP
     T)
    (:NAME "PERSISTENT-SLOT-BOUNDP" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "NEXT-CID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "CURSOR-OID" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DEFAULT-CLASS-ID-TYPE" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)
    (:NAME "DELETE-SPEC" :PACKAGE-NAME "ELEPHANT" :EXTERNALP NIL)))))
