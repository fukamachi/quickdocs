
(:TYPE :SYSTEM :NAME "btrie" :AUTHOR
 "Peter Hillerström <peter.hillerstrom@gmail.com>" :MAINTAINER NIL :VERSION
 "0.2.1" :LICENCE "Simplified BSD license." :DESCRIPTION
 "Branch trie - a generic trie implementation with branch widths.

* Implementation is generic: keys can be of sequences of any type.
* Branch width of a trie node tells how many branches go through that node and
  can be used to calculate probabilites for different suffixes."
 :LONG-DESCRIPTION NIL :DEPENDS-ON ("ARNESI" "SPLIT-SEQUENCE" "LIFT")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "NU.COMPOSED.BTRIE" :FULL-NAME "NU.COMPOSED.BTRIE"
   :DOCUMENTATION
   "Branch trie – an implementation of tries with branch widths." :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "+WORD-MARKER+" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "#\\.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEBUG*" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :CLASS :SYMBOL
     (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Trie data structure, see package documentation for more info." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "Can be any type for generality.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BRANCHES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "BRANCHES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T) "")
      ((:NAME "WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T) 0)
      ((:NAME "BRANCHES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LEAF" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Utility function to make a trie instance.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LEAF" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T) 1))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-TRIE-WITH-FN" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FN" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ADD-SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)))
      ((:NAME "SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Simple utility function to build a trie from a sequence.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Make a trie with letters as keys.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-WORD-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION "Make a test trie with words as keys.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LEAFP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION "Predicate to tell if there are no branches for a node.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WORDP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION "Predicate to tell whether this node ends any words.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ONLY-TERMINAL-P" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION
     "This predicate tells if node has only terminal as a child.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NODES-EQUALP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "OBTAIN-SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Get a sequence from trie by following the keys in the sequence.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FIND-KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
     :DOCUMENTATION "Get a symbol matching key from trie's branches.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SYM-INTERVAL" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
     :DOCUMENTATION "Return interval limits for a symbol matching key.
  Nil if key not found.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SYM-LOW" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
     :DOCUMENTATION "Return a cumulative lower limit for a symbol matching key.
  Nil if key not found.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBSEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERLEAVE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "NUM-PARTS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CUT-SEQUENCE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "TIMES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-SEQS-AS-KEYS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-SUBSEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LEN" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION
     "Add a branch to the trie count times. Modifies trie in-place.
  If branch already exists, increase it’s width.
  A count below one is changed to one.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION
     "Add a node to trie. If node exists, increases it’s width.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CREATE-NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 0))
     :DOCUMENTATION "Destructively adds node to trie")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1))
     :DOCUMENTATION
     "### Remove a node from trie. If node exists, decrease it’s width.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRIE-PROB" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ROOT" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "SUFFIX" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION "Returns probability of suffix on given trie.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SORT-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL))
     :DOCUMENTATION "Sort a trie recursively with a predicate function.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SORT-TRIE-BRANCH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)))
      ((:NAME "STABLE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Sort a trie node’s branches with a predicate function.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-WORDS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "PREFIX" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL) ""))
     :DOCUMENTATION
     "Prints words from the trie, one per line. Returns total word count.

  Options:
  * with-count: Prints word counts after tab when over one.

  TODO:
  * Use keyword arguments?
  * Implement start, end
  * Allow to specify separator instead of newline")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-TRIE-SIMPLE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DEPTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL) 0)
      ((:NAME "INDENT" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL) 2))
     :DOCUMENTATION "## Traverse tries printing out nodes")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-TRIE-TO-STREAM" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEPTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL) 0)
      ((:NAME "COMPACT" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Pretty print the trie.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TRAVERSE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
       (:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T))
      ((:NAME "FUN" :PACKAGE-NAME "IT.BESE.ARNESI" :EXTERNALP T)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DO-LEAFS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Traverse the trie perfoming a function on each node."))
   :EXTERNAL-SYMBOLS
   ((:NAME "TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TRIE-BRANCHES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "NODES-EQUALP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "+WORD-MARKER+" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "OBTAIN-SEQ" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "LEAFP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "ADD-SEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "SORT-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "ADD-SUBSEQS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "MAKE-WORD-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TRIE-PROB" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "PRINT-WORDS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "SORT-TRIE-BRANCH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TRIE-WIDTH" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "MAKE-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "FIND-KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "MAKE-LEAF" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "ADD-SEQS-AS-KEYS" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "WORDP" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TRIE-KEY" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "ONLY-TERMINAL-P" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "BRANCHES" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "MAKE-NODE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "ADD" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TEST-TRIE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)
    (:NAME "TRAVERSE" :PACKAGE-NAME "NU.COMPOSED.BTRIE" :EXTERNALP T)))))
