
(:TYPE :SYSTEM :NAME "cl-primality" :AUTHOR
 "Zach Kost-Smith <zachkostsmith@gmail.com>" :MAINTAINER NIL :VERSION NIL
 :LICENCE "LLGPL" :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON
 ("ITERATE") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-PRIMALITY" :FULL-NAME "CL-PRIMALITY" :DOCUMENTATION
   NIL :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "*-MOD" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "MD" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL))
     :DOCUMENTATION "Multiply N by M, modulo MD.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPT-MOD" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "B" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "E" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "MD" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TOT" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL) 1))
     :DOCUMENTATION "Raise B to the power of E, modulo MD (leave TOT as 1).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIAL-DIVISION" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "N" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL))
     :DOCUMENTATION
     "Test for primality by effectively attempting to divide N by every integer
between 2 and (/ N 2).  This should not actually be used.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MILLER-RABIN" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CHANCE-OF-ERROR" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
       1.d-300))
     :DOCUMENTATION "Miller-Rabin probabilistic primality test:

Checks if N is prime with the chance of a false positive less than
CHANCE-OF-ERROR.  This algorithm never gives false negatives.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MILLER-RABIN-PASS" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "A" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL))
     :DOCUMENTATION
     "Performs one 'pass' of the Miller-Rabin primality algorithm.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRIMEP" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)) :DOCUMENTATION
     "Determine if N is prime.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GEN-PRIME" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N-BITS" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PRIMEP-FN" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "MILLER-RABIN" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T))))
     :DOCUMENTATION
     "Generate a prime that is N-BITS long (less than 2^N-BITS).  Just try random
numbers of the right length until we find one that is prime (we use
MILLER-RABIN for the test by default bit it can be specified via PRIMEP-FN)."))
   :EXTERNAL-SYMBOLS
   ((:NAME "MILLER-RABIN" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T)
    (:NAME "GEN-PRIME" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T)
    (:NAME "PRIMEP" :PACKAGE-NAME "CL-PRIMALITY" :EXTERNALP T)))))
