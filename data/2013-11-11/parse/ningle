
(:TYPE :SYSTEM :NAME "ningle" :AUTHOR "Eitarow Fukamachi" :MAINTAINER NIL
 :VERSION "0.1" :LICENCE "LLGPL" :DESCRIPTION
 "Super micro framework for Common Lisp." :LONG-DESCRIPTION "# ningle

\"ningle\" is a lightweight web application framework for Common Lisp.

## Usage

```common-lisp
(defvar *app* (make-instance 'ningle:<app>))

(setf (ningle:route *app* \"/\")
      \"Welcome to ningle!\")

(setf (ningle:route *app* \"/login\" :method :POST)
      #'(lambda (params)
          (if (authorize (getf params :|username|)
                         (getf params :|password|))
            \"Authorized!\"
            \"Failed...Try again.\")))

(clack:clackup *app*)
```

Now you can access to http://localhost:5000/ and then ningle should show you \"Welcome to ningle!\".

## Installation

    (ql:quickload :ningle)

## Description

ningle is a fork project of [Caveman](http://fukamachi.github.com/caveman/). ningle doesn't require you to generate a project skeleton.

As this is a thin framework, you need to have subtle knowledge about [Clack](http://clacklisp.org). It is a server interface ningle bases on.

## Getting started

### Routing

ningle has the [Sinatra](http://www.sinatrarb.com/)-like routing system.

```common-lisp
;; GET request (default)
(setf (ningle:route *app* \"/\" :method :GET) ...)

;; POST request
(setf (ningle:route *app* \"/\" :method :POST) ...)

;; PUT request
(setf (ningle:route *app* \"/\" :method :PUT) ...)

;; DELETE request
(setf (ningle:route *app* \"/\" :method :DELETE) ...)

;; OPTIONS request
(setf (ningle:route *app* \"/\" :method :OPTIONS) ...)
```

Route pattern may contain \"keyword\" to put the value into the argument.

```common-lisp
(setf (ningle:route *app* \"/hello/:name\")
      #'(lambda (params)
          (format nil \"Hello, ~A\" (getf params :name))))
```

The above controller will be invoked when you access to \"/hello/Eitarow\" or \"/hello/Tomohiro\", and then `(getf params :name)` will be \"Eitarow\" and \"Tomohiro\".

Route patterns may also contain \"wildcard\" parameters. They are accessible by `(getf params :splat)`.

```common-lisp
(setf (ningle:route *app* \"/say/*/to/*\")
      #'(lambda (params)
          ; matches /say/hello/to/world
          (getf params :splat) ;=> (\"hello\" \"world\")
          ))

(setf (ningle:route *app* \"/download/*.*\")
      #'(lambda (params)
          ; matches /download/path/to/file.xml
          (getf params :splat) ;=> (\"path/to/file\" \"xml\")
          ))
```

### Request & Response

ningle provides two special variables named `*request*` and `*response*`. They will be bound to an instance [Clack.Request](http://clacklisp.org/doc/clack.request.html) and [Clack.Response](http://clacklisp.org/doc/clack.response.html) for each request.

For example, by using them, you can change the response status code, Content-Type or something like that in each controllers.

### Context

ningle provides an useful function named `context`. It is an accessor to an internal hash table.

```common-lisp
(setf (context :database)
      (dbi:connect :mysql
                   :database-name \"test-db\"
                   :username \"nobody\"
                   :password \"nobody\"))

(context :database)
;;=> #<DBD.MYSQL:<DBD-MYSQL-CONNECTION> #x3020013D1C6D>
```

### Using Session

ningle doesn't provide Session system in the core, but recommends to use [Clack.Middleware.Session](http://clacklisp.org/doc/clack.middleware.session.html) with [Clack.Builder](http://clacklisp.org/doc/clack.builder.html).

```common-lisp
(import 'clack.builder:builder
        'clack.middleware.session:<clack-middleware-session>)

(clack:clackup
  (builder
    <clack-middleware-session>
    *app*))
```

Of course, you can use other Clack Middlewares with ningle.

## See Also

* [Clack](http://clacklisp.org/)

## Author

* Eitarow Fukamachi (e.arrows@gmail.com)

## Copyright

Copyright (c) 2012 Eitarow Fukamachi (e.arrows@gmail.com)

## License

Licensed under the LLGPL License.
"
 :DEPENDS-ON ("CLACK" "CL-SYNTAX" "CL-SYNTAX-ANNOT") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "NINGLE" :FULL-NAME "NINGLE" :DOCUMENTATION NIL
   :SYMBOL-LIST NIL :EXTERNAL-SYMBOLS
   ((:NAME "*CONTEXT*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "*REQUEST*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "NOT-FOUND" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "*SESSION*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "MAKE-REQUEST" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "NEXT-ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "WITH-CONTEXT-VARIABLES" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP
     T)
    (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "*RESPONSE*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".APP" :FULL-NAME "NINGLE.APP" :DOCUMENTATION "# 
Ningle.App - Ningle Application Class.


## SYNOPSIS

    (defclass <myapp-app> (<app>) ())
    (defvar *app* (make-instance '<myapp-app>))
    
    (setf (route *app* \"/\")
          \"Welcome to ningle!\")
    
    (setf (ningle:route *app* \"/login\" :method :POST)
          #'(lambda (params)
              (if (authorize (getf params :|username|)
                             (getf params :|password|))
                \"Authorized!\"
                \"Failed...Try again.\")))
    
    (call *app*)

## DESCRIPTION

Ningle.App provides a base class `<app>' for Ningle Applications.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Component

"
   :SYMBOL-LIST
   ((:TYPE :STRUCT :SYMBOL
     (:NAME "ROUTING-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "URL-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTROLLER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "IDENTIFIER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-ROUTING-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "URL-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "CONTROLLER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "IDENTIFIER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NEXT-ROUTE-FUNCTION*" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :DOCUMENTATION
     "A function called when `next-route' is invoked. This will be overwritten in `dispatch-with-rules'."
     :INITIAL-VALUE "NIL")
    (:TYPE :CLASS :SYMBOL
     (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T) :SUPER-CLASS-LIST
     ((:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T))
     :DOCUMENTATION
     "Base class for Ningle Application. All Ningle Application must inherit this class."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ROUTING-RULES" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ROUTING-RULES" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%CONTEXT-MW" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION
     "Overriding method. This method will be called for each request.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPATCH-WITH-RULES" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "RULES" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "STRING-URL-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "GET" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      (:NAME "IDENTIFIER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "CONTROLLER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      ((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "STRING-URL-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "GET" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      (:NAME "IDENTIFIER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT-ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NOT-FOUND" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)) :DOCUMENTATION
     "An action when no routing rules are found.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NOT-FOUND" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH-ROUTING-RULE-P" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "ROUTING-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
      (:NAME "STRING-URL-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTROLLER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "IDENTIFIER" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MEMBER-RULE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PATH-INFO" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RULES" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-HEAD" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-REQUEST" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APP" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION
     "Make a request object. A class of the request object can be changed by overwriting this.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "APP" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
       (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STATUS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "HEADERS" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a response object. A class of the response object can be changed by overwriting this."))
   :EXTERNAL-SYMBOLS
   ((:NAME "NOT-FOUND" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "NEXT-ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "<APP>" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)
    (:NAME "ROUTE" :PACKAGE-NAME "NINGLE.APP" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".CONTEXT" :FULL-NAME "NINGLE.CONTEXT" :DOCUMENTATION
   "# 
Ningle.Context - Managing current state for each request.


## SYNOPSIS

    ;; In the controller.
    
    ;; Get context object.
    (context)
    ;=> #<HASH-TABLE :TEST EQL size 0/60 #x3020025FF5FD>
    
    ;; Access to each value.
    (context :hoge)
    ;=> \"Something set to :hoge.\"
    
    ;; Set to context
    (setf (context :hoge) \"hogehoge\")

## DESCRIPTION

Ningle.Context is for managing current state for each request. It is called \"Context\" in Ningle.

Specifically, context is a hash table in global scope. you can access it with a function `context'. See SYNOPSIS for details.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*CONTEXT*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :DOCUMENTATION "Special variable to store Ningle Context, a hash table.
Don't set to this variable directly. This is designed to be bound in lexical let."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*REQUEST*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :DOCUMENTATION
     "Special variable to store Ningle Request, a instance of `<request>' in Ningle.Request package.
Don't set to this variable directly. This is designed to be bound in lexical let."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RESPONSE*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :DOCUMENTATION
     "Special variable to store Ningle Response, a instance of `<response>' in Ningle.Response package.
Don't set to this variable directly. This is designed to be bound in lexical let."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :DOCUMENTATION "Special variable to store session.
Don't set to this variable directly. This is designed to be bound in lexical let."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION "Create a new Context.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-REQUEST" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a request object. See ningle.app for the default behavior.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STATUS" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "HEADERS" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make a response object. See ningle.app for the default behavior.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION "
Access to current context. If key is specified, return the value in current context.
If not, just return a current context.

Example:
  (context)
  ;=> #<HASH-TABLE :TEST EQL size 0/60 #x3020025FF5FD>
  (context :request)
  ;=> #<CAVEMAN.REQUEST:<REQUEST> #x3020024FCCFD>
")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VAL" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CONTEXT-VARIABLES" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VARS" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "*CONTEXT*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "*REQUEST*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "*RESPONSE*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "*SESSION*" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "MAKE-REQUEST" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "WITH-CONTEXT-VARIABLES" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP
     T)
    (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)
    (:NAME "MAKE-CONTEXT" :PACKAGE-NAME "NINGLE.CONTEXT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.CONTEXT" :FULL-NAME
   "NINGLE.MIDDLEWARE.CONTEXT" :DOCUMENTATION "# 
Ningle.Middleware.Context - Clack Middleware to set context for each request.


## DESCRIPTION

This is a Clack Middleware to ensure context is set for each request.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Ningle.Context

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<NINGLE-MIDDLEWARE-CONTEXT>" :PACKAGE-NAME
      "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION "Clack Middleware to set context for each request."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAST-APP" :PACKAGE-NAME "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "LAST-APP" :PACKAGE-NAME "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP NIL)
       (:NAME "<NINGLE-MIDDLEWARE-CONTEXT>" :PACKAGE-NAME
        "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<NINGLE-MIDDLEWARE-CONTEXT>" :PACKAGE-NAME
     "NINGLE.MIDDLEWARE.CONTEXT" :EXTERNALP T)))))
