
(:TYPE :SYSTEM :NAME "sapaclisp" :AUTHOR NIL :MAINTAINER NIL :VERSION NIL
 :LICENCE NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON NIL
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "SAPA" :FULL-NAME "SAPA" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL (:NAME "MULTF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DELTA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION "Like <incf>")
    (:TYPE :MACRO :SYMBOL (:NAME "DIVF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DELTA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1)
      (:NAME "&ENVIRONMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME NIL :EXTERNALP NIL))
     :DOCUMENTATION "Like <incf>")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-10-OVER-LOG-10+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(/ 10.0d0 (LOG 10.0))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-2-PI+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "(* 2 PI)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-MINUS-2-PI+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(* -2 PI)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION "given
   [1] num (required)
       ==> a number
returns
   [1] 10 log_10(num)
---
Note: num is intended to be a positive number,
but this is not checked")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ZERO-MAPPING" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) -100.0))
     :DOCUMENTATION "given
   [1] num (required)
       ==> a number
   [1] zero-mapping (required)
       ==> a number
returns
   [1] 10 log_10(num) if num > 0 or
       zero-mapping   if num <= 0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-FROM-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION "given
   [1] num (required)
       ==> a number
returns
   [1] 10^(x/10)")
    (:TYPE :FUNCTION :SYMBOL (:NAME "LOG10" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "NUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] num (required)
       ==> a number
returns
   [1] log_10(num)
---
Note: shorthand for (log num 10)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION "given
   [1] n (required)
       ==> an integer
returns
   [1] nil if n is not a power of 2 
           -- or --
       m   if n = 2^m for a positive integer m")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION "given
   [1] n (required)
       ==> an integer
returns
   [1] an integer power of 2 greater than or
       equal to n")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
returns
   [1] a vector of numbers obtained by multiplying
       each element of x by a
----
Note: corresponds to SSCAL in LINPACK's bla.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
   [2] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by multiplying
       each element of x by a
----
Note: corresponds to SSCAL in LINPACK's bla.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X+B" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
   [3] b (required)
       ==> a number
returns
   [1] a vector of numbers obtained by multiplying
       each element of x by a and adding b")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X+B!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
   [3] b (required)
       ==> a number
   [4] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by multiplying
       each element of x by a and adding b")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X+Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
   [3] y (required)
       ==> a sequence of numbers
returns
   [1] a vector of numbers obtained by multiplying
       each element of x by a and adding the
       corresponding element of y
----
Note: corresponds to SAXPY in LINPACK's bla.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "A*X+Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a (required)
       ==> a number
   [2] x (required)
       ==> a sequence of numbers
   [3] y (required)
       ==> a sequence of numbers
   [4] result (keyword; y)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by multiplying
       each element of x by a and adding the
       corresponding element of y
----
Note: corresponds to SAXPY in LINPACK's bla.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X+Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
returns
   [1] a vector of numbers obtained by adding
       x and y together element by element")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X+Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
   [3] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by adding
       x and y together element by element")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X+B" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] b (required)
       ==> a number
returns
   [1] a vector of numbers obtained by adding
       b to each element of x")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X+B!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] b (required)
       ==> a number
   [3] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by adding
       b to each element of x")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X-Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
returns
   [1] a vector of numbers obtained by subtracting
       elements of y from corresponding elements of x")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X-Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
   [3] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by subtracting
       elements of y from corresponding elements of x")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X*Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
returns
   [1] a vector of numbers obtained by multiplying
       corresponding elements of x and y")
    (:TYPE :FUNCTION :SYMBOL (:NAME "X*Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
   [3] result (keyword; x)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by multiplying
       corresponding elements of x and y")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-SEQUENCES" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SEQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a arbitrary number of sequences of numbers,
       all of the same size
returns
   [1] a new sequence formed by adding the sequences
       together on an element by element basis")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-SEQUENCES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SEQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a arbitrary number of sequences of numbers,
       all of the same size
returns
   [1] a new sequence formed by multiplying the sequences
       together on an element by element basis")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CIRCULAR-SHIFT-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> a sequence
   [2] result (keyword; vector of same length as a-seq)
       <== a sequence
returns
   [1] a `circularly' left-shifted sequence; i.e.,
       maps   x(0),   x(1), x(2), ..., x(n-2), x(n-1)
       to     x(n-1), x(0), x(1), ..., x(n-3), x(n-2)
----
Note: result can be the same sequence as result")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FROM-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "TO-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "FROM-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] from-vector (required)
       ==> a vector (actually, works with any sequence)
   [2] to-vector (required)
       ==> a vector (actually, works with any sequence)
   [3] start (keyword; 0)
       ==> start index of from-vector to be transferred
   [4] end (keyword; length of from-vector)
       ==> 1 + end index of from-vector to be transferred
returns
   [1] to-vector, with elements start to end - 1
       from-vector copied into corresponding
       elements 0 to end - start - 1 of to-vector
---
Note: if to-vector is being created on the spot,
      might consider using CL's copy-seq instead.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CUMULATIVE-SUMS" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sequence with cumulative sum
       of elements in specified subsequence")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIFFERENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SEQUENCE-OF-NUMBERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SEQUENCE-OF-NUMBERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] sequence-of-numbers (required)
       ==> a sequence of numbers
   [2] start (keyword; 0)
       ==> start index
   [3] end (keyword; length of sequence-of-numbers)
       ==> end index plus one
   [4] lag (keyword; 1)
       ==> lag for differencing
   [5] result (keyword; vector of length (- end start lag))
       <== results
return
   [1] a sequence of length (- end start lag)
       with lag-th order difference of sequence
       from index start to index end-1
---
Note: See Newton, 1988, page 31.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSFORM-A-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a-function (required)
       ==> a function with one argument
   [2] the-seq (required)
       ==> a sequence of numbers
returns
   [1] a sequence of numbers obtained by applying
       a-function to each element of the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSFORM-A-SEQUENCE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a-function (required)
       ==> a function with one argument
   [2] the-seq (required)
       ==> a sequence of numbers
   [3] result (keyword; the-seq)
       <== a sequence of numbers
returns
   [1] a sequence of numbers obtained by applying
       a-function to each element of the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LINEAR-INTERPOLATION!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INTERPOLATION-PREDICATE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ZEROP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "given
   [1] a-sequence (required)
       <=> a sequence of numbers
   [2] interpolation-predicate (keyword; #'zerop)
       ==> a unitary predicate which, when true,
           indicates that a value in a-sequence
           is to be replaced by a linear interpolation
returns
   [1] a-sequence, modified with linear interpolates
       over specified values")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DOT-PRODUCT" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
   [2] y (required)
       ==> a sequence of numbers
returns
   [1] the dot product of x and y
----
Note: corresponds to SDOT in LINPACK's bla")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EUCLIDEAN-NORM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION "given
   [1] x (required)
       ==> a sequence of numbers
returns
   [1] Euclidean norm of x
----
Note: corresponds to LINPACK's SNRM2,
      but this is POOR implementation!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUM-OF-SQUARES" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sum of squares of elements
       in specified subsequence")
    (:TYPE :FUNCTION :SYMBOL (:NAME "SUM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sum of elements in specified subsequence")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIN-AND-MAX-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] minimum value in sequence
   [2] maximum value in sequence")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIN-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] minimum value in sequence
   [2] index of minimum value")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAX-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] maximum value in sequence
   [2] index of maximum value")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BINARY-SEARCH" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LOWER-TEST" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "<=" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "UPPER-TEST" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "<=" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "given
   [1] value (required)
       ==> a real-valued number
   [2] ordered-seq (required)
       ==> an ordered sequence of real-valued numbers
   [3] lower-test (keyword; #'<=)
       ==> a predicate of two arguments
           that defines the lower test
   [4] upper-test (keyword; #'<=)
       ==> a predicate of two arguments
           that defines the upper test
returns
   [1] if lower-test and upper-test are set
       to their default values, this function
       returns an index i such that v[i] <= value <= v[i+1],
       where 0 <= i <= n-2 (if there is no such i, nil is returned);
       if nondefault values are supplied for lower-test and upper-test,
       then the condition `v[i] <= value <= v[i+1]'
       gets modified in an obvious way
---
Note: value can be an arbitrary object, and ordered-seq
can be a list of arbitrary objects if the binary predicates
lower-test and upper-test are appropriate set")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPARE-SEQS" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ONE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ANOTHER-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] one-seq (required)
       ==> any sequence
   [2] another-seq (required)
       ==> any sequence (must be same length as one-seq)
returns
   [1] maximum absolute difference between corresponding
       elements of the two sequences
   [2] average absolute difference
---
Note: useful for comparing results that in theory
should be identical")
    (:TYPE :FUNCTION :SYMBOL (:NAME "IOTA" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "FLOAT-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SKIP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "SKIP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] start (required)
       ==> an integer
   [2] end (required)
       ==> an integer >= start
   [3] type (keyword; 'vector)
       ==> type of sequence desired
   [4] float-p (keyword; nil)
       ==> if true, sequence consists of floats
   [5] skip (keyword; 1)
       ==> desired increment between integers in sequence
   [6] result (keyword; sequence of length (1+ (- start end)))
       ==> storage space for result
returns
   [1] a sequence of length (1+ (/ (- end start) skip))
       with numbers start, start + skip, ..., end - skip, end
       (these are stored in whatever result points to)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-FROM-A-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEQ-OF-X-VALUES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "X0" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.0)
      ((:NAME "DELTA-X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SEQ-OF-X-VALUES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] a-function (required)
       ==> a function to be sampled from
   [2] seq-of-x-values (keyword; '())
       ==> sequence of values at which a-function
           is to be sampled (default '())
   [3] x0 (keyword; 0.0)
       ==> point of first value to be sampled
   [4] delta-x (keyword; 1.0)
       ==> increment between points
   [5] n (keyword; length of seq-of-x-values)
       ==> number of samples
returns
   [1] an array with the values of a-function
       at a specified set of points; and
   [2] an array with the specified set of points.
---
Note that the specified set of points either is in seq-of-x-values
 -- if it is non-nil -- or is given by
x0, x0 + delta-x, x0 + 2*delta-x, ..., x0 + (n-1)*delta-x")
    (:TYPE :FUNCTION :SYMBOL (:NAME "SIGN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "A2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "implementation of Fortran SIGN function")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLING-TIME->NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION
     "given a sampling time, returns the associated Nyquist frequency
---
Note: see page 98 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NYQUIST-FREQUENCY->SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION
     "given a Nyquist frequency, returns the associated sampling-time
---
Note: see page 98 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POWER-OF-2+1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BINARY-SEARCH-INTERNAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LOWER-TEST" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "UPPER-TEST" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-1-OR-2-D-ARRAY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AN-ARRAY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) "array")
      ((:NAME "FORMAT-CONTROL-FOR-ARRAY-ELEMENT" :PACKAGE-NAME "SAPA"
        :EXTERNALP NIL)
       "~F"))
     :DOCUMENTATION "given
   [1] an-array (required)
       ==> a one-dimensional or two-dimensional array
   [2] tag (keyword; `array')
       ==> an optional tag to be printed
           along with array elements
   [3] format-control-for-array-element (keyword; `~F')
       ==> format control for a single array element
prints the elements of an-array and
returns
   [1] an-array")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-ROWS-OF-NXM-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AN-NXM-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FORMAT-CONTROL-FOR-ARRAY-ELEMENT" :PACKAGE-NAME "SAPA"
        :EXTERNALP NIL)
       "~F "))
     :DOCUMENTATION "given
   [1] an-nxm-matrix (required)
       ==> a two-dimensional array
   [3] format-control-for-array-element (keyword; `~F')
       ==> format control for a single array element
prints the elements of the 2d array and
returns
   [1] an-nxm-matrix")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LINEARIZED-UPPER-TRANGULAR->2D-MATRIX" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "ROUND" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             ((:NAME "SQRT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
              ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
               ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 8
                ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
                 (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
            2))))
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "BACKQ-LIST" :PACKAGE-NAME "SB-IMPL" :EXTERNALP NIL)
          (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> a vector with an upper triangular matrix
           stored in linearized form
   [2] result (keyword; new 2d array of appropriate size)
       <== a 2d hermitian matrix filled according
           to contents of A
converts linearized form A into 2d hermitian array and
returns
   [1] result, a 2d hermitian matrix")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "2D-MATRIX->LINEARIZED-UPPER-TRANGULAR" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
          2)))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> a 2d hermitian matrix
   [2] result (keyword; new vector of appropriate size)
       <== a vector filled linearly with elements
           of A
converts 2d hermitian array into linearized form and
returns
   [1] result, a vector with 2d hermitian array
stored in linearized form")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSPOSE" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "REVERSE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> a 2d matrix
   [2] result (keyword; new 2d array of appropriate size)
       <== a 2d matrix to contain transpose of a-matrix
returns
   [1] transpose of a-matrix (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HERMITIAN-TRANSPOSE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "REVERSE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> a 2d matrix
   [2] result (keyword; new 2d array of appropriate size)
       <== a 2d matrix to contain Hermitian transpose of a-matrix
returns
   [1] Hermitian transpose of a-matrix (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZERO-STRICT-LOWER-DIAGONAL!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a square matrix,
zeros its lower diagonal and returns
the modified square matrix")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-TWO-MATRICES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "NTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 0
          ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
         ((:NAME "NTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1
          ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "B-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given
   [1] a-matrix (required)
       ==> a 2d matrix
   [2] b-matrix (required)
       ==> another 2d matrix, with dimensions such that
           the product of a-matrix and b-matrix is defined
   [3] result (keyword; new 2d array of appropriate size)
       <== a 2d matrix to contain product of two matrices
returns
   [1] product of two matrices (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-MATRIX-AND-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "NTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 0
         ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] a-matrix (required)
       ==> a 2d matrix
   [2] b-vector (required)
       ==> a vector, with dimensions such that
           the product of a-matrix and b-vector is defined
   [3] result (keyword; new vector of appropriate size)
       <== a vector to contain product of a-matrix and b-vector
returns
   [1] product of a-matrix and b-vector (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-MATRIX-AND-SCALAR" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SCALAR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] a-matrix (required)
       ==> a 2d matrix
   [2] scalar (required)
       ==> an arbitrary number
   [3] result (keyword; new matrix of same size as a-matrix)
       <== a matrix to contain product of a-matrix and scalar
returns
   [1] product of a-matrix and scalar (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBTRACT-TWO-MATRICES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] a-matrix (required)
       ==> a 2d matrix
   [2] b-matrix (required)
       ==> a 2d matrix, with dimensions the same
           as a-matrix
   [3] result (keyword; new vector of appropriate size)
       <== a matrix to contain result of subtracting
           b-matrix from a-matrix
returns
   [1] a-matrix minus b-matrix (placed in result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRACE-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION
     "given a square matrix,
returns its trace")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "2D-MATRIX-MOVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FROM-THIS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "TO-THIS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] from-this (required)
       ==> a 2d matrix
   [2] to-this (required)
       <== another 2d matrix
transfer contents of from-this to corresponding
locations in to-this, and
returns
   [1] to-this")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHOLESKY!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
        T)))
     :DOCUMENTATION "given
   [1] A (required)
       ==> vector of length N*(N+1)/2 representing
           a two dimensional N by N positive definite matrix
           with elements stored columnwise; i.e, elements with indices
           0     1     2     3     4     5    ...
           correspond to matrix positions
           1,1   1,2   2,2   1,3   2,3   3,3  ...
   [2] b (required)
       <=> right-hand vector on input;
           solution X on output
   [3] eps (keyword; single-float-epsilon)
       number used to test for a computationally singular matrix
solves A X = b using the Cholesky decomposition method, and
returns
   [1] X, the solution vector (stored in b)")
    (:TYPE :FUNCTION :SYMBOL (:NAME "SPOFA!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "ARRAY-DIMENSIONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] A (required)
       <=> real symmetric positive definite matrix
           (this gets trashed)
   [2] n (keyword; (array-dimensions a))
       ==> size of matrix to be factored
calculates the upper triangular matrix U
of the Cholesky decomposition A = LU,
where L = U^T, and
returns
   [1] U, stored in upper triangular part of A")
    (:TYPE :FUNCTION :SYMBOL (:NAME "SPOSL!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> real symmetric positive definite matrix
           AFTER it has been crunched by spofa!
   [2] b (required)
       <=> the right-hand side vector on input;
            on output, this gets replaced by the solution X
   [3] N (keyword; length of b)
       ==> order of matrix A (default is length of b)
returns
   [1] X, the solution to A X = b; note that X is the same as
       the vector which contained b")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MODIFIED-GRAM-SCHMIDT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] A (required)
       <=> a matrix of real or complex-valued numbers with
           size m by n with rank N
computes the factorization A = QR, where
  Q is of size m by n and has orthonormal columns and
  R is of size n by n and is upper triangular, and
returns
   [1] Q
   [2] R
---
Note: see Algorithm 5.2.5, p. 219, of Golub and Van Loan,
Second Edition, with simple changes to handle matrices
with real or complex-valued numbers")
    (:TYPE :FUNCTION :SYMBOL (:NAME "Q-R!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "A-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "same as modified-Gram-Schmidt!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UPPER-TRIANGULAR-SOLVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> upper n by n triangular matrix
           (note: lower subdiagonal part of this matrix is ignored)
   [2] b (required)
       <=> on input, the right-hand side vector;
           on output, the solution X to A X = b
   [3] n (keyword; length of b)
       ==> order of matrix A
returns
   [4] X, the solution to A X = b, where X is the same as vector
which contained b (note that A is left unchanged)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOWER-TRIANGULAR-SOLVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] A (required)
       ==> lower n by n triangular matrix
           (note: upper superdiagonal part of this matrix is ignored)
   [2] b (required)
       <=> on input, the right-hand side vector;
           on output, the solution X to A X = b
   [3] n (keyword; length of b)
       ==> order of matrix A
returns
   [4] X, the solution to A X = b, where X is the same as vector
which contained b (note that A is left unchanged)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+COEFFICENTS-FOR-LOG-OF-GAMMA+" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(LIST 76.18009172947146d0 -86.50532032941678d0 24.01409824083091d0
      -1.231739572450155d0 0.001208650973866179d0 -5.395239384953d-6)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LOG-PI+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "(LOG PI)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+EULER-CONSTANT+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "0.5772156649015329d0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-OF-GAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "XX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION
     "given xx (a real or complex valued number
whose real part is greater than 0),
returns the log (base e) of gamma(xx)
---
Note: based upon the discussion in Section 6.1,
Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FACTORIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION
     "given an integer k, returns k!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIGAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "X-RECURSION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 8.5)
      ((:NAME "X-SMALL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.e-5))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a positive number
   [2] x-recursion (keyword; 8.5)
       ==> for noninteger x,
           if x-small < x < x-recursion,
           recursive formula is used
   [3] x-small (keyword; 1.0e-5)
       ==> if x <= x-small,
           small x approximation used (default )
returns
   [1] value of digamma (psi, derivative of log(gamma)) function at x
---
Note: see Abramowitz and Stegun's equation 6.3.2;
expansion 6.3.18 plus recurrence 6.3.5;
the small x formula is Equation (5) from
Algorithm AS 103 -- Psi (Digamma) Function -- by J. M. Bernardo
in Applied Statistics, Vol. 25, No. 3, 1976, pp. 315--317;
note that better accuracy can be obtained by increasing
x-recursion --- 10.0 to 100.0 are probably useful values")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIGAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "X-RECURSION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 2.0))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a positive number
   [2] x-recursion (keyword; 2.0)
       ==> if  x < x-recursion,
           recursive formula is used
returns
   [1] value of trigamma function at x
---
Note: expansion 6.4.12 plus recurrence 6.4.6
of Abramowitz and Stegun;
better accuracy can be obtained by increasing
x-recursion ---10.0 to 30.0 is probably a useful upper limit")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVALUATE-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Z" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "NUMBER-OF-DERIVATIVES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "COMPLEX-VALUES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "NUMBER-OF-DERIVATIVES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "BOUNDS-TO-BE-COMPUTED" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "BOUNDS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "BOUNDS-TO-BE-COMPUTED" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "NUMBER-OF-DERIVATIVES" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] polynomial (required)
       ==> sequence of length n+1 with real or
           complex-valued numbers giving the n+1
           coefficients of a polynomial of nth order;
           (elt polynomial i) = coefficient of z^(n-i)
   [2] z (required)
       ==> complex point at which the polynomial
           to be evaluated
   [3] degree-of-polynomial (keyword; (1- (length polynomial)))
       ==> degree of polynomial
   [4] number-of-derivatives (keyword; 0)
       ==> number of derivatives to be evaluated
   [5] complex-values (keyword; array of length (1+ number-of-derivatives))
       <== sequence with values of polynomial
       and derivatives
   [6] bounds-to-be-computed (keyword; nil)
       ==> if t, error bounds are computed
       for values in complex-values
   [7] bounds (keyword; array of length (1+ number-of-derivatives))
       <== sequence with error bounds
returns
   [1] the sequence complex-values containing the value
       of the polynomial and its derivatives
   [2] bounds, a sequence containing optional error bounds
---       
Note: this is a Lisp version of cmlib routine cpevl;
d1 was specified in cpevl as (expt 2 (- 1 (i1mach 11))),
where (i1mach 11) ==> THE NUMBER OF BASE-2 DIGITS (SINGLE PRECISION).
I have taken this to be equivalent to machine epsilon.
If this is in fact NOT the case, then the optional error bounds
might not be computed correctly.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-2-POLYNOMIALS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "POLYNOMIAL-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "POLYNOMIAL-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEGREE-OF-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "DEGREE-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "PRODUCT-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "DEGREE-OF-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "DEGREE-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1))))
     :DOCUMENTATION "given
   [1] polynomial-1 (required)
       ==> sequence of length n+1 with real or
           complex-valued numbers giving the n+1
           coefficients of a polynomial of nth order;
           (elt polynomial-1 i) = coefficient of z^(n-i)
   [2] polynomial-2 (required)
       ==> another sequence representing another polynomial
   [3] degree-of-1 (keyword; (1- (length polynomial-1)))
       ==> degree of first polynomial
   [4] degree-of-2 (keyword; (1- (length polynomial-2)))
       ==> degree of second polynomial
   [5] product-polynomial (keyword; array of length (+ degree-of-1 degree-of-2 1))
       <== a sequence with product of two polynomials
returns
   [1] product-polynomial, an sequence with coefficients
       of polynomial given by the product of
       polynomial-1 and polynomial-2
---       
Note: this routine works for a polynomial p represented either by
        p(0) + p(1)*z + ... + p(degp)*z^degp
                  or by
        p(0)*z**degp + p(1)*z**(degp-1) + ... + p(degp)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTIPLY-POLYNOMIALS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "POLYS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] sequences representing any number of polynomials (required)
returns
   [1] a sequence representing their product
---
Note: this function was written by Andrew G. Bruce")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZEROS-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "THE-ROOTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       25))
     :DOCUMENTATION "given
   [1] polynomial (required)
       ==> sequence with coefficients of a polynomial;
           (elt polynomial 0) must be nonzero
   [2] degree-of-polynomial (keyword; (1- (length polynomial)))
       ==> degree of polynomial
   [3] the-roots (keyword; array of length degree-of-polynomial)
       <== number of derivatives to be evaluated
   [4] maximum-number-of-iterations (keyword; 25)
       ==> maximum number of iterations
returns
   [1] t or nil, where t indicates that all went well,
       whereas nil indicates that convergence did not occur
       at end of specificed number of iterations
   [2] the-roots, a vector with the required roots
       of the polynomial")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEWTON-RAPHSON" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F-PRIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-LEFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-RIGHT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10.0
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       20)
      ((:NAME "PREVENT-BRACKET-JUMPING-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] f (required)
       ==> a function with a single argument
   [2] f-prime (required)
       ==> another function with a single argument,
           this one being the first derivative of f
   [3] x-left (required)
       ==> left-hand bracket for the desired root;
           i.e., left-hand bracket <= desired root
   [4] x-right (required)
       ==> right-hand bracket for the desired root;
           i.e., desired root <= right-hand bracket
   [5] accuracy (keyword; (* 10.0 single-float-epsilon))
       ==> desired relative accuracy for computed rood
   [6] maximum-number-of-iterations (keyword; 20)
       ==> maximum number of iterations
   [7] prevent-bracket-jumping-p (keyword; t)
       ==> if t, allows Newton-Raphson to continue
           if it jumps out of the interval
           [x-left, x-right];
           if nil, jumping out of the interval
           causes an error to be signaled
returns
   [1] a root of f in [x-left, x-right];
       i.e., a value x in that interval
       such that f(x) = 0
   [2] the number of iterations required
---
Note: this function is based loosely on rtnewt,
Section 9.4, Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BISECTION-WITH-NEWTON-RAPHSON" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F-PRIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-LEFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-RIGHT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10.0
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       100))
     :DOCUMENTATION "given
   [1] f (required)
       ==> a function with a single argument
   [2] f-prime (required)
       ==> another function with a single argument,
           this one being the first derivative of f
   [3] x-left (required)
       ==> left-hand bracket for the desired root;
           i.e., left-hand bracket <= desired root
   [4] x-right (required)
       ==> right-hand bracket for the desired root;
           i.e., desired root <= right-hand bracket
   [5] accuracy (keyword; (* 10.0 single-float-epsilon))
       ==> desired relative accuracy for computed rood
   [6] maximum-number-of-iterations (keyword; 100)
       ==> maximum number of iterations
returns
   [1] a root of f in [x-left, x-right];
       i.e., a value x in that interval
       such that f(x) = 0
   [2] the number of iterations required
---
Note: this function is based loosely on rtsafe,
Section 9.4, Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SECANT-METHOD" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-LEFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-RIGHT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10.0
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       50))
     :DOCUMENTATION "given
   [1] f (required)
       ==> a function with a single argument
   [2] x-left (required)
       ==> left-hand bracket for the desired root;
           i.e., left-hand bracket <= desired root
   [3] x-right (required)
       ==> right-hand bracket for the desired root;
           i.e., desired root <= right-hand bracket
   [4] accuracy (keyword; (* 10.0 single-float-epsilon))
       ==> desired relative accuracy for computed rood
   [5] maximum-number-of-iterations (keyword; 50)
       ==> maximum number of iterations
returns
   [1] a root of f in [x-left, x-right];
       i.e., a value x in that interval
       such that f(x) = 0
   [2] the number of iterations required
---
Note: this function is based loosely on rtsec,
Section 9.2, Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIMPLE-NUMERICAL-INTEGRATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.e-6)
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       20))
     :DOCUMENTATION "given
   [1] f (required)
       ==> a function with a single argument
   [2] a (required)
       ==> left-hand limit for numerical integration
   [3] b (required)
       ==> right-hand limit for numerical integration
           i.e., a < b
   [4] accuracy (keyword; 1.0e-6)
       ==> desired relative accuracy for computed rood
   [5] maximum-number-of-iterations (keyword; 20)
       ==> maximum number of iterations
returns
   [1] the integral of f over the interval [a, b]
   [2] the number of iterations required
---
Note: this function is based on qtrap,
Section 4.2, Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GAUSS-LEGENDRE-QUADRATURE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOWER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "UPPER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] lower-limit (required)
       ==> lower limit of integration
   [2] upper-limit (required)
       ==> upper limit of integration
   [3] N (required)
       ==> number of points to be computed
           in Gauss-Legendre quadrature
returns
   [1] an N-dimensional vector of abscissas points
   [2] an N-dimensional vector of weights
---
Note: this function is based on gauleg,
Section 4.5, Numerical Recipes, Second Edition")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZEROS-OF-POLYNOMIAL-WITH-INITIAL-ESTIMATES" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INITIAL-ESTIMATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "SCRATCH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "FINAL-RESULTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "INITIAL-ESTIMATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       25))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIAL-ESTIMATES-FOR-ZEROS-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "INITIAL-ESTIMATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SCRATCH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 2
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "DEGREE-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPLEX-OF-ABSOLUTES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "Z" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRAPEZOIDAL-RULE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "S" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL (:NAME "DFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given:
   [1] x (required)
       <=> a vector of real or complex-valued numbers
   [2] N (keyword; length of x)
       ==> number of points in dft
   [3] sampling-time (keyword; 1.0)
returns:
   [1] x, with contents replaced by
      the discrete Fourier transform of x, namely,
                            N-1
      X(n) =  sampling-time SUM x(t) exp(-i 2 pi n t/N)
                            t=0
---
Note: see Equation (110a) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INVERSE-DFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given:
   [1] X (required)
       <=> a vector of real or complex-valued numbers
   [2] N (keyword; length of )
       ==> number of points in inverse dft
   [3] sampling-time (keyword; 1.0)
returns:
   [1] X, with contents replaced by
       the inverse discrete Fourier transform of X, namely,
                                      N-1
       x(t) =  (N sampling-time)^{-1} SUM X(n) exp(i 2 pi n t/N)
                                      n=0
---
Note: see Equation (111a) of the SAPA book")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+USE-PRE-FFT-WITH-CACHE-P+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "T")
    (:TYPE :FUNCTION :SYMBOL (:NAME "FFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given:
   [1] complex-vector (required)
       <=> a vector of real or complex-valued numbers
   [2] N (keyword; length of complex-vector)
       ==> number of points (must be a power of 2)
computes the discrete Fourier transform of complex-vector
using a fast Fourier transform algorithm and
returns:
   [1] complex-vector, with contents replaced by
       the discrete Fourier transform of the input, namely,
                N-1
       X(n) =   SUM x(t) exp(-i 2 pi n t/N)
                t=0
---
Note: see Equation (110a) of the SAPA book
      with the sampling time set to unity")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INVERSE-FFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given:
   [1] complex-vector (required)
       <=> a vector of real or complex-valued numbers
   [2] N (keyword; length of )
       ==> number of points in inverse dft
           (must be a power of 2)
computes the inverse discrete Fourier transform of complex-vector
using a fast Fourier transform algorithm and
returns:
   [1] complex-vector, with contents replaced by
       the inverse discrete Fourier transform of
       the input X(n), namely,
                   N-1
       x(t) =  1/N SUM X(n) exp(i 2 pi n t/N)
                   n=0
---
Note: see Equation (111a) of the SAPA book
      with the sampling time set to unity")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DFT-CHIRP!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "COMPLEX-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given:
   [1] complex-vector (required)
       <=> a vector of real or complex-valued numbers
   [2] N (keyword; length of complex-vector)
       ==> number of points (must be a power of 2)
computes the discrete Fourier transform of complex-vector
using a chirp transform algorithm and
returns:
   [1] complex-vector, with contents replaced by
       the discrete Fourier transform of the input, namely,
                N-1
       X(n) =   SUM x(t) exp(-i 2 pi n t/N)
                t=0
---
Note: see Equation (110a) of the SAPA book
      with the sampling time set to unity and
      also Section 3.10 for a discussion on
      the chirp transform algorithm")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRE-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COMPLEX-EXP-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SAPA-CACHED-PRE-FFT-ARRAYS*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-ARRAY 32 :INITIAL-ELEMENT NIL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRE-FFT-WITH-CACHE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-MEAN" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real or complex-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sample mean of the specified numbers
       in the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WEIGHTED-MEAN" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WEIGHTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real or complex-valued numbers
   [2] weights (keyword; nil)
       ==> a sequence with (- end start) values
           to be used as weights; if set to nil,
           equal weights for all numbers
           is assumed
   [3] start (keyword; 0)
       ==> start index of sequence to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] the weighted average of the specified numbers
       in the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real or complex-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sample variance of the specified numbers
       in the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-MEAN-AND-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real or complex-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sample mean of the specified numbers
       in the-seq
   [2] sample variance of the specified numbers
       in the-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-SKEWNESS-AND-KURTOSIS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sample skewness of the specified numbers
       in the-seq
   [2] sample kurtosis
   [3] sample mean
   [4] sample variance")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-MEDIAN" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "THE-SEQ-IS-ORDERED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
   [4] the-seq-is-ordered-p (keyword; nil)
       ==> if t, the-seq is assumed to
           be sorted from smallest to largest
           value; if nil, the-seq will be sorted
returns
   [1] sample median
   [2] minimum value in sequence
   [3] maximum value
   [4] sorted sequence")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-CORRELATION-COEFFICIENT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SEQ-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SEQ-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SEQ-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] seq-1 (required)
       ==> a sequence of real-valued numbers
   [2] seq-2 (required)
       ==> another sequence of real-valued numbers;
           should have the same length as seq-1
   [3] start (keyword; 0)
       ==> start index of sequence to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
returns
   [1] sample correlation coefficient
       between two sequences")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HISTOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SEQUENCE-OF-DEVIATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NUMBER-OF-BINS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 10)
      ((:NAME "LEFT-OF-FIRST-BIN" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MIN-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
        (:NAME "SEQUENCE-OF-DEVIATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RIGHT-OF-LAST-BIN" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAX-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
        (:NAME "SEQUENCE-OF-DEVIATES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SCALE-AS-DENSITY-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NUMBER-OF-BINS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] sequence-of-deviates (required)
       ==> a sequence of real-valued numbers
   [2] number-of-bins (keyword; 10)
       ==> number of bins in histogram
   [3] left-of-first-bin (keyword; min of sequence-of-deviates)
       ==> leftmost value of first bin
   [4] right-of-last-bin (keyword; max of sequence-of-deviates)
       ==> rightmost value of last bin
   [5] scale-as-density-p (keyword; t)
       ==> if t, histogram is scaled as a density;
           otherwise, cell counts are returned
   [6] result (keyword; vector of size number-of-bins)
       <== vector to hold the histogram
returns
   [1] the vector result, which contains the values for the histogram
       for sequence-of-deviates (one value for each bin); note that,
       if a bin has boundaries a and b, all points x in sequence-of-deviates
       for which a<=x<b are counted as being in that bin
       EXCEPT for the last bin, where the rule is a<=x<=b.
   [2] maximum value in the histogram (i.e., result)
   [3] leftmost value of first bin
   [4] bin-width of bins
   [5] the number of unbinned elements in sequence-of-deviates
       less than left-of-first-bin
   [6] the number of unbinned elements in sequence-of-deviates
       greater than right-of-last-bin
---
Note: the value in (svref result 0) is the histogram value
      for the interval [leftmost value of first bin,
                        leftmost value of first bin + bin-width of bins);
      the value in (svref result 1) is the histogram value
      for the interval [leftmost value of first bin + bin-width of bins,
                        leftmost value of first bin + 2*bin-width of bins);
      etc.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BOX-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEQ-SORTED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "GET-BOTTOM-LINE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "LET*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (((:NAME "LOWER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP
              T)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.25))
           ((:NAME "IQR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP
               T)
              (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.75)
             (:NAME "LOWER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
           ((:NAME "LOWER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "LOWER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1.5
              (:NAME "IQR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
           ((:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "BINARY-SEARCH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
             (:NAME "LOWER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
           ((:NAME "LOWER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
              (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
             0))
           ((:NAME "LOWER-ADJACENT-VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "ELT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "LOWER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
          ((:NAME "VALUES" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "LOWER-ADJACENT-VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "LOWER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
      ((:NAME "GET-BOTTOM-OF-BOX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
          (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.25))))
      ((:NAME "GET-LINE-THROUGH-BOX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
          (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.5))))
      ((:NAME "GET-TOP-OF-BOX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
          (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.75))))
      ((:NAME "GET-TOP-LINE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "LET*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (((:NAME "UPPER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP
              T)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.75))
           ((:NAME "IQR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "UPPER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             ((:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP
               T)
              (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.25)))
           ((:NAME "UPPER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "UPPER-QUARTILE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 1.5
              (:NAME "IQR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
           ((:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "BINARY-SEARCH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
             (:NAME "UPPER-LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
           ((:NAME "UPPER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
              ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
               (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
           ((:NAME "UPPER-ADJACENT-VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            ((:NAME "ELT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "V" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "UPPER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
          ((:NAME "VALUES" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "UPPER-ADJACENT-VALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "UPPER-INDEX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> a sequence of real-valued numbers
   [2] seq-sorted-p (keyword; nil)
       ==> if t, a-seq is already sorted;
           if nil, a copy of a-seq is sorted
           for use by the function
   [3] get-bottom-line (keyword; computes lower adjacent value)
       ==> a function for calculating
           the line below the box (from sorted data)
   [4] get-bottom-of-box (keyword; computes lower quartile)
       ==> a function for calculating
           bottom of the box
   [5] get-line-through-box (keyword; computes median)
       ==> a function for calculating
           the line through the middle of the box
   [6] get-top-of-box (keyword; computes upper quartile)
       ==> a function for calculating
           top of the box
   [7] get-top-line (keyword; computes upper adjacent value)
       ==> a function for calculating
           the line above the box
returns
   [1] bottom line below box
   [2] bottom line of box
   [3] line through middle of box
   [4] top line of box
   [5] top line above box
   [6] a vector containing outside values
       (note: this vector can be of length 0)
---
Note: the values that this function returns can
      be used to contruct a box plot as defined in
      Section 2.5 of ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, Tukey")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYMMETRY-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "A-SEQ-SORTED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> any sequence of real-valued numbers
   [2] a-seq-sorted-p (keyword; nil)
       ==> if t, a-seq is already sorted;
           if nil, a copy of a-seq is sorted
           for use by the function
returns
   [1] y values for a symmetry plot for a-seq
   [2] x values for a symmetry plot for a-seq")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers,
           ordered from smallest to largest
   [2] p (required)
       ==> a percentile; i.e., 0 <= p <= 1
returns
   [1] the sample quantile for p
---
Note: see Section 2.2 of ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, and Tukey")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "A-SEQ-SORTED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> any sequence of real-valued numbers
   [2] a-seq-sorted-p (keyword; nil)
       ==> if t, a-seq is already sorted;
           if nil, a copy of a-seq is sorted
           for use by the function
returns
   [1] sequence with sample quantiles for a-seq
   [2] sequence with corresponding percentiles
---
Note: see Section 2.2 of ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, and Tukey")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERQUARTILE-RANGE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "THE-SEQ-IS-ORDERED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] start (keyword; 0)
       ==> start index of sequence to be used
   [3] end (keyword; length of the-seq)
       ==> 1 + end index of sequence to be used
   [4] the-seq-is-ordered-p (keyword; nil)
       ==> if t, the-seq is assumed to
           be sorted from smallest to largest
           value; if nil, the-seq will be sorted
returns
   [1] interquartile range; i.e,
       0.75 quantile minus 0.25 quantile")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-NORMAL-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "QUICK" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] p (required)
       ==> a number > 0 and < 1
   [2] accuracy-level (keyword; :quick)
       ==> if :quick, gives quick approximation;
           if :better, gives slower, but better, approximation;
           if :accurate, uses slowest, but more accurate,
           approximation;
returns
   [1] quantile of standard normal distribution;
---
Note: for :quick, see Table 6.5, page 227,
      ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, & Tukey;
      for :better, see Sections 26.2.22 and 26.2.23
      of Abramowitz and Stegun;
      for :accurate, see AS 111 by Beasley and Springer,
      Applied Statistics, 1977, vol. 26, p.118")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-GAMMA-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ALPHA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] alpha (required)
       ==> shape parameter for gamma distribution
   [2] p (required)
       ==> a number > 0 and < 1
returns
   [1] p-th quantile of standard gamma distribution
---
Note: Table 6.4, page 225, ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, & Tukey")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-EXPONENTIAL-DISTRIBUTION" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] p (required)
       ==> a number > 0 and < 1
returns
   [1] p-th quantile of exponential distribution with mean 1
---
Note: Table 6.4, page 225, ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, & Tukey")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-CHI-SQUARE-2-DISTRIBUTION" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] p (required)
       ==> a number > 0 and < 1
returns
   [1] p-th quantile of chi-square distribution with 2 degrees of freedom
---
Note: Equation (31), P. 640 of Chave, Thomson, and Ander (1987)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-CHI-SQUARE-DISTRIBUTION" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NU" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCURACY-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "QUICK" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] nu (required)
       ==> degrees of freedom
   [2] p (required)
       ==> a number > 0 and < 1
   [3] accuracy-level (keyword; :quick)
       if :quick, gives quick approximation;
       if :accurate, give accurate, but computationally
       expensive, approximation
returns
   [1] p-th quantile of chi-square distribution with nu degrees of freedom
---
Note: for :quick, see Table 6.4, page 225,
      ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner, & Tukey;
      if :accurate, see AS 91, Applied Statistics")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "Q-Q-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "Y-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "TYPEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "Y-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "Y-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
        256))
      ((:NAME "X-VALS-SORTED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTIONP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "X-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "Y-VALS-SORTED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTIONP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "Y-VALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] y-vals (required)
       ==> a sequence or function
   [2] x-vals (required)
       ==> a sequence or function
   [3] n (keyword; 256 if y-vals is a function, length of y-vals otherwise)
       ==> positive integer
   [4] x-vals-sorted-p (keyword; t if x-vals is a function, nil otherwise)
       ==> a flag indicating whether x-vals is already sorted
   [5] y-vals-sorted-p (keyword; t if y-vals is a function, nil otherwise)
       ==> a flag indicating whether y-vals is already sorted
return
   [1] y values needed to create a q-q-plot for y-vals
   [2] x values
---
Note: For details, see Chapter 6 of ``Graphical Methods for Data Analysis''
      by Chambers, Cleveland, Kleiner and Tukey")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SQRT-OF-TWO-PI+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(SQRT (* 2.0 PI))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STANDARD-NORMAL-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given x, returns value of standard normal pdf at x")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TAIL-AREA-OF-NORMAL-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "Q" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "Q-TO-INFINITY-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] q (required)
       ==> a quantile
   [2] q-to-infinity-p (keyword; nil)
       ==> if t,   return integral from q to +infinity;
           if nil, return integral from -infinity to q
return
   tail area of the standard norm from
   either q to +infinity (if q-to-infinity-p is true)
   or     -infinity to q (if q-to-infinity-p is nil)
---
see  Algorithm AS-66, Applied Statistics,
1973, vol. 22, no. 3")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MEDIAN-ABSOLUTE-DEVIATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LOCATION-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "SAMPLE-MEDIAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
        (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of real-valued numbers
   [2] location-estimate (keyword; median of the-seq)
       ==> robust estimate of location
returns
   [1] the median absolute deviation about location-estimate
   [2] location-estimate (median of the-seq by default)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "THOMSON-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BETA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SYMMETRIC-VERSION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] x (required)
       ==> value at which to evaluate Thomson's
           weight function
   [2] beta (keyword; 1.0)
       ==> tuning parameter
   [3] symmetric-version (keyword; t)
       ==> one-sided or two-sided down weightings
returns
   [1] value of Thomson's weight function at x
---
Note: Equation (27), p. 637 of Chave, Thomson, and Ander (1987)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HUBER-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.5))
     :DOCUMENTATION "given
   [1] x (required)
       ==> value at which to evaluate Huber's weight function
   [2] parameter (keyword; 1.5)
       ==> tuning parameter
returns
   [1] value of Huber's weight function at x")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "M-LOCATION-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WEIGHTING-FUNCTIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "BACKQ-LIST" :PACKAGE-NAME "SB-IMPL" :EXTERNALP NIL)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          ((:NAME "HUBER-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "PARAMETER" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 2.0)))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          ((:NAME "THOMSON-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "BETA" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
           ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
              (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
             0.5)
            ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             (:NAME "THE-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
           (:NAME "SYMMETRIC-VERSION" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
           (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))))
      ((:NAME "ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) (10 0))))
     :DOCUMENTATION "given
   [1] the-seq (required)
       ==> a sequence of numbers
   [2] weighting-functions (keyword; Huber and Thomson)
       ==> a list of two weighting functions
   [3] iterations (keyword; '(10 0))
       ==> a list of nonegative integers
           giving the number of iterations
           for each weighting function
returns
   [1] m-location estimate for sequence
   [2] MAD scale estimate (based upon deviations
       from m-location estimate)
---
Note: see article by Hogg in Launer and Wilkinson")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ORDINARY-LEAST-SQUARES-CHOLESKY" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "DEPENDENT-VARIABLE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LIST-OF-INDEPENDENT-VARIABLES" :PACKAGE-NAME "SAPA" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "DEPENDENT-VARIABLE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] dependent-variable (required)
        ==> a vector
   [2] list-of-independent-variables (required)
       ==> a list of either vectors or functions
           (must be ALL vectors or ALL functions)
   [3] compute-residuals-p (keyword; nil)
       ==> if t, residuals are computed
   [4] result (keyword; new array if compute-residuals-p is t; otherwise nil)
       <== storage space for residuals
           (not used unless compute-residuals-p is true)
returns
   [1] vector with estimated parameters
   [2] residuals
---
Note: uses Lisp versions of Cholesky factorization routines
      from linpack")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ORDINARY-LEAST-SQUARES-Q-R" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DEPENDENT-VARIABLE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LIST-OF-INDEPENDENT-VARIABLES" :PACKAGE-NAME "SAPA" :EXTERNALP
       NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-STANDARD-ERRORS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-CORRELATION-MATRIX-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESIDUALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "OR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "COMPUTE-STANDARD-ERRORS-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL)
         (:NAME "COMPUTE-CORRELATION-MATRIX-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "DEPENDENT-VARIABLE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] dependent-variable (required)
       ==> a vector
   [2] list-of-independent-variables (required)
       ==> a list of either vectors, functions or mixture thereof
   [3] compute-residuals-p (keyword; nil)
       ==> if t, residuals are computed
   [4] compute-standard-errors-p (keyword; nil)
       ==> if t, standard errors for parameter estimates are computed,
           along with residuals (even if compute-residuals-p is nil)
   [5] compute-correlation-matrix-p (keyword; nil)
       ==> if t, correlation matrix for parameter estimates is computed,
           along with residuals and standard errors (even if either
           of their associated keywords is nil) 
   [6] residuals (keyword; nil or vector)
       <== storage space for residuals
           (nil unless either compute-residuals-p,
           compute-standard-errors-p or
           compute-correlation-matrix-p is true)
returns
   [1] vector with parameter estimates
   [2] vector with residuals
   [2] standard error of residuals
   [3] vector with standard errors of parameter estimates
   [4] correlation matrix
---
Note: this routine is based on the discussion
      in ``Nonlinear Regression Analysis and Its Applications''
      by Bates and Watts, Wiley, 1988.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WEIGHTED-LINEAR-LEAST-SQUARES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VERSUS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "I" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "FLOAT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "I" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
             ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
              (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
            2))))))
      ((:NAME "WEIGHTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-COVARIANCE-MATRIX-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESIDUALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "COMPUTE-RESIDUALS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] y (required)
       ==> a sequence with values of y_k's, the dependent variable.
   [2] versus (keyword; equally spaced & centered values)
       ==> a sequence or function giving values of x_k's,
           the independent variable
   [3] weights (keyword; nil)
       ==> if vector supplied, these are used as weights
           on the observations (nil implies that all y_k's
           are equally weighted)
   [4] compute-residuals-p (keyword; nil)
       ==> if t, residuals are computed
   [5] compute-covariance-matrix-p (keyword; nil)
       ==> if t, calculates and returns 2x2 var/covar matrix
   [6] residuals (keyword; nil or vector)
       <== a sequence to be stuffed with the residuals
           (not used unless compute-residuals-p is true)
fits model y_k = alpha + beta * x_k, and
returns
   [1] estimate of intercept alpha
   [2] estimate of slope beta
   [3] estimate of residual variance
   [4] residuals (if compute-residuals-p is true)
   [5] covariance matrix for parameter estimates
       (if compute-covariance-matrix-p is true)
---
Note: see Chapter 2 of Draper and Smith, 1966")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DURBIN-WATSON-TEST-STATISTIC" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "RESIDUALS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a set of residuals in a seqeunce,
returns the Durbin-Watson test statistic")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREDICTED-Y-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INTERCEPT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SLOPE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a number
   [2] intercept (required)
       ==> intercept of a line
   [3] slope (required)
       ==> slope of a line
returns
   [1] intercept + slope*x")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-PREDICTED-Y-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "RESIDUAL-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "COVARIANCE-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a number
   [2] residual-variance (required)
       ==> the residual variance as returned
           by weighted-linear-least-squares
   [3] covariance-matrix (required)
       ==> covariance matrix for estimated
           intercept and slope as returned
           by weighted-linear-least-squares
returns
   [1] the variance of the predicted value of y
       at x
---
Note: see Equation (1.4.8), p. 24, Draper and Smith, 1966")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VAR-PREDICTED-MEAN-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "COVARIANCE-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] x (required)
       ==> a number
   [2] covariance-matrix (required)
       ==> covariance matrix for estimated
           intercept and slope as returned
           by weighted-linear-least-squares
returns
   [1] the variance of the predicted mean of y
       at x
---
Note: see page 56, Draper and Smith, 1966")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KERNEL-PDF-ESTIMATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "START-X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INCREMENT-X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WINDOW-WIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "WINDOW-WIDTH-FROM-SILVERMAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
        (:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RESULT-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        (:NAME "INITIAL-ELEMENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 0.0)
       (:NAME "RESULT-PDF-SUPPLIED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "RESULT-X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> a sequence of real-valued numbers
   [2] start-x (required)
       ==> first point at which pdf is
           to be estimated
   [3] increment-x (required)
       ==> increment between points at which pdf is
           to be estimated (i.e., second point is
           at start-x + increment-x, third point is
           at start-x + 2*increment-x, etc)
   [4] n-pdf (required)
       ==> number of points at which pdf is
           to be estimated
   [5] window-width (keyword; Silverman's formula)
       ==> window width of kernel pdf estimator
   [6] result-pdf (keyword; vector of length n-pdf)
       <== vector to hold pdf estimate
   [7] result-x (keyword; vector of length n-pdf)
       <== vector to hold points at which
           pdf was estimated
computes a pdf estimate using the normal (Gaussian) kernel and
returns
   [1] the pdf estimate (in result-pdf)
   [2] the points associated with the pdf estimates (in result-x)
   [3] the window width")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WINDOW-WIDTH-FROM-SILVERMAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a-seq,
returns the window width for kernel pdf estimation
given on page 48, Equation (3.31), of Silverman, 1986")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-A0+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "2.50662823884d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-A1+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-18.61500062529d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-A2+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "41.39119773534d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-A3+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-25.44106049637d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-B1+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-8.4735109309d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-B2+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "23.08336743743d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-B3+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-21.06224101826d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-B4+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "3.13082909833d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-C0+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-2.78718931138d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-C1+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "-2.29796479134d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-C2+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "4.85014127135d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-C3+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "2.32121276858d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-D1+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "3.54388924762d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPND-D2+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE "1.63706781897d0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AS-111" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION
     "adapted from AS 111 --- FORTRAN routine ppnd")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C1+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.01")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C2+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.222222")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C3+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.32")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C4+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.4")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C5+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "1.24")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C6+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "2.2")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C7+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "4.67")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C8+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "6.66")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C9+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "6.73")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C10+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "13.32")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C11+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "60.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C12+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "70.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C13+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "84.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C14+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "105.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C15+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "120.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C16+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "127.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C17+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "140.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C18+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "175.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C19+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "210.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C20+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "252.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C21+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "264.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C22+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "294.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C23+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "346.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C24+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "420.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C25+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "462.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C26+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "606.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C27+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "672.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C28+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "707.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C29+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "735.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C30+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "889.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C31+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "932.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C32+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "966.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C33+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "1141.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C34+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "1182.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C35+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "1278.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C36+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "1740.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C37+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "2520.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-C38+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "5040.0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-AA+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.6931471806d0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-E+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "5.e-7")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-PMIN+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "2.e-6")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+PPCHI2-PMAX+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "0.999998")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AS-91" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AS-91-BLOCK-1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "G" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "C" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AS-91-BLOCK-4" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "XX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "C" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "G" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INCOMPLETE-GAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "arguments:
a  --- parameter value > 0
x  --- variable >= 0
returns three values:
value of incomplete gamma function at a and x;
the numerator (little gamma of a and x);
the denominator (gamma of a);
see Section 6.2 of NR")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INCOMPLETE-GAMMA-Q" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "arguments:
a  --- parameter value > 0
x  --- variable >= 0
returns three values:
value of incomplete gamma function at a and x;
the numerator (big gamma of a and x);
the denominator (gamma of a);
see Section 6.2 of NR")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+NR-GSER-ITMAX+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "100")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+NR-GSER-EPS+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "3.e-7")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERIES-REPRESENTATION-FOR-INCOMPLETE-GAMMA" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTINUED-FRACTION-REPRESENTATION-FOR-INCOMPLETE-GAMMA"
      :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-SQRT-8-OVER-E+" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(SQRT (/ 8.0d0 (EXP 1.0d0)))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-4-TIME-EXP-OF-1-OVER-4+" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(* 4.0d0 (EXP 0.25d0))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SAPA-4-TIME-EXP-OF-MINUS-1-POINT-35+" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(* 4.0d0 (EXP (- 1.35d0)))")
    (:TYPE :FUNCTION :SYMBOL (:NAME "RANORM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "returns a random deviate from a normal distribution
with zero mean and unit variance")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RANORMS" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given:
   [1] n (required)
       ==> number of normal random deviates
           to be generated
   [2] result (keyword; vector of length n)
       <== vector to hold random deviates
returns:
   [1] result, a vector with n normal random deviates
       (i.e., a realization of length n of a white
       noise process from a normal distribution)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-WHITE-NOISE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NORMAL" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] n (required)
       ==> a sample size
   [2] distribution (keyword; :normal)
       ==> either a keyword or a function with no arguments
           that returns a random deviate from a particular
           distribution. Choices are
            :binary :cauchy :chi-square-2
            :double-exponential :exponential
            :extreme-value :Gaussian (same as :normal)
            :logistic :lognormal :normal :uniform
   [3] result (keyword; vector of length n)
       <== a sequence in which results are to be stored
return
   [1] result, containing n samples from a white noise process
       with a distribution specified by the keyword distribution")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-MA-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PROCESS-VARIANCE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] coeffs (required)
       ==> sequence of length q with MA coefficients:
           x_t = e_t - coeffs_0*e_{t-1}
                 - coeffs_1*e_{t-2}
                 - ... - coeffs_{q-1}*e_{t-q}
       (see Equation (43a) in the SAPA book)
   [2] variance (required)
       ==> process variance or innovations variance
           (see keyword process-variance-p)
   [3] sample-size (required)
       ==> length of generated time series
   [4] process-variance-p (keyword; t)
       ==> if t, variance is taken to be process variance
           if nil, variance is taken to be innovations variance
   [5] result (keyword; vector of length sample-size)
       <== vector with simulated series
generates realization of zero mean normally distributed MA(q) process and
returns
   [1] vector of length sample-size with realization")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-AR-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PROCESS-VARIANCE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST-OF-LOWER-ORDER-PHI" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST-OF-LOWER-ORDER-PEV" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        (:NAME "INITIAL-ELEMENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 0.0)
       (:NAME "RESULT-SUPPLIED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] coeffs (required)
       ==> sequence of length p with AR coefficients:
           x_t = coeffs_0*x_{t-1} + coeffs_1*x_{t-2}
                 + ... + coeffs_{p-1}*x_{t-p} + e_t
           (see Equation (392a) in the SAPA book;
           the coefficients can be real or complex-valued)
   [2] variance (required)
       ==> process variance or innovations variance
           (see keyword process-variance-p)
   [3] sample-size (required)
       ==> length of generated time series
   [4] process-variance-p (keyword; t)
       ==> if t, variance is taken to be process variance
           if nil, variance is taken to be innovations variance
   [5] list-of-lower-order-phi (keyword; nil)
       ==> to bypass call to step-down-Levinson-Durbin-recursions
           (useful for multiple realizations)
   [6] list-of-lower-order-pev (keyword; nil)
       ==> to bypass call to step-down-Levinson-Durbin-recursions
   [7] result (keyword; vector of length sample-size)
       <== vector with simulated series
generates realization of zero mean normally distributed AR(p) process and
returns
   [1] result, vector of length sample-size with realization
   [2] list-of-lower-order-phi (can be used on subsequent calls
       to this function to bypass call to
       step-down-Levinson-Durbin-recursions)
   [3] list-of-lower-order-pev (can be also used on subsequent calls)
---
Note: this function generates the proper stationary initial conditions")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STEP-DOWN-LEVINSON-DURBIN-RECURSIONS" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PROCESS-VARIANCE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] coeffs (required)
       ==> sequence of length p with AR coefficients:
           x_t = coeffs_0*x_{t-1} + coeffs_1*x_{t-2}
                 + ... + coeffs_{p-1}*x_{t-p} + e_t
           (see Equation (392a) in the SAPA book;
           the coefficients can be real or complex-valued)
   [2] variance (required)
       ==> process variance or innovations variance
           (see keyword process-variance-p)
   [3] process-variance-p (keyword; t)
       ==> if t, variance is taken to be process variance
           if nil, variance is taken to be innovations variance
computes best linear prediction coefficients of orders 1, 2, ..., p-1
and prediction error variances of orders 0 (process variance), 1, ..., p and
returns
   [1] list of vectors with best linear prediction coefficients
       going from order 1 to order p;
   [2] list of prediction error variances going from order 0 to order p
---
Note: see item [4] of the Comments and Extensions
      to Section 9.4 of the SAPA book.  The values returned by
      this function can be used to set the keyword parameters
      list-of-lower-order-phi and list-of-lower-order-pev in
      the function generate-ar-time-series")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIMULATE-TIME-SERIES-FROM-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N-TOTAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 4
        ((:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
         (:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] n-series (required)
       ==> length of time series to be simulated
   [2] sdf (required)
       ==> spectral density function (sdf) defined for
           0 <= f <= 1/(2.0 sampling-time) -- the
           sdf is assumed to be two-sided and symmetric
           about f = 0
   [3] sampling-time (keyword; 1.0)
       ==> the assumed sampling time (delta t)
   [4] n-total (keyword; 4 * next power of 2 for n-series)
       ==> a power of 2 controlling degree of accuracy
           of the approximation (the larger, the better --
           see Percival, 1992, for details)
   [5] result (keyword; vector of length n-series)
       <== a vector to contain simulated time series
returns
   [1] a vector of length n-series generated from sdf
---
Note: the method used here is an approximate frequency domain
      technique; in particular, it will NOT simulate the DC component
      correctly, so beware of using this function in studies
      where the process mean is of important")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACVS-FOR-TIME-SERIES-SIMULATED-FROM-SDF" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N-TOTAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 4
        ((:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
         (:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "N-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] n-series (required)
       ==> length of time series simulated using
           simulate-time-series-from-sdf
           (must be a power of 2)
   [2] sdf (required)
       ==> spectral density function (sdf) defined for
           0 <= f <= 1/(2.0 sampling-time) -- the
           sdf is assumed to be two-sided and symmetric
           about f = 0
   [3] sampling-time (keyword; 1.0)
       ==> the assumed sampling time (delta t)
   [4] n-total (keyword; 4 * next power of 2 for n-series)
       ==> a power of 2 controlling degree of accuracy
           of the approximation (the larger, the better --
           see Percival, 1992, for details)
   [5] result (keyword; vector of length n-series)
       <== a vector to contain simulated time series
returns
   [1] a vector with the theoretical acvs from lag 0
       to n-series - 1 for a time series generated via a call
       to simulate-time-series-from-sdf with n-series,
       sdf, sampling-time and n-total set to the same values")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COSINE-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "NORMALIZATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "UNITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a-time-series (required)
       <=> a vector containing a time series;
           this vector is modified UNLESS keyword result
           is bound to a different vector
   [2] taper-parameter (keyword; 1.0, i.e., Hanning data taper)
       ==> a number >= 0.0 and <= 1.0 that specifies the degree
           of tapering (parameter p of Equation (209)).
   [3] normalization (keyword; :unity)
       ==> if :unity, taper normalized such that
           its sum of squares is equal to unity (Equation (208a));
           if :N, taper normalized such that
           its sum of squares is equal to the number of points
           in the time series
   [4] result (keyword; a-time-series)
       <=> a vector to contain time series multiplied
           by cosine data taper
returns
   [1] a vector containing the tapered time series
   [2] C_h, the variance inflation factor
       computed using Equation (251b) in the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HANNING-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      ((:NAME "NORMALIZATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "UNITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "calls cosine-data-taper! with taper-parameter set to 1.0")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DPSS-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 4.0)
      ((:NAME "NORMALIZATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "UNITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a-time-series (required)
       <=> a vector containing a time series;
           this vector is modified UNLESS keyword result
           is bound to a different vector
   [2] taper-parameter (keyword; 4.0)
       ==> a number > 0.0 that specifies NW,
           the product of the sample size and
           the half-width of the concentration interval
           (see SAPA, page 211)
   [3] normalization (keyword; :unity)
       ==> if :unity, taper normalized such that
           its sum of squares is equal to unity (Equation (208a));
           if :N, taper normalized such that
           its sum of squares is equal to the number of points
           in the time series
   [4] result (keyword; a-time-series)
       <=> a vector to contain time series multiplied
           by cosine data taper
returns
   [1] a vector containing the tapered time series
   [2] C_h, the variance inflation factor
       computed using Equation (251b) in the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUPPLIED-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "HANNING-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "INITIAL-ELEMENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 1.0)))
      ((:NAME "NORMALIZATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "UNITY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "A-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] a-time-series (required)
       <=> a vector containing a time series;
           this vector is modified UNLESS keyword result
           is bound to a different vector
   [2] taper-parameter (keyword; vector with Hanning taper)
       ==> a vector containing the supplied data taper
           (must be the same length as a-time-series);
           unmodified upon return
   [3] normalization (keyword; :unity)
       ==> if :unity, taper normalized such that
           its sum of squares is equal to unity (Equation (208a));
           if :N, taper normalized such that
           its sum of squares is equal to the number of points
           in the time series
   [4] result (keyword; a-time-series)
       <=> a vector to contain time series multiplied
           by the supplied data taper
returns
   [1] a vector containing the tapered time series
   [2] C_h, the variance inflation factor
       computed using Equation (251b) in the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CENTER&TAPER-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "RECENTER-AFTER-TAPERING-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESTORE-POWER-OPTION-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a sequence of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [3] start (keyword; 0)
       ==> start index of sequence to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of sequence to be used
   [5] data-taper (keyword; nil)
       ==> nil or a tapering function
   [6] data-taper-parameters (keyword)
       ==> parameters for tapering function (not used
           if data-taper is nil)
   [7] recenter-after-tapering-p (keyword; t)
       ==> if t and data-taper is a function,
           centers tapered series by subtracting
           off its sample mean
   [8] restore-power-option-p (keyword; t)
       ==> if t and data-taper is a function,
           normalizes tapered series to have same
           sum of squares as before tapering
   [9] result (keyword; vector of size (- end start))
       <== sequence to hold centered time series
returns
   [1] result, the sequence containing the centered and/or
       tapered time series (the contents of time-series
       are unaltered unless it is also bound to result)
   [2] the number used to center the time series
       (this is nil if center-data is nil)
   [3] C_h, the variance inflation factor due to the data taper
---
Note: see also center&prewhiten&taper-time-series
      in filtering.lisp")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BESSI0-NR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)) :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FILTER-TIME-SERIES-DIRECT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a time series
           x_0, x_1, ..., x_{N-1}
   [2] the-filter (required)
       ==> a vector containing the filter coefficients
           g_0, g_1, ..., x_{K-1}
   [3] start (keyword; 0)
       ==> start index of time-series to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of time-series to be used
   [5] result (keyword; vector of appropriate length)
       <== vector to contain filtered time series
                 K-1
           y_t = SUM g_k x_{t+K-1-k},  t = 0, ..., N-K+1
                 k=0
 returns
   [1] result, a vector containing the filtered time series
   [2] the number of values in the filtered time series
---
Note: result can be the same as time-series")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FILTER-TIME-SERIES-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "FFT-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 4
        ((:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "VERBOSE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
        (:NAME "INITIAL-ELEMENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T) 0.0)
       (:NAME "RESULT-SUPPLIED-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a time series
           x_0, x_1, ..., x_{N-1}
   [2] the-filter (required)
       ==> a vector containing the filter coefficients
           g_0, g_1, ..., x_{K-1}
   [3] start (keyword; 0)
       ==> start index of time-series to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of time-series to be used
   [5] fft-size (keyword; 4 * power of 2 that is ceiling for filter length)
       ==> size of fft's to be used (must be a power of 2)
   [6] verbose-p (keyword; nil)
       ==> if t, prints line after each block of data is processed;
           if nil, prints nothing
   [7] result (keyword; vector of appropriate length)
       <== vector to contain filtered time series
                 K-1
           y_t = SUM g_k x_{t+K-1-k},  t = 0, ..., N-K+1
                 k=0
 returns
   [1] result, a vector containing the filtered time series
   [2] the number of values in the filtered time series
---
Note: result can be the same as time-series")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FILTER-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "TECHNIQUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "FASTEST" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a time series
           x_0, x_1, ..., x_{N-1}
   [2] the-filter (required)
       ==> a vector containing the filter coefficients
           g_0, g_1, ..., x_{K-1}
   [3] start (keyword; 0)
       ==> start index of time-series to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of time-series to be used
   [5] technique (keyword; :fastest)
       ==> if :fastest, tries to pick fastest method;
           if :fft, uses fft-based method;
           if :direct, uses direct method
   [6] result (keyword; vector of appropriate length)
       <== vector to contain filtered time series
                 K-1
           y_t = SUM g_k x_{t+K-1-k},  t = 0, ..., N-K+1
                 k=0
 returns
   [1] result, a vector containing the filtered time series
   [2] the number of values in the filtered time series
---
Note: result can be the same as time-series")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IDEAL-LOW-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] k (required)
       ==> index of member of impulse response sequence (irs)
           to be calculated (must be an integer)
   [2] W (required)
       ==> the cutoff frequency, standardized such that
            0 < W < 0.5 = Nyquist frequency
returns
   [1] kth member of the impulse response sequence
       for an ideal low-pass filter with cutoff frequency W
---
Note: see Section 5.8 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IDEAL-HIGH-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] k (required)
       ==> index of member of impulse response sequence (irs)
           to be calculated (must be an integer)
   [2] W (required)
       ==> the cutoff frequency, standardized such that
            0 < W < 0.5 = Nyquist frequency
returns
   [1] kth member of the impulse response sequence
       for an ideal low-pass filter with cutoff frequency W")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "IDEAL-BAND-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W-LOW" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W-HIGH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] k (required)
       ==> index of member of impulse response sequence (irs)
           to be calculated (must be an integer)
   [2] W-low (required)
       ==> the low frequency cutoff (in standardized units)
   [3] W-high (required)
       ==> the high frequency cutoff (in standardized units
           so that 0 <= W-low < W-high <= 0.5, the assumed
           Nyquist frequency).
returns
   [1] k-th member of the impulse response sequence
       for an ideal band-pass filter")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-LEAST-SQUARES-LOW-PASS-FILTER" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FILTER-LENGTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CONVERGENCE-FACTORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.5)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "FILTER-LENGTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] filter-length (required)
       ==> an odd positive integer = 2L +1
   [2] W (required)
       ==> a cutoff frequency greater than 0
           and less than the Nyquist frequency
   [3] convergence-factors (keyword; nil)
       ==> a one-argument function that maps
           an integer to a convergence factor;
           nil is also acceptable, in which case
           no convergence factors are used
   [4] Nyquist-frequency (keyword; 0.5)
       ==> the Nyquist frequency
   [5] result (keyword; vector of length filter-length)
       <== vector of length filter-length
           into which filter coefficients
           are placed (returned by the function)
uses a least squares approximation to a low-pass filter and
returns
   [1] a symmetric low-pass filter of length 2L+1
       and a gain of unity at zero frequency;
       i.e., result(0) = result(2L)
             result(1) = result(2L-1)
             etc., and
             (sum result) = 1.0
---
Note: see Section 5.8 of the SAPA book;
      (aref result 0)       corresponds to element -L of the filter;
      (aref result L)       corresponds to element  0 of the filter;
      (aref result (* 2 L)) corresponds to element  L of the filter")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIANGULAR-CONVERGENCE-FACTORS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FILTER-LENGTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-DPSS-LOW-PASS-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FILTER-LENGTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DELTA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.5)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "FILTER-LENGTH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] filter-length (required)
       ==> an odd positive integer = 2L +1
   [2] delta (required)
       ==> ``W'' parameter for dpss in user
           units (see page 182 of the SAPA book)
   [2] W (required)
       ==> a cutoff frequency greater than 0
           and less than the Nyquist frequency
   [3] Nyquist-frequency (keyword; 0.5)
       ==> the Nyquist frequency
   [4] result (keyword; vector of length filter-length)
       <== vector of length filter-length
           into which filter coefficients
           are placed (returned by the function)
uses a dpss as convergence factors in least squares approximation
to a low-pass filter and
returns
   [1] a symmetric low-pass filter of length 2L+1
       and a gain of unity at zero frequency;
       i.e., result(0) = result(2L)
             result(1) = result(2L-1)
             etc., and
             (sum result) = 1.0
---
Note: see Section 5.9 of the SAPA book;
      (aref result 0)       corresponds to element -L of the filter;
      (aref result L)       corresponds to element  0 of the filter;
      (aref result (* 2 L)) corresponds to element  L of the filter")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPOSE-SYMMETRIC-FILTERS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given any number of symmetric filters
(each of odd length and each represented
by a vector of coefficients),
returns the composite filter
that will produce an output
identical to that obtained
by cascading the individual filters")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSFER-FUNCTION-FOR-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)
          ((:NAME "EXPT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "ABS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
           2)
          -100.0))))
      ((:NAME "ACTUAL-INDEX-OF-1ST-FILTER-COEFF" :PACKAGE-NAME "SAPA"
        :EXTERNALP NIL)
       0)
      ((:NAME "N-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 4
        ((:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "THE-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.5)
      ((:NAME "RESULT-TF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "N-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 2))))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "N-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 2))))))
     :DOCUMENTATION "given
   [1] the-filter (required)
       ==> a vector of filter coefficients
   [2] tf-transformation (keyword; mod squared in dB with 0 mapped to -100 dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all of the elements of the transfer function
   [3] actual-index-of-1st-filter-coeff (keyword; 0)
       ==> the filter coefficient in (aref the-filter 0) is assumed
           to have an index equal to whatever is given here
           (this is only needed if the phase of the transfer function
           is needed)
   [4] N-fft (keyword; 4 * (next-power-of-2 (length the-filter)))
       ==> the length of vector to be used in the fast Fourier transform 
           -- the larger this is, the finer the grid of frequencies
           over which the transfer function is computed; this number
           MUST be a power of 2.
   [5] return-frequencies-p (keyword; nil)
       ==> if t, the frequencies associated with the transfer function
           are computed and returned in result-freq
   [6] Nyquist-frequency (keyword; 0.5)
       ==> the Nyquist frequency
   [7] result-tf (keyword; vector of length (1+ (/ N-fft 2)))
       <== vector of length (1+ (/ N-fft 2))
           into which the properly transformed transfer function
           is placed (returned by the function)
   [8] result-freq (keyword; vector of length (1+ (/ N-fft 2)) if return-frequencies-p t)
       <== vector of length (1+ (/ N-fft 2))
           into which the frequencies associated with the values
           in result-tf are placed if return-frequencies-p is true
           (returned by the function)
returns
   [1] result-tf, a vector holding
       the properly transformed transfer function
   [2] nil (if return-frequencies-p is nil) or
       result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the frequencies associated with values
       in  result-tf
---
Note: see Section 5.3 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "THREE-POINT-SMOOTHER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a sequence of length N,
returns a sequence of length N-2 formed by filtering
the input sequence with a three-point filter
with coefficients 1/4, 1/2 and 1/4
---
Note: see Section 5.7 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "N-APPLICATIONS-OF-THREE-POINT-SMOOTHER" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "A-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] a-seq (required)
       ==> a sequence of length 2*n + 1 or greater
   [2] n (required)
       ==> positive integer indicating the number
           of times the three-point smoother is
           to be applied
returns
   [1] the result of repetitively smoothing a-seq
       using the function three-point-smoother")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPONENTIAL-SMOOTHING" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ALPHA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INITIAL-PREDICTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "ELT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0))
      ((:NAME "RETURN-SMOOTHED-VALUES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "N-PREDICTIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "RESULT-SMOOTHED" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-SMOOTHED-VALUES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "RESULT-PREDICTIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "PLUSP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "N-PREDICTIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "N-PREDICTIONS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a sequence of numbers
   [2] alpha (required)
       ==> parameter controlling the degree of exponential smoothing
           (usually  0 < alpha < 1)
   [3] initial-prediction (keyword; first element of time-series)
       ==> to get the smoother going, we need a ``prediction'' for
           the first element in the sequence time-series -- two
           common hacks are the first element itself (the default)
           or 0 (if the time series has a zero sample mean)
   [4] return-smoothed-values-p (keyword; t)
       ==> if t, returns smoothed (i.e., filtered) time series
   [5] n-predictions (keyword; 0)
       ==> number of predictions desired
   [6] result-smoothed (keyword; vector of length of time-series or nil)
       <== a sequence to hold smoothed (filtered) time series -- used
           only if return-smoothed-values-p is true
   [7] result-predictions (keyword; vector of length n-predictions or nil)
       <== a sequence to hold predicted values of the time series --
           used only if n-predictions is positive
returns
   [1] sum-of-squares of prediction errors
   [2] either one step ahead prediction (if n-predictions is 0)
       or vector of length n-predictions if n-predictions > 0)
   [3] vector with smoothed values
       (nil if return-smoothed-values-p is true)
---
Note: see Section 7.3 of ``Time Series: A Biostatistical Introduction''
by Diggle, 1990")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RUNNING-MEDIAN" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a sequence of numbers
   [2] K (required)
       ==> positive integer giving the number of points
           in the running median
   [3] result (keyword; vector of appropriate length)
       <== a sequence to hold running medians
           of time series
return
   [1] result, the vector of running medians
        of K consecutive points")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CENTER&PREWHITEN&TAPER-TIME-SERIES" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RECENTER-AFTER-PREWHITENING-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "RECENTER-AFTER-TAPERING-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESTORE-POWER-OPTION-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP
             NIL))))
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a sequence of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [3] start (keyword; 0)
       ==> start index of sequence to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of sequence to be used
   [5] prewhitening-filter (keyword; nil)
       ==> vector with coeffients of prewhitening filter
           or nil (if no prewhitening is to be done)
   [6] recenter-after-prewhitening-p (keyword; t)
       ==> if t, prewhitened series is centered using sample mean
           (not used if  prewhitening-filter is nil)
   [7] data-taper (keyword; nil)
       ==> nil or a tapering function
   [8] data-taper-parameters (keyword)
       ==> parameters for tapering function (not used
           if data-taper is nil)
   [9] recenter-after-tapering-p (keyword; t)
       ==> if t and data-taper is a function,
           centers tapered series by subtracting
           off its sample mean
  [10] restore-power-option-p (keyword; t)
       ==> if t and data-taper is a function,
           normalizes tapered series to have same
           sum of squares as before tapering
  [11] result (keyword; vector of size (- end start))
       <== sequence to hold centered, prewhitened
           and tapered time series
returns
   [1] result, the sequence containing the centered, prewhitened
       and tapered time series (time-series are unaltered unless
       it is bound to result)
   [2] the number used to center the time series
       (this is nil if center-data is nil)
   [3] C_h, the variance inflation factor due to the data taper
---
Note: see also center&taper-time-series in tapers.lisp")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WHICH-IS-FASTER?" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N-TS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL (:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "ACS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing the time series
   [2] start (keyword; 0)
       ==> start index of time-series to be used
   [3] end (keyword; length of time-series)
       ==> 1 + end index of time-series to be used
   [4] center-data-p (keyword; t)
       ==> if t, subtract sample mean of time series
           prior to computing the acvs;
           if nil, do not subtract the sample mean
   [5] acs-p (keyword; nil)
       ==> return autocorrelation sequence
           rather than autocovariance sequence
   [6] result (keyword; vector of length n)
       <== vector to hold acvs (or acs)
calculates autocovariance (or autocorrelation) sequence using fft's and
returns
   [1] result, a vector with the sample acvs (or acs)
   [2] sample variance of time series (with mean treated
       as specified by center-data-p keyword)
---
Note: see Equations (191a) and (190b) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BIASED-ACVS->UNBIASED-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "BIASED-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a biased estimate of the acvs,
returns the corresponding unbiased estimate")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-VARIOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "TIMES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given:
   [1] time-series (required)
       ==> a vector containing the time series
   [2] times (required)
       ==> a vector containing the associated times
returns
   [1] the sample variogram
   [2] associated lags
---
Note: see Diggle's book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "YULE-WALKER-ALGORITHM-GIVEN-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "APPROXIMATE-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "FORWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "BACKWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
   [7] approximate-MSEs (keyword; a vector of length p+1)
       <== estimates of innovations variance (mean square errors)
           for models of order 0, 1, ..., p (the innovations variance
           for the zeroth order model is the sample variance)
   [8] reflection-coeffs (keyword; a vector of length p)
       <== estimates of reflection coefficients phi_{1,1}, ..., phi_{p,p}
   [9] forward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed forward prediction errors
  [10] backward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed backward prediction errors
uses the Yule-Walker method to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's; this number is also given in
       (elt approximate-MSEs p)
   [3] approximate-MSEs
   [4] reflection-coeffs
   [5] forward-prediction-errors
   [6] backward-prediction-errors
---
Note: see p. 420 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "YULE-WALKER-ALGORITHM-GIVEN-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "APPROXIMATE-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] acvs (required)
       ==> a vector containing values of the acvs
           for a real-valued time series x_t
           from lag 0 up to (and including) p
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
   [4] approximate-MSEs (keyword; a vector of length p+1)
       <== estimates of innovations variance (mean square errors)
           for models of order 0, 1, ..., p (the innovations variance
           for the zeroth order model is the sample variance)
   [5] reflection-coeffs (keyword; a vector of length p)
       <== estimates of reflection coefficients phi_{1,1}, ..., phi_{p,p}
uses the Yule-Walker method to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's; this number is also given in
       (elt approximate-MSEs p)
   [3] approximate-MSEs
   [4] reflection-coeffs
---
Note: see Sections 9.3 and 9.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BURG-ALGORITHM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "APPROXIMATE-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "FORWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "BACKWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "EXACT-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued or
           complex-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
   [7] approximate-MSEs (keyword; a vector of length p+1)
       <== estimates of innovations variance (mean square errors)
           for models of order 0, 1, ..., p (the innovations variance
           for the zeroth order model is the sample variance)
   [8] reflection-coeffs (keyword; a vector of length p)
       <== estimates of reflection coefficients phi_{1,1}, ..., phi_{p,p}
   [9] forward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed forward prediction errors
  [10] backward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed backward prediction errors
  [11] exact-MSEs (keyword; a vector of length p+1)
       <== another set of estimates of innovations variance
           for models of order 0, 1, ..., p; these estimates
           are based on Equation (419a) of the SAPA book
uses Burg's algorithm to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's; this number is also given in
       (elt approximate-MSEs p)
   [3] approximate-MSEs
   [4] reflection-coeffs
   [5] forward-prediction-errors
   [6] backward-prediction-errors
   [7] exact-MSEs
---
Note: see Section 9.5 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FAST-FORWARD-BACKWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "PSEUDO-REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued or
           complex-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
   [7] pseudo-reflection-coeffs (keyword; a vector of length p)
       <== sequence of reflection coefficients computed
           stepwise by the algorithm, but these do not correspond
           to the estimated phi_{k,p} (even if the estimated
           AR model is stationary)
uses the forward/backward least squares method
to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's
   [3] pseudo-reflection-coeffs
---
Note: see Section 9.7 of the SAPA book;
      this function is an adaptation of
      the Fortran routine modcovar, pp. 258-60,
      ``Digital Spectral Analysis with Applications''
      by Marple, 1987")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORWARD-BACKWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued or
           complex-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
uses the forward/backward least squares method
to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's
---
Note: see Section 9.7 of the SAPA book;
      this function is an adaptation of
      the Fortran routine covmcov, pp. 262-4,
      ``Modern Spectrum Estimation: Theory and Application''
      by Kay, 1988")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued or
           complex-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
uses the forward least squares method
to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's
---
Note: see Section 9.7 of the SAPA book;
      this function is an adaptation of
      the Fortran routine covmcov, pp. 262-4,
      ``Modern Spectrum Estimation: Theory and Application''
      by Kay, 1988")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TWO-STEP-BURG-ALGORITHM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "APPROXIMATE-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "FORWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "BACKWARD-PREDICTION-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "EXACT-MSES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued or
           complex-valued time series x_t
   [2] p (required)
       ==> autoregressive model order;
           p should be an EVEN integer > 0 and < end - start
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, the effect of this function is to return
           a copy of the relevant portion of time-series
   [6] AR-coeffs (keyword; a vector of length p)
       <== estimates of AR coefficients phi_{1,p}, ..., phi_{p,p}
   [7] approximate-MSEs (keyword; a vector of length p+1)
       <== estimates of innovations variance (mean square errors)
           for models of order 0, 1, ..., p (the innovations variance
           for the zeroth order model is the sample variance)
   [8] reflection-coeffs (keyword; a vector of length p)
       <== estimates of reflection coefficients phi_{1,1}, ..., phi_{p,p}
   [9] forward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed forward prediction errors
  [10] backward-prediction-errors (keyword; a vector of length end - start - p)
       <== computed backward prediction errors
  [11] exact-MSEs (keyword; a vector of length p+1)
       <== another set of estimates of innovations variance
           for models of order 0, 1, ..., p; these estimates
           are based on Equation (419a) of the SAPA book
uses the two step Burg algorithm to estimate the phi's in the model
   x_t = phi_{1,p} x_{t-1} + ... + phi_{p,p} x_{t-p} + e_t
and returns
   [1] AR-coeffs, a vector containing phi_{1,p}, ..., phi_{p,p}
   [2] estimate of the innovations variance, i.e.,
       the variance of the e_t's; this number is also given in
       (elt approximate-MSEs p)
   [3] approximate-MSEs
   [4] reflection-coeffs
   [5] forward-prediction-errors
   [6] backward-prediction-errors
   [7] exact-MSEs
---
Note: see Section 9.5 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PROCESS-VARIANCE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST-OF-LOWER-ORDER-PHI" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST-OF-LOWER-ORDER-PEV" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> vector of length p with real or
           complex-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [2] variance (required)
       ==> process variance (if process-variance-p is true)
           or innovations variance (if nil)
   [3] max-lag (required)
       ==> acvs to be computed out to this lag
   [4] process-variance-p (keyword; t)
       ==> if true, required variance parameter
            is taken to be process variance;
           otherwise, it is taken to be the innovations
           variance (both variance and process-variance-p
           are ignored if the next two keyword parameters
           are supplied)
   [5] list-of-lower-order-phi (keyword; nil)
       ==> if supplied, bypasses call to step-down-Levinson-Durbin-recursions,
           in which case list-of-lower-order-pev must be supplied also
   [6] list-of-lower-order-pev (keyword; nil)
       ==> if supplied, bypasses call to step-down-Levinson-Durbin-recursions
   [7] result (keyword; vector of size max-lag + 1)
       <== vector to hold acvs for lags 0, 1, ..., max-lag
returns
   [1] result, i.e., the acvs
---
Note: see Section 9.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INNOVATIONS-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> a sequence of AR coefficients
           phi_{1,p}, ..., phi_{p,p}
   [2] innovations-variance (required)
       ==> innovations variance of the process
returns
   [1] variance of the process")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "LIST-OF-LOWER-ORDER-PHI" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "STEP-DOWN-LEVINSON-DURBIN-RECURSIONS" :PACKAGE-NAME "SAPA"
         :EXTERNALP T)
        (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> vector of length p with real or
           complex-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [2] list-of-lower-order-phi (keyword; calls step-down-Levinson-Durbin-recursions)
       ==> must contain the list that is returned by
           the function step-down-Levinson-Durbin-recursions;
           this keyword parameter is useful if the result
           of calling that function is already available
   [3] results (keyword; vector of length p)
       <== vector of size p into which
            the reflection coefficients phi_{j,j}
            of orders j = 1, 2, ..., p are placed
returns
   [1] results, i.e., the reflection coefficients
---
Note: see Section 9.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> a sequence of AR coefficients
           phi_{1,p}, ..., phi_{p,p}
   [2] result (keyword; vector of size (1+ (length AR-coeffs)))
       <== sequence to hold coefficients for prewhitening filter
           1, -phi_{1,p}, ..., -phi_{p,p}
returns
   [1] result, the prewhitening filter
---
Note: this filter can be used to compute
      forward prediction errors; to obtain
      the filter needed to compute
      backward prediction errors,
      reverse the elements in result; i.e.,
      evaluate (reverse result)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REFLECTION-COEFFS->AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SCRATCH" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] reflection-coeffs (required)
       ==> vector of length p with real-valued 
           reflection coefficients
           phi_{1,1}, phi_{2,2}, ... , phi_{p,p}
   [2] p (keyword; length of reflection-coeffs)
       ==> AR model order
   [3] scratch (keyword; vector of length p)
       ==> vector of size p used for intermediate results
   [4] results (keyword; vector of length p)
       <== vector of size p into which are placed
           the AR coefficients phi_{j,p} for model
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
returns
   [1] results, i.e., the AR coefficients
---
Note: see Section 9.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REFLECTION-COEFFS->VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INNOVATIONS-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] reflection-coeffs (required)
       ==> vector of length p with real-valued 
           reflection coefficients
           phi_{1,1}, phi_{2,2}, ... , phi_{p,p}
   [2] innovations-variance (required)
       ==> innovations variance of the process
   [3] p (keyword; length of reflection-coeffs)
       ==> AR model order
returns
   [1] variance of the process
---
Note: this is a recursive application of
      Equation (404c) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INNOVATIONS-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 256)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [2] innovations-variance (required)
       ==> innovations variance of the process
   [3] N-nonzero-freqs (keyword; 256)
       ==> the number of nonzero frequencies at which the AR sdf
           is to be computed (need NOT be a power of 2);
           the first nonzero frequency (and also spacing
           between frequencies) is given by
           1/(2 * N-nonzero-freqs * sampling time)
           = Nyquist frequency/N-nonzero-freqs;
           the last nonzero frequency is the Nyquist frequency
   [4] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [5] return-est-for-0-freq-p (keyword; t)
       ==> if t, sdf is computed at zero frequency;
           otherwise, it is not computed.
   [6] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
   [7] result-sdf (keyword; vector of correct length)
       <== vector of length N-nonzero-freqs (if return-est-for-0-freq-p is nil)
           or N-nonzero-freqs +1 (if return-est-for-0-freq-p is t)
           into which the properly transformed sdf is placed
   [8] return-frequencies-p (keyword; nil)
       ==> if t, the frequencies associated with the transfer function
           are computed and returned in result-freq
   [9] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [10] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length N-nonzero-freqs (if return-est-for-0-freq-p is nil)
           or N-nonzero-freqs +1 (if return-est-for-0-freq-p is t)
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] result-sdf, a vector holding
       the properly transformed sdf
   [2] nil (if return-frequencies-p is nil) or
       result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in  result-sdf
   [3] the length of the vector result-sdf
---
Note: see Equation (392b) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AR-COEFFS->SDF-AT-SINGLE-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INNOVATIONS-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T))))
     :DOCUMENTATION "given
   [1] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [2] innovations-variance (required)
       ==> innovations variance of the process
   [3] freq (required)
       ==> the single frequency at which the sdf is
           to be computed
   [4] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [6] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform the value of the sdf at freq
returns
   [1] properly transformed AR sdf evaluated at freq
   [2] nil (if return-frequencies-p is nil) or
       result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in  result-sdf
   [3] the length of the vector result-sdf
---
Note: see Equation (392b) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SDF->SDF-WITH-ACCURATE-PEAKS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "INNOVATIONS-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "SEARCH-METHOD" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "QUADRATIC-APPROX" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "DB-TOLERANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.1)
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10.0
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       20))
     :DOCUMENTATION "given
   [1] sdf (required)
       ==> vector with sdf for a real-valued process
           computed over a grid of frequencies (the grid
           need not be uniform) -- note that the sdf values
           can be either untransformed or transformed via
           an order preserving transformation (such as decibels)
   [2] freqs (required)
       ==> vector with frequencies corresponding to values
           in sdf (must be same size as vector with sdf values)
   [3] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [4] innovations-variance (required)
       ==> innovations variance of the process
   [5] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [6] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform any newly computed values of the sdf
   [7] search-method (keyword; :quadratic-approx)
       ==> selects between two methods to search
           for the location of peaks;
           if set to :quadratic-approx, a quadratic approximation is used;
           if set to :bisection+Newton-Raphson, an interval search
           using a combination of bisection and Newton-Raphson is used
   [8] dB-tolerance (keyword; 0.1)
       ==> convergence criterion (used if search-method
           is :quadratic-approx)
   [9] accuracy (keyword; 10 * single-float-epsilon)
       ==> convergence criterion (used if search-method
           is :bisection+Newton-Raphson)
  [10] maximum-number-of-iterations (keyword; 20)
       ==> controls the number of iterations (used if search-method
           is :bisection+Newton-Raphson)
returns
   [1] a vector with values of sdf merged
       with an additional set of values
       chosen to represent peaks accurately
   [2] the corresponding augmented vector of frequencies
   [3] the length of the two vector returned
---
Note: see pages 524--5 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTEGRATE-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FIDDLE-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 2.0)
      ((:NAME "RETURN-INTEGRATED-SDF-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "WHEN" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-INTEGRATED-SDF-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] sdf (required)
       ==> vector with sdf for a real or complex-valued process
           computed over a grid of frequencies (the grid
           need not be uniform) -- note that the sdf values
           must be untransformed (e.g., not in decibels)
   [2] freqs (required)
       ==> vector with frequencies over which
           sdf has been computed
           (must be same size as vector with sdf values)
   [3] fiddle-factor (keyword; 2.0)
       ==> values returned are all multiplied by this factor;
           the default of 2 is useful for real-valued processes
           since these have symmetric two-sided sdf's.
   [4] return-integrated-sdf-p (keyword; nil)
       ==> if t, integrated sdf as a function of frequency
           is computed and returned in result
   [5] result (keyword; vector of length sdf)
       <== vector with integrated sdf (if return-integrated-sdf-p is t)
           or nil (if return-integrated-sdf-p is nil)
returns
   [1] the integral of the sdf * fiddle-factor
   [2] result, i.e., the integrated sdf
       if return-integrated-sdf-p is t")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-PEAK-OF-AR-SDF-USING-QUADRATIC-APPROX" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "F_1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F_2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F_3" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "DB-TOLERANCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.1))
     :DOCUMENTATION "given
   [1] f_1 (required)
       ==> frequency f_1 such that f_1 < f_2 and S(f_1) < S(f_2),
           where S(.) is the sdf associated with AR-coeffs
   [2] f_2 (required)
       ==> middle frequency
   [3] f_3 (required)
       ==> frequency f_3 such that f_3 > f_2 and S(f_3) < S(f_2)
   [4] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [5] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [6] dB-tolerance (keyword; 0.1)
       ==> convergence criterion
returns
   [1] estimate of frequency of peak/valley in sdf
---
Note: for details on this method, see pages 20-21 of Adby and Dempster,
      ``Introduction to Optimization Methods''; note in particular that
      we search the inverse of the AR portion of the spectrum instead
      of the spectrum itself in the belief that the quadratic approximation
      is better with this reformulation")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-PEAK-OR-VALLEY-OF-SDF-USING-BISECTION+NEWTON-RAPHSON"
      :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "F-LEFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F-RIGHT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ERSATZ-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ERSATZ-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "ACCURACY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10.0
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       20))
     :DOCUMENTATION "given
   [1] f-left (required)
       ==> left bracket  for frequency of peak/valley
   [2] f-right (required)
       ==> right bracket for frequency of peak/valley
   [3] ersatz-acvs (required)
       ==> vector of length N with acvs (or acs) s_0 to s_{N-1}
           corresponding to sdf (only elements 1 to N-1 are used)
   [4] sampling-time (keyword; 1.0)
       ==> positive number
   [5] N (keyword; length of ersatz-acvs)
       ==> positive integer
   [6] accuracy (keyword; 10.0 * single-float-epsilon)
       ==> passed to bisection-with-Newton-Raphson
   [7] maximum-number-of-iterations (keyword; 20)
       ==> passed to bisection-with-Newton-Raphson
returns
   [1] estimate of frequency of peak/valley in sdf
   [2] number of iterations required
---
Note: searches for peak using a combination of
bisection and Newton-Raphson;
see pages 479--80 and 524--5 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-FORWARD-INNOVATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued 
           time series x_t
   [2] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series
           (the vector time-series is not altered)
   [6] result (keyword; vector of appropriate length)
       <== vector to contain forward innovations
                            p
           f_t = x_{t+p} - SUM phi_{j,p} x_{t-j},  t = 1, ..., N - p
                           j=1
returns
   [1] result, i.e., the fprward innovations")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-BACKWARD-INNOVATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing a real-valued 
           time series x_t
   [2] AR-coeffs (required)
       ==> vector with real-valued AR coefficients phi_{j,p}
           for an AR(p) model of order p:
           x_t = phi_{1,p} * x_{t-1} + phi_{2,p} * x_{t-2}
                 + ... + phi_{p,p} * x_{t-p} + e_t
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of the-seq)
       ==> 1 + end index of vector to be used
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series
           (the vector time-series is not altered)
   [6] result (keyword; vector of appropriate length)
       <== vector to contain backward innovations
                        p
           b_t = x_t - SUM phi_{j,p} x_{t+j},  t = 1, ..., N-p
                       j=1
returns
   [1] result, i.e., the backward innovations")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REGRESSION-WITH-AR-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "IND-VARS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "AR-COEFF-ESTIMATOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "BURG-ALGORITHM" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       5)
      ((:NAME "EPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.e-7)
      ((:NAME "TRACE-AR-PARAMETER-ESTIMATES-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "TRACE-LS-PARAMETER-ESTIMATES-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector with dependent variables
   [2] ind-vars (required)
       ==> a list of vector(s) with independent variable(s)
   [3] p (required)
       ==> autoregressive order
   [4] AR-coeff-estimator (keyword; #'burg-algorithm)
       ==> AR estimation procedure
   [5] maximum-number-of-iterations (keyword; 5)
       ==> ... like I said ...
   [6] eps (keyword; 1.0e-7)
       ==> a small number -- used to test for convergence
           in estimates of both regression and AR coefficients
   [7] trace-AR-parameter-estimates-p (keyword; nil)
       ==> if t, results of each iteration
           on AR parameters are printed
   [8] trace-LS-parameter-estimates-p (keyword; nil)
       ==> if t, results of each iteration
           on least squares parameters are printed
returns
   [1] estimates of least squares coefficients
   [2] estimates of AR coefficients
   [3] variance of residuals
   [4] either number of iterations required for convergence
       or nil if maximum number of iterations completed
       but convergence not yet achieved
---
Note: this function is based on Newton, TIMESLAB, page 241;
      it has NOT been thoroughly tested (particularly with
      regard to the convergence criterion),
      so a heavy dose of the usual ``caveat emptor''
      is appropriate here!!!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLIP-SIGN-OF-COEFFICIENTS!" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "A-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ONE-ITERATION-OF-TWO-STEP-BURG" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "STEP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FK" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "BK" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "PHI" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LIMIT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "H-FUNC" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "G" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ABSOLUTE-SUM-OF-VECTOR-ELEMENTS" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVAL-POLY-2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-SYMMETRIC-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "F_1" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F_2" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F_3" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "F_N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CHECK-ORTHONORMALITY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST-OF-VECTORS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given a list of vectors, computes and prints
their sum of squares and pairwise dot products, and 
returns the maximum absolute deviation from 0
of the pairwise dot products")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DPSS-TAPERS-TRI-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 4.0)
      ((:NAME "PRINT-PROGRESS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-TRUE-EIGENVALUES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] N (required)
       the sample size
   [2] number-of-tapers (required)
       number of orthonormal dpss data tapers
       to be computed
   [3] taper-parameter (keyword; 4.0)
       NW, the duration-half-bandwidth product
       (must be such that 0 < NW/N < 1/2)
   [4] print-progress-p (keyword; nil)
       if t, prints a dot after each eigenvalue
       and eigenvector has been computed
   [5] compute-true-eigenvalues-p (keyword; nil)
       if t, returns eigenvalues for eigenproblem
       of Equation (378) of the SAPA book;
       if nil, returns eigenvalues for tridiagonal
       formulation
returns
   [1] a list of length number-of-tapers of N dimensional vectors
       with orthonormal dpss's of orders 0, 1, ..., number-of-tapers - 1;
   [2] a vector of length number-of-tapers with
       eigenvalues as specified by compute-true-eigenvalues-p
---
Note: computes the dpss tapers using the tridiagonal
      formulation (see Section 8.3 of the SAPA book)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DPSS-TAPERS-THOMSON-APPROX" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 4.0)
      ((:NAME "PRINT-PROGRESS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-TRUE-EIGENVALUES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "ABSCISSAS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "DECLARE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "SPECIAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "*ABSCISSAS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
        (:NAME "*ABSCISSAS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "WEIGHTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LET" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "DECLARE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "SPECIAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "*WEIGHTS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
        (:NAME "*WEIGHTS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION "given
   [1] N (required)
       the sample size
   [2] number-of-tapers (required)
       number of orthonormal dpss data tapers
       to be computed
   [3] taper-parameter (keyword; 4.0)
       NW, the duration-half-bandwidth product
       (must be such that 0 < NW/N < 1/2)
   [4] print-progress-p (keyword; nil)
       if t, prints a dot after each eigenvalue
       and eigenvector has been computed
   [5] compute-true-eigenvalues-p (keyword; nil)
       if t, returns eigenvalues for eigenproblem
       of Equation (378) of the SAPA book;
       if nil, returns nil
   [6] abscissas (keyword; *abscissas-32-point*)
       a vector of abscissas points used
       in Gauss-Legendre quadrature
   [7] weights (keyword; *abscissas-32-point*)
       a vector of weights used
       in Gauss-Legendre quadrature
returns
   [1] a list of length number-of-tapers of N dimensional vectors
       with orthonormal dpss's of orders 0, 1, ..., number-of-tapers - 1;
   [2] a vector of length number-of-tapers with
       eigenvalues if compute-true-eigenvalues-p is t;
       nil if if compute-true-eigenvalues-p is nil
---
Note: computes the dpss tapers using Thomson's numerical
      integration scheme (see Section 8.2 of the SAPA book)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DPSS-TAPERS-INVERSE-ITERATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 4.0)
      ((:NAME "PRINT-PROGRESS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "EPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 5.e-5))
     :DOCUMENTATION "given
   [1] N (required)
       the sample size
   [2] number-of-tapers (required)
       number of orthonormal dpss data tapers
       to be computed
   [3] taper-parameter (keyword; 4.0)
       NW, the duration-half-bandwidth product
       (must be such that 0 < NW/N < 1/2)
   [4] print-progress-p (keyword; nil)
       if t, prints a dot after each eigenvalue
       and eigenvector has been computed
   [5] eps (keyword;  0.5e-4)
       controls accuracy
returns
   [1] a list of length number-of-tapers of N dimensional vectors
       with orthonormal dpss's of orders 0, 1, ..., number-of-tapers - 1;
   [2] a vector of length number-of-tapers with the
       corresponding eigenvalues
---
Note: computes the dpss tapers using inverse
      iteration (see Section 8.1 of the SAPA book)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIG-PROLATE-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAPER-PARAMETER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 4)
      ((:NAME "PRINT-PROGRESS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "COMPUTE-TRUE-EIGENVALUES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] N (required)
       the sample size
   [2] number-of-tapers (required)
       number of orthonormal trig prolate tapers
       to be computed; currently restricted to
       one of the following maximum values:
       2 if taper-parameter is 2;
       4 if taper-parameter is 3;
       5 if taper-parameter is 4;
       7 if taper-parameter is 5
   [3] taper-parameter (keyword; 4.0)
       NW, the duration-half-bandwidth product;
       currently restricted to one of the
       following integers: 2, 3, 4, 5
       (must also be such that 0 < NW/N < 1/2)
   [4] print-progress-p (keyword; nil)
       if t, prints a dot after each taper
       has been computed
   [5] compute-true-eigenvalues-p (keyword; nil)
       if t, returns eigenvalues for eigenproblem
       of Equation (378) of the SAPA book;
       if nil, returns nil
returns
   [1] a list of length number-of-tapers of N dimensional vectors
       with orthonormal trig prolate data tapers of orders
       0, 1, ..., number-of-tapers - 1;
   [2] a vector of length number-of-tapers with
       eigenvalues if compute-true-eigenvalues-p is t;
       nil if if compute-true-eigenvalues-p is nil
---
Note: computes the trig prolate approximation to
      the dpss tapers (see Section 8.4 of the SAPA book)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LIST-OF-DATA-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "N-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST-OF-DATA-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "HALF-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "RECENTER-AFTER-TAPERING-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESTORE-POWER-OPTION-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))))
      ((:NAME "RETURN-EIGENPSPECTRA-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a sequence of time series values
   [2] list-of-data-tapers (required)
       ==> a list of orthonormal data tapers,
           each of length (- end start)
   [3] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [4] start (keyword; 0)
       ==> start index of sequence to be used
   [5] end (keyword; length of time-series)
       ==> 1 + end index of sequence to be used
   [6] N-tapers (keyword; length of list-of-data-tapers)
       ==> number of data tapers to be used in list-of-data-tapers 
   [7] N-nonzero-freqs (keyword; :half-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           multitaper spectral estimate is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [8] return-est-for-0-freq-p (keyword; nil)
       ==> if t, sdf is computed at zero frequency;
           otherwise, it is not computed.
   [9] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
  [10] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
  [11] recenter-after-tapering-p (keyword; t)
       ==> if t and data-taper is a function,
           centers tapered series by subtracting
           off its sample mean
  [12] restore-power-option-p (keyword; t)
       ==> if t and data-taper is a function,
           normalizes tapered series to have same
           sum of squares as before tapering
  [13] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
  [14] result-sdf (keyword; vector of correct length)
       <== vector into which multitaper spectral estimate is placed;
           it must be exactly of the length dictated
           by N-nonzero-freqs and return-est-for-0-freq-p
  [15] return-eigenpspectra-p (keyword; t)
       ==> if t, individual eigenspectra are returned in a list
           (each eigenspectrum in the list is associated with
           the corresponding taper in list-of-data-tapers)
  [16] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral estimate
           are computed and returned in result-freq
  [17] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [18] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length N-nonzero-freqs (if return-est-for-0-freq-p is nil)
           or N-nonzero-freqs +1 (if return-est-for-0-freq-p is t)
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] result-sdf, a vector holding
       the properly transformed multitaper spectral estimate
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in  result-sdf,
       or
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-sdf
   [4] a list of untransformed eigenspectra (return-eigenpspectra-p is t),
       or
       nil (if return-eigenpspectra-p is nil)
---
Note: see Section 7.1 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EIGENSPECTRA->MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] list-of-eigenspectra (required)
       ==> list of eigenspectra (such as optionally returned
           by multitaper-spectral-estimate); each eigenspectrum
           is assumed to be untransformed (e.g., not expressed
           in dB) and represented by a vector
   [2] N-eigenspectra (keyword; length of list-of-eigenspectra)
       ==> number of eigenspectra to be used (must be less than
           or equal to the length of list-of-eigenspectra)
   [3] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
   [4] result-sdf (keyword; vector of correct length)
       <== vector into which multitaper spectral estimate is placed;
           it must be exactly the same length as each of the vectors
           in list-of-eigenspectra
returns
   [1] result-sdf, a vector holding
       the properly transformed multitaper spectral estimate
---
Note: see Section 7.1 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EIGENSPECTRA->ADAPTIVE-MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME
      "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "EIGENVALUES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VARIANCE-OF-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       100)
      ((:NAME "RESULT-DOF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL)))))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "CAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LIST-OF-EIGENSPECTRA" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] list-of-eigenspectra (required)
       ==> list of eigenspectra (such as optionally returned
           by multitaper-spectral-estimate); each eigenspectrum
           is assumed to be untransformed (e.g., not expressed
           in dB)
   [2] eigenvalues (required)
       ==> vector of eigenvalues corresponding to the dpss's
           used to create the eigenspectra (the length of eigenvalues 
           should be at least as large as the length specified
           by N-eigenspectra)
   [3] variance-of-time-series (required)
       ==> variance of time series
           from which eigenspectra were computed
   [4] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [5] N-eigenspectra (keyword; length of list-of-eigenspectra)
       ==> number of eigenspectra to be used (must be less than
           or equal to the length of list-of-eigenspectra)
   [6] maximum-number-of-iterations (keyword; 100)
       ==> maximum number of iterations
   [7] result-dof (keyword; vector of correct length)
       <== vector into which degrees of freedom for each value
           in the adaptive multitaper spectral estimate is placed;
           it must be exactly the same length as each of the vectors
           in list-of-eigenspectra
   [8] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
   [9] result-sdf (keyword; vector of correct length)
       <== vector into which adaptive multitaper spectral estimate is placed;
           it must be exactly the same length as each of the vectors
           in list-of-eigenspectra
returns
   [1] result-sdf, a vector holding
       the properly transformed adaptive multitaper spectral estimate
   [2] result-dof, a vector holding corresponding degrees of freedom
   [3] the maximum number of iterations required to reach convergence
       for all of the values in result-sdf
---
Note: see Section 7.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-CI-FOR-AMT-SDF-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SDF-DB" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DOFS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CONFIDENCE-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.95))
     :DOCUMENTATION "given
   [1] sdf-dB (required)
       ==> vector containing an adaptive multitaper spectral
           estimate expressed in decibels
   [2] dofs (required)
       ==> vector containing the degrees of freedom associated
           with the values in sdf-dB
   [3] confidence-level (keyword; 0.95)
       ==> the level of the confidence intervals to be created
returns
   [1] a vector containing the upper confidence interval
   [2] a vector containing the lower confidence interval
---
Note: see Section 7.4 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DPSS->EIGENVALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DPSS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NW" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given dpss (a vector of length N) and NW,
computes the corresponding eigenvalue using
the method of Exercise [8.1], page 390,
of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LARGEST-EIGENVALUES-OF-TRIDIAGONAL-MATRIX" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SQUARED-OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
        (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "MACHEPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "PRINT-PROGRESS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STURM-SEQUENCE-COUNT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEST-LAMBDA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SQUARED-OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "MACHEP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYMMETRIC-TRIDIAGONAL-SOLVE!" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given
   [1] diag (required)
       <=> diagonal part of symmetric tridiagonal matrix A;
           trash on output
   [1] off-diag (required)
       <=> off-diagonal part of symmetric tridiagonal matrix;
           trash on output
   [2] b (required)
       <=> on input, the right-hand side vector;
           on output, the solution X to A X = b
returns
   [4] X, the solution to A X = b, where X is the vector
       that contained b on input
---
Note: this is an implementation of Algorithm 4.3.6,
p. 156, Golub and Van Loan, 1989, with modifications
to avoid divides by zero")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYMMETRIC-TRIDIAGONAL-INFINITY-NORM" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FAST-TRIDIAG-EIGENVALUE->DPSS!" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "EIGENVALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ORDER-OF-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       25)
      ((:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "GENERATE-INITIAL-GUESS-AT-DPSS" :PACKAGE-NAME "SAPA" :EXTERNALP
         NIL)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
        (:NAME "ORDER-OF-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        (:NAME "HALF-SIZE-P" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-INITIAL-GUESS-AT-DPSS" :PACKAGE-NAME "SAPA" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ORDER-OF-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "HALF-SIZE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "HALF-SIZE-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "/" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "EVENP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
           (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
          2)
         (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KTH-EIGENVALUE-OF-TRIDIAGONAL-MATRIX" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SQUARED-OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "LAMBDA" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
        (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "MACHEPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
        T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIDIAG-EIGENVALUE->DPSS!" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EIGENVALUE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "ORDER-OF-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EPS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 10
        (:NAME "SINGLE-FLOAT-EPSILON" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T)))
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       25)
      ((:NAME "B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "GENERATE-INITIAL-GUESS-AT-DPSS" :PACKAGE-NAME "SAPA" :EXTERNALP
         NIL)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
        (:NAME "ORDER-OF-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TOEPLITZ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "R" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "X" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "Y" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] r (required)
       ==> vector of length 2*N-1 representing
           the Toeplitz matrix R(i,j) with 0 <= i,j <= N-1,
           via the 2*N-1 values
           r(0,N-1), r(0,N-2),..., r(0,1),
           r(0,0), r(1,0),..., r(N-1,0)
   [2] y (required)
       ==> right-hand side vector of length N
   [3] x (optional; vector of same size as y)
       <== solution vector of length N
solves the Toeplitz system sum_{j=0}^{N-1} r_{N-1+i-j} x_j = y_j
for i = 0, 1, ..., N-1 and
returns
   [1] x (a vector of length N)
       or
       nil (in case of a failure of the Levinson method
       due to a singular principal minor
---
Note: this function is essentially a Lisp version
      of the Fortran routine toeplz from Numerical Recipes")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HOUSEHOLDER-REDUCTION-OF-REAL-SYM-MATRIX!" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REAL-SYM-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PREPARE-FOR-EIGENVECTORS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "given
   [1] real-sym-matrix (required)
       ==> real, symmetric matrix (n by n)
   [2] prepare-for-eigenvectors-p (keyword; t)
       ==> if true, crunch real-sym-matrix for use with
           eigenvalues-and-vectors-of-sym-tridiag-matrix
returns
   [1] n-dimensional vector with diagonal elements of
       associated tridiagonal matrix
   [2] (n-1)-dimensional vector with off-diagonal elements of
       associated tridiagonal matrix
---
See tred2 in Numerical Recipes")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EIGENVALUES-AND-VECTORS-OF-SYM-TRIDIAG-MATRIX" :PACKAGE-NAME
      "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OFF-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "MAXIMUM-NUMBER-OF-ITERATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       30)
      ((:NAME "RETURN-EIGENVECTORS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "Z" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-EIGENVECTORS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "LET*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
          ((:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            ((:NAME "BACKQ-LIST" :PACKAGE-NAME "SB-IMPL" :EXTERNALP NIL)
             (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
             (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
            (:NAME "INITIAL-ELEMENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
            0.0)))
         ((:NAME "DOTIMES" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "I" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "AREF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "TEMP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            (:NAME "I" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            (:NAME "I" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
           1.0))))))
     :DOCUMENTATION "given
   [1] diag (required)
       ==> sequence of diagonal elements
           (length of, say, n)
   [2] off-diag (required)
       ==> sequence of off-diagonal elements
           (length of n-1)
   [3] maximum-number-of-iterations (keyword; 30)
       ==> maximum number of iterations
   [4] return-eigenvectors-p (keyword; t)
       ==> if true, returns eigenvalues and eigenvectors;
           if nil, just do the eigenvalues (this is faster)
   [5] z (keyword; n by n diagonal matrix)
       ==> usually bound to output from
           Householder-reduction-of-real-sym-matrix
returns
   [1] vector with n eigenvalues
       (NOT necessarily ordered by size)
   [2] if return-eigenvectors-p is true, an n by n array
       whose jth column is the eigenvector corresponding
       to the jth eigenvalue; if return-eigenvectors-p is nil,
       that's what you get!
---
This is based upon tqli in Numerical Recipes")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ABSCISSAS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(VECTOR -0.9972638618494816d0 -0.9856115115452684d0 -0.9647622555875064d0
        -0.9349060759377397d0 -0.8963211557660521d0 -0.84936761373257d0
        -0.7944837959679424d0 -0.7321821187402897d0 -0.6630442669302152d0
        -0.5877157572407623d0 -0.5068999089322294d0 -0.4213512761306353d0
        -0.3318686022821277d0 -0.2392873622521371d0 -0.1444719615827965d0
        -0.04830766568773831d0 0.04830766568773831d0 0.1444719615827965d0
        0.2392873622521371d0 0.3318686022821277d0 0.4213512761306353d0
        0.5068999089322294d0 0.5877157572407623d0 0.6630442669302152d0
        0.7321821187402897d0 0.7944837959679424d0 0.84936761373257d0
        0.8963211557660521d0 0.9349060759377397d0 0.9647622555875064d0
        0.9856115115452684d0 0.9972638618494816d0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*WEIGHTS-32-POINT*" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(VECTOR 0.007018610009469521d0 0.01627439473090571d0 0.02539206530926214d0
        0.03427386291302141d0 0.04283589802221816d0 0.0509980592623745d0
        0.05868409347853513d0 0.06582222277636181d0 0.07234579410884862d0
        0.07819389578707044d0 0.08331192422694672d0 0.08765209300440374d0
        0.0911738786957639d0 0.09384439908080441d0 0.09563872007927485d0
        0.09654008851472785d0 0.09654008851472785d0 0.09563872007927485d0
        0.09384439908080441d0 0.0911738786957639d0 0.08765209300440374d0
        0.08331192422694672d0 0.07819389578707044d0 0.07234579410884862d0
        0.06582222277636181d0 0.05868409347853513d0 0.0509980592623745d0
        0.04283589802221816d0 0.03427386291302141d0 0.02539206530926214d0
        0.01627439473090571d0 0.007018610009469521d0)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIG-PROLATE-SIGN-COSINE-COEFFICIENTS" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRODUCE-UPSILON-FUNC" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "COEFFICIENTS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-TRI-PROLATE-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "GENERATING-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERIODOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "HALF-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [5] N-nonzero-freqs (keyword; :half-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           periodogram is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [6] return-est-for-0-freq-p (keyword; nil)
       ==> if t, periodogram is computed at zero frequency;
           otherwise, it is not computed.
   [7] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [8] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [9] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
  [10] result-sdf (keyword; vector of correct length)
       <== vector into which periodogram is placed;
           it must be exactly of the length dictated
           by N-nonzero-freqs and return-est-for-0-freq-p
  [11] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the periodogram
           are computed and returned in result-freq
  [12] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [13] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length dictated by
           N-nonzero-freqs and return-est-for-0-freq-p
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] result-sdf, a vector holding
       the properly transformed periodogram
   [2] result-freq (if return-frequencies-p is t),
       a vector holding the properly transformed
       frequencies associated with values in result-sdf
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-sdf
---
Note: see Section 6.3 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIRECT-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "HALF-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "RECENTER-AFTER-TAPERING-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESTORE-POWER-OPTION-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RETURN-ACVS-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [5] N-nonzero-freqs (keyword; :half-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           direct spectral estimate is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [6] return-est-for-0-freq-p (keyword; nil)
       ==> if t, sdf is computed at zero frequency;
           otherwise, it is not computed.
   [7] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [8] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [9] data-taper (keyword; nil)
       ==> nil or a tapering function
  [10] data-taper-parameters (keyword)
       ==> parameters for tapering function (not used
           if data-taper is nil)
  [11] recenter-after-tapering-p (keyword; t)
       ==> if t and data-taper is a function,
           centers tapered series by subtracting
           off its sample mean
  [12] restore-power-option-p (keyword; t)
       ==> if t and data-taper is a function,
           normalizes tapered series to have same
           sum of squares as before tapering
  [13] return-acvs-p (keyword; nil)
       ==> if t, computes acvs corresponding
           to direct spectral estimate
  [14] result-acvs (keyword; vector of correct length)
       <== vector into which acvs values are placed
           (not used if return-acvs-estimate-p is nil)
  [15] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
  [16] result-sdf (keyword; vector of correct length)
       <== vector into which direct spectral estimates are placed;
           it must be exactly of the length dictated
           by N-nonzero-freqs and return-est-for-0-freq-p
  [17] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral estimate
           are computed and returned in result-freq
  [18] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [19] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length dictated by
           N-nonzero-freqs and return-est-for-0-freq-p
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] result-sdf, a vector holding
       the properly transformed sdf
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in result-sdf
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-sdf
   [4] C_h, the variance inflation factor due to the data taper
   [5] result-acvs (if return-acvs-p is t),
       a vector holding the acvs corresponding
       to the direct spectral estimate
        -- or --
       nil (if return-acvs-p is nil)
---
Note: see Section 6.3 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
      (:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T))))
      ((:NAME "N-TS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "HALF-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] acvs (required)
       ==> vector containing autocovariance sequence
   [2] lag-window-function (required)
       ==> function of a single variable that computes the value
           of the lag window for a given lag
   [3] max-lag (keyword; (1- (length acvs)))
       ==> maximum lag in acvs to be used
   [4] N-ts (keyword; length of acvs)
       ==> length of the time series from which acvs was constructed;
           this is needed to compute equivalent degrees of freedom
   [5] N-nonzero-freqs (keyword; :half-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           direct spectral estimate is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [6] return-est-for-0-freq-p (keyword; nil)
       ==> if t, sdf is computed at zero frequency;
           otherwise, it is not computed.
   [7] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [8] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [9] C_h (keyword; 1.0)
       ==> variance inflation factor due to tapering
  [10] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
  [11] result-sdf (keyword; vector of correct length)
       <== vector into which lag window spectral estimates are placed;
           it must be exactly of the length dictated
           by N-nonzero-freqs and return-est-for-0-freq-p
  [12] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral estimate
           are computed and returned in result-freq
  [13] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [14] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length dictated by
           N-nonzero-freqs and return-est-for-0-freq-p
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] result-sdf, a vector holding
       the properly transformed sdf
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in  result-sdf
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-sdf
   [4] the equivalent degrees of freedom
   [5] the smoothing window bandwidth
---
Note: see Section 6.7 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WOSA-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PROPORTION-OF-OVERLAP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.5)
      ((:NAME "OVERSAMPLING-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "OVERSAMPLING-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "HANNING-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESTORE-POWER-OPTION-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "WOSA-GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "OVERSAMPLING-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL))))
      ((:NAME "RETURN-SDF-ESTIMATES-FOR-EACH-BLOCK-P" :PACKAGE-NAME "SAPA"
        :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "WOSA-GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "OVERSAMPLING-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP
           NIL))))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector of real-valued numbers
   [2] block-size (required)
       ==> a power of two
   [3] proportion-of-overlap (keyword; 0.5)
       ==> number greater than 0 and less than 1
   [4] oversampling-factor (keyword; 1)
       ==> a factor that controls the number of frequencies
           at which the wosa spectral estimate is computed;
           this factor should be an integer power of two
           such as 1, 2, 4, etc; for example,
           1 yields Fourier frequencies for block-size;
           2 yields grid twice as fine as Fourier frequencies;
           4 yields griid 4 times as fine as Fourier frequencies;
           etc.
   [5] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [6] start (keyword; 0)
       ==> start index of vector to be used
   [7] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [8] return-est-for-0-freq-p (keyword; nil)
       ==> if t, sdf is computed at zero frequency;
           otherwise, it is not computed.
   [9] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
  [10] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
  [11] data-taper (keyword; #'Hanning-data-taper!)
       ==> a tapering function or nil
  [12] data-taper-parameters (keyword; nil)
       ==> parameters for tapering function (not used
           if data-taper is nil); the default of nil
           is appropriate for the Hanning data taper
           because it does not have any parameters
  [13] restore-power-option-p (keyword; t)
       ==> if t and data-taper is non-nil,
           normalizes tapered series to have same
           sum of squares as before tapering
  [14] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
  [15] result-sdf (keyword; vector of correct length)
       <== vector into which wosa sdf estimate is placed;
           it must be EXACTLY of the length dictated
           by block-size, oversampling-factor and return-est-for-0-freq-p
  [16] return-sdf-estimates-for-each-block-p (keyword; t)
       ==> if t, individual spectra for each block are returned in a list;
           note that these spectra are untransformed
           (i.e., the option sdf-transformation applies only
           to the final wosa estimate)
  [17] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral estimate
           are computed and returned in result-freq
  [18] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [19] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of length dictated by
           block-size, oversampling-factor and return-est-for-0-freq-p
           into which the frequencies associated with the values
           in result-sdf are placed
returns
   [1] wosa spectral estimate
   [2] associated frequencies
   [3] equivalent degrees of freedom
   [4] list of individual direct spectral estimates")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POSTCOLOR-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PRECOLORED-SDF-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "HALF-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "INCLUDES-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "SDF-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "PRECOLORED-SDF-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP
          NIL)))))
     :DOCUMENTATION "given
   [1] precolored-sdf-estimate (required)
       ==> vector containing sdf estimate to be postcolored;
           note that this estimate is assumed to be untransformed
           (i.e., not expressed in dB, etc)
   [2] prewhitening-filter (required)
       ==> vector with coefficients of prewhitening filter
   [3] sample-size (required)
       ==> length of the time series from which precolored-sdf-estimate
           was constructed; this is needed to get corresponding
           grid of frequencies
   [4] N-nonzero-freqs (keyword; :half-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           precolored-sdf-estimate was computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [5] includes-est-for-0-freq-p (keyword; nil)
       ==> if t, first element of precolored-sdf-estimate
           corresponds to zero frequency
   [6] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [7] sdf-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-sdf
   [8] result-sdf (keyword; vector of correct length)
       <== vector into which postcolored sdf estimate is placed;
           it must be exactly the same length as precolored-sdf-estimate
returns
   [1] result-sdf, a vector holding
       the postcolored sdf estimate
---
Note: see Equation (438) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPECTRAL-WINDOW-FOR-DIRECT-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "TWICE-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "SPEC-WIND-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SPEC-WIND" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))))
     :DOCUMENTATION "given
   [1] sample-size (required)
       ==> sample size for which spectral window is to be computed
   [2] N-nonzero-freqs (keyword; :twice-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           spectral window is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [3] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [4] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [5] data-taper (keyword; nil)
       ==> nil or a tapering function
   [6] data-taper-parameters (keyword)
       ==> parameters for tapering function (not used
           if data-taper is nil)
   [7] spec-wind-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-spec-wind
   [8] result-spec-wind (keyword; vector of correct length)
       <== vector into which spectral window values are placed;
           it must be exactly of the length dictated by N-nonzero-freqs
   [9] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral window
           are computed and returned in result-freq
  [10] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
  [11] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of N-nonzero-freqs +1 into which
           the frequencies associated with the values
           in result-spec-wind are placed
returns
   [1] result-spec-wind, a vector holding
       the properly transformed spectral window
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in result-spec-wind
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-spec-wind
---
Note: see equation below Equation (207a) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPECTRAL-WINDOW-FOR-LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME
      "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "TWICE-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DATA-TAPER-PARAMETERS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
      ((:NAME "SPEC-WIND-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SPEC-WIND" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))))
     :DOCUMENTATION "given
   [1] sample-size (required)
       ==> sample size for which spectral window is to be computed
   [2] lag-window-function (required)
       ==> function of a single variable that computes the value
           of the lag window for a given lag
   [3] N-nonzero-freqs (keyword; :twice-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           spectral window is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [4] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [5] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [6] data-taper (keyword; nil)
       ==> nil or a tapering function
   [7] data-taper-parameters (keyword)
       ==> parameters for tapering function (not used
           if data-taper is nil)
   [8] spec-wind-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-spec-wind
   [9] result-spec-wind (keyword; vector of correct length)
       <== vector into which spectral window values are placed;
           it must be exactly of the length dictated by N-nonzero-freqs
  [10] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the spectral window
           are computed and returned in result-freq
  [11] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [12] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of N-nonzero-freqs +1 into which
           the frequencies associated with the values
           in result-spec-wind are placed
returns
   [1] result-spec-wind, a vector holding
       the properly transformed spectral window
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in result-spec-wind
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-spec-wind
---
Note: see equation below Equation (244a) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SMOOTHING-WINDOW-FOR-LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME
      "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "TWICE-NEXT-POWER-OF-2" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "SMOOTH-WIND-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "RESULT-SMOOTH-WIND" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FREQ-TRANSFORMATION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
          (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))))
     :DOCUMENTATION "given
   [1] sample-size (required)
       ==> sample size for which smoothing window is to be computed
   [2] lag-window-function (required)
       ==> function of a single variable that computes the value
           of the lag window for a given lag
   [3] N-nonzero-freqs (keyword; :twice-next-power-of-2)
       ==> specifies at how many nonzero frequencies
           smoothing window is to be computed -- choices are:
           :half-next-power-of-2
            ==> 1/2 * power of two >= sample size;
           :next-power-of-2
            ==> power of two >= sample size;
           :twice-next-power-of-2
            ==> 2 * power of two >= sample size;
           :Fourier
            ==> just at Fourier frequencies
            -- or --
           any power of 2 >= 1/2 * [power of two >= sample size]
   [4] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [5] scratch-dft (keyword; vector of correct length)
       ==> vector in which the in-place dft is done
   [6] smooth-wind-transformation (keyword; #'convert-to-dB)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-smooth-wind
   [7] result-smooth-wind (keyword; vector of correct length)
       <== vector into which smoothing window values are placed;
           it must be exactly of the length dictated by N-nonzero-freqs
   [8] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the smoothing window
           are computed and returned in result-freq
   [9] freq-transformation (keyword; nil)
       ==> a function of one argument or nil;
           if bound to a function, the function is used
           to transform all elements of result-freq
           (ignored unless return-frequencies-p is true)
  [10] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of N-nonzero-freqs +1 into which
           the frequencies associated with the values
           in result-smooth-wind are placed
returns
   [1] result-smooth-wind, a vector holding
       the properly transformed smoothing window
   [2] result-freq (if return-frequencies-p is t),
       where result-freq is a vector holding
       the properly transformed frequencies
       associated with values in result-smooth-wind
        -- or --
       nil (if return-frequencies-p is nil)
   [3] the length of the vector result-smooth-wind
---
Note: see equation below Equation (237c) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GRENANDER-SMOOTHING-WINDOW-BANDWIDTH" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given a lag window function, a maximum lag and the sampling time,
returns Grenander's measure of smoothing window bandwidth
---
Note: see Equations (241c) and (241b) of the SAPA book;
      unfortunately, because of the square root operation,
      this measure can be complex-valued for certain lag windows")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JENKINS-SMOOTHING-WINDOW-BANDWIDTH" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given a lag window function, a maximum lag and the sampling time,
returns Jenkins' measure of smoothing window bandwidth
---
Note: see Equation (242c) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EQUIVALENT-DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given a lag window function, a maximum lag, the sampling time,
the sample size and the variance inflation factor C_h,
returns the corresponding equivalent degrees of freedom
---
Note: see Equation (255a) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BANDWIDTH&CONFIDENCE-INTERVALS-FOR-SDF-DB" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SDF-DB" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CONFIDENCE-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.95)
      ((:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "MAX-LAG" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given
   [1] sdf-dB (required)
       ==> an sdf estimate (in decibels) for a single frequency
   [2] freq (required)
       ==> the frequency associated with sdf-dB
   [3] sampling-size (required)
       ==> the sample size of the time series
           from which sdf-dB was computed
   [4] confidence-level (keyword; 0.95)
       ==> the level of the confidence interval
           (e.g., 0.95 yields a 95% confidence interval)
   [5] lag-window-function (keyword; nil)
       ==> the lag window function used to create
           sdf-dB (nil means a lag window function was NOT used)
   [6] max-lag (keyword; sample-size - 1)
       ==> the maximum lag used in conjunction with lag-window-function
           to create sdf-dB (not used in lag-window-function is nil)
   [7] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
   [8] C_h (keyword; 1.0)
       ==> the variance inflation factor due to tapering
           (see Table 248 of the SAPA book); the default value
           of 1.0 is appropriate for a rectangular data taper
returns
   [1] left-hand size of interval describing the bandwidth of
       the spectral estimate (interval is centered on freq)
   [2] right-hand size of bandwidth interval
   [3] lower limit (in decibels) of confidence interval for
       true sdf based upon sdf-dB
   [4] upper limit (in decibels) of confidence interval
---
Note: see Sections 6.7 and 6.10 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TIME-SERIES-BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given
   [1] acvs (required)
       ==> a vector of length N with values of
           the acvs (or acs) from lag 0 to N-1
   [2] sampling-time (keyword; 1.0)
       ==> the sampling time
returns
   [1] unbiased estimate of trace bandwidth
       (tilde B_T in Equation (280))
   [2] biased estimate of trace bandwidth
       (hat B_T in equation just above Equation (28)))
---
Note: see Section 6.14 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAMPLE-CEPSTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "LOG-SPECTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "ZERO-FREQUENCY-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NYQUIST-FREQUENCY-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ZERO-FREQUENCY-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LOG-SPECTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
         ((:NAME "1+" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "LOG-SPECTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given
   [1] log-spectrum (required)
       ==> a vector containing log spectrum
   [2] sampling-time (keyword; 1.0)
       ==> the sample time (i.e., delta t)
   [3] zero-frequency-p (keyword; nil)
       ==> if t, the first element of log-spectrum
           is associated with 0 frequency;
           if nil, first element goes with
           lowest nonzero frequency
   [4] Nyquist-frequency-p (keyword; nil)
       ==> if t, the last element of log-spectrum
           is associated with Nyquist frequency;
           if nil, last element goes with
           a frequency just less than Nyquist
   [5] result (keyword; vector of appropriate length)
       <== vector to hold sample cepstrum
returns
   [1] result, i.e., the sample cepstrum from lag 0 to lag N_U
       where N_U = length of log-spectrum - 1 if zero-frequency-p is t
       or        = length of log-spectrum     if zero-frequency-p is nil
---
Note: see Equation 282 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CEPSTRUM->I_M" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CEPSTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "N-PRIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 2
         ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "CEPSTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
        2))
      ((:NAME "LAG-WINDOW-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "PARZEN-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)))
      ((:NAME "LAMBDA-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "CEPSTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))
     :DOCUMENTATION "given
   [1] cepstrum (required)
       ==> a vector of length N_U+1 with values of the cepstrum
           from lag 0 to N_U
   [2] sampling-time (keyword; 1.0)
       ==> the sample time (i.e., delta t)
   [3] N-prime (keyword; 2 * N_U)
       ==> effective sample size, as discussed in Section 6.15
           of the SAPA book (default value ok if N-prime is even,
           but must be replaced if N-prime is odd)
   [4] lag-window-function (keyword; #'parzen-lag-window)
       ==> lag window function of 2 parameters,
           tau (the lag) and m (the window parameter)
   [5] lambda-factor (keyword; 1.0)
       ==> lambda, as discussed in Section 6.15 of the SAPA book
   [6] result (keyword; vector of same length as cepstrum)
       <== vector to hold I_m
returns
   [1] the value m at which I_m is minimized
   [2] result, i.e., I_m for m = 0 to N_U
   [3] the minimum value of I_m for m = 0 to N_U
---
Note: see Equation (283b) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CUMULATIVE-PERIODOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "CUMULATIVE-PERIODOGRAM-TEST-P" :PACKAGE-NAME "SAPA" :EXTERNALP
        NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SIGNIFICANCE-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.95)
      ((:NAME "SCRATCH-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
         (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))))
      ((:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RESULT-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "RETURN-FREQUENCIES-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
        ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "TRUNCATE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
            (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
            (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
          2))))
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "TRUNCATE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          ((:NAME "-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
           (:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
         2))))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector containing time series values
   [2] sampling-time (keyword; 1.0)
       ==> the sample time (i.e., delta t)
   [3] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [4] start (keyword; 0)
       ==> start index of vector to be used
   [5] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [6] cumulative-periodogram-test-p (keyword; t)
       ==> if t, returns values associated with
           Kolmogorov test statistic
   [7] significance-level (keyword; 0.95)
       ==> level of significance at which Kolmogorov test
           is performed
   [8] scratch-dft (keyword; vector of size (- end start))
       ==> scratch vector used for in-place dft calculations
   [9] return-frequencies-p (keyword; t)
       ==> if t, the frequencies associated with the cumulative
           periodogram are computed and returned in result-freq
  [10] result-freq (keyword; nil or vector of correct length)
       <== not used if return-frequencies-p nil; otherwise,
           vector of correct length into which the frequencies
           associated with the values in result are placed
  [11] result (keyword; vector of correct length)
       <== vector to hold normalized cumulative periodogram
returns
   [1] vector with normalized cumulative periodogram 
   [2] vector with associated frequencies
 and -- if cumulative-periodogram-test-p is true --
   [3] Kolmogorov test statistic
   [4] index of maximum deviation
   [5] frequency of maximum deviation
   [6] quantile of Kolmogorov test statistic (under null hypothesis)
   [7] either :reject or :fail-to-reject, depending on whether
       or not we reject or fail to reject the null hypothesis
   [8] slope of upper and lower lines
   [9] intercept of upper line
  [10] intercept of lower line
---
Note: see Section 6.6 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUANTILE-OF-KOLMOGOROV-TEST-STATISTIC" :PACKAGE-NAME "SAPA"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SIGNIFICANCE-LEVEL" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.95))
     :DOCUMENTATION "given
   [1] sample-size (required)
       ==> a positive integer
   [2] significance-level (keyword; 0.95)
       ==> 0.99, 0.98, 0.95, 0.90, or 0.80;
           0.75 is also ok if sample-size > 40
returns
   [1] quantile of two-sided Kolmogorov test statistic
---
Note: see Table 14, page 462, of Conover (2nd edition, 1980);
      Stephens (1974); and Diggle (1990, page 55);
      significance-level is currently limited to one of
      these values: 0.99, 0.98, 0.95, 0.90, or 0.80;
      if sample-size is greater than 40, 0.75 is also ok")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ONE-SIDED-FREQ->TWO-SIDED-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ONE-SIDED-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 2
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "ONE-SIDED-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given a vector of N frequencies
0, f_1, ..., f_{N-1},
returns the vector of 2N-1 frequencies
-f_{N-1}, ..., -f_1, 0, f_1, ..., f_{N-1}")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ONE-SIDED-SDF->TWO-SIDED-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ONE-SIDED-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RESULT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "MAKE-ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "1-" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) 2
          ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
           (:NAME "ONE-SIDED-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))))))
     :DOCUMENTATION "given a one-sided sdf
S(0), S(f_1), ..., S_(f_{N-1}) of length N,
returns the two-sized sdf
S_(-f_{N-1}), ..., S(-f_1), S(0), S(f_1), ..., S_(f_{N-1})
of length 2N-1, where S_(-f_k) = S_(f_k)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BARTLETT-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TAU" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given the lag tau and window parameter m,
returns the value of the Bartlett lag window
---
Note: see Equation (260) of the SAPA book
      or Priestley, page 439, Equation (6.2.65)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BARTLETT-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given window parameter m and sampling time,
returns bandwidth B_W for the Bartlett smoothing window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BARTLETT-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "B_W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given desired smoothing window bandwidth B_W and sampling time,
returns 
   [1] window parameter m required to approximately achieve B_W
       using the Bartlett lag window
   [2] actual B_W achieved
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BARTLETT-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given sample size N, window parameter m and variance inflation factor C_h,
  returns equivalent degrees of freedom nu for Bartlett lag window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DANIELL-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TAU" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given the lag tau and window parameter m,
returns the value of the Daniell lag window
---
Note: see equation between Equations (264a) and (264b) of the SAPA book
      or Priestley, page 441, Equation (6.2.73)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DANIELL-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given window parameter m and sampling time,
returns bandwidth B_W for the Daniell smoothing window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DANIELL-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "B_W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given desired smoothing window bandwidth B_W and sampling time,
returns 
   [1] window parameter m required to approximately achieve B_W
       using the Daneill lag window
   [2] actual B_W achieved (in fact, this is always equal to B_W,
       but we return it anyway for consistency with other lag windows)
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DANIELL-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given sample size N, window parameter m and variance inflation factor C_h,
  returns equivalent degrees of freedom nu for Daniell lag window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARZEN-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TAU" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given the lag tau and window parameter m,
returns the value of the Parzen lag window
---
Note: see the equation on page 265 of the SAPA book
      or Priestley, page 443, Equation (6.2.82)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARZEN-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given window parameter m and sampling time,
returns bandwidth B_W for the Parzen smoothing window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARZEN-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "B_W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given desired smoothing window bandwidth B_W and sampling time,
returns
   [1] window parameter m required to approximately achieve B_W
       using the Parzen lag window
   [2] actual B_W achieved
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARZEN-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given sample size N, window parameter m and variance inflation factor C_h,
  returns equivalent degrees of freedom nu for Parzen lag window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PAPOULIS-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TAU" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given the lag tau and window parameter m,
returns the value of the Papoulis lag window
---
Note: see equation near bottom of page 266 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PAPOULIS-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given window parameter m and sampling time,
returns bandwidth B_W for the Papoulis smoothing window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PAPOULIS-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "B_W" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given desired smoothing window bandwidth B_W and sampling time,
returns
   [1] window parameter m required to approximately achieve B_W
       using the Papoulis lag window
   [2] actual B_W achieved
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PAPOULIS-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "C_H" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION
     "given sample size N, window parameter m and variance inflation factor C_h,
  returns equivalent degrees of freedom nu for Papoulis lag window
---
Note: see Table 269 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-N-DFT" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N-NONZERO-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WOSA-GET-N-FREQS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "OVERSAMPLING-FACTOR" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "RETURN-EST-FOR-0-FREQ-P" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CALCULATE-NUMBER-OF-BLOCKS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "PROPORTION-OF-OVERLAP" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-OFFSET-TO-KTH-BLOCK" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SAMPLE-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "BLOCK-SIZE" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "NUMBER-OF-BLOCKS" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "K" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EQUIVALENT-DOF-FOR-WOSA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N_S" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "N_B" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "VECTOR-WITH-DATA-TAPER" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION
     "given the sample size N, the block size N_S, the number of blocks N_B,
and the values of the data taper,
returns the equivalent degrees of freedom for wosa
using Equation (292b) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EQUIVALENT-DOF-FOR-WOSA-STANDARD-CASE" :PACKAGE-NAME "SAPA"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "N_S" :PACKAGE-NAME "SAPA" :EXTERNALP NIL))
     :DOCUMENTATION "given number of blocks N_S,
returns the equivalent degrees of freedom for wosa
with 50% overlap and Hanning data taper
using Equation (294) of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PERIODOGRAM-AT-ONE-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 1.0))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [5] sampling-time (keyword; 1.0)
       ==> sampling time (called delta t in the SAPA book)
returns
   [1] value of periodogram at freq
   [2] approximate conditional least squares estimate for A,
       the amplitude of cosine term in Equation (461a)
       of the SAPA book
   [3] approximate conditional least squares estimate for B
       the amplitude of sine term
---
Note: see Section 10.2 of the SAPA book")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FISHER-G-STATISTIC" :PACKAGE-NAME "SAPA" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CENTER-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)
       ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP NIL)))
      ((:NAME "ALPHA" :PACKAGE-NAME "SAPA" :EXTERNALP NIL) 0.05))
     :DOCUMENTATION "given
   [1] time-series (required)
       ==> a vector of time series values
   [2] center-data (keyword; t)
       ==> if t, subtract sample mean from time series;
           if a number, subtracts that number from time series;
           if nil, time-series is not centered
   [3] start (keyword; 0)
       ==> start index of vector to be used
   [4] end (keyword; length of time-series)
       ==> 1 + end index of vector to be used
   [5] alpha (keyword; 0.05)
       ==> critical level at which Fisher's g test
           is performed
returns
   [1] Fisher's g statistic
   [2] approximation to critical level of Fisher's g test
       from Equation (491c)
   [3] either :reject or :fail-to-reject, depending on whether
       or not we reject or fail to reject the null hypothesis
       of white noise
---
Note: see Section 10.9 of the SAPA book"))
   :EXTERNAL-SYMBOLS
   ((:NAME "CUMULATIVE-SUMS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "EXPONENTIAL-SMOOTHING" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRANSPOSE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DANIELL-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SIMPLE-NUMERICAL-INTEGRATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "N-APPLICATIONS-OF-THREE-POINT-SMOOTHER" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "X+B!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PAPOULIS-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "SECANT-METHOD" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "2D-MATRIX-MOVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "WOSA-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ZEROS-OF-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DIVF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BARTLETT-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "M-LOCATION-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "EQUIVALENT-DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRANSFER-FUNCTION-FOR-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "X*Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PARZEN-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "THOMSON-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SYMMETRY-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "WINDOW-WIDTH-FROM-SILVERMAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PARZEN-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "VAR-PREDICTED-Y-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DANIELL-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "HANNING-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BOX-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GENERATE-MA-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "UPPER-TRIANGULAR-SOLVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "REGRESSION-WITH-AR-ERRORS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ZERO-STRICT-LOWER-DIAGONAL!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-MEAN-AND-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CREATE-DPSS-LOW-PASS-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-CHI-SQUARE-2-DISTRIBUTION" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "AR-COEFFS->REFLECTION-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-CHI-SQUARE-DISTRIBUTION" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "EIGENSPECTRA->MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "PERIODOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DPSS-TAPERS-INVERSE-ITERATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "COSINE-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "COMPOSE-SYMMETRIC-FILTERS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MEDIAN-ABSOLUTE-DEVIATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "HUBER-WEIGHT-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BARTLETT-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "DOT-PRODUCT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FISHER-G-STATISTIC" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DIGAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ORDINARY-LEAST-SQUARES-Q-R" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-MEAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "X*Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FACTORIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SIGN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "X-Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CUMULATIVE-PERIODOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FIND-PEAK-OR-VALLEY-OF-SDF-USING-BISECTION+NEWTON-RAPHSON"
     :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LOG10" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-CORRELATION-COEFFICIENT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRANSFORM-A-SEQUENCE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GAUSS-LEGENDRE-QUADRATURE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PRINT-ROWS-OF-NXM-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "KERNEL-PDF-ESTIMATION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "AR-COEFFS->PREWHITENING-FILTER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BISECTION-WITH-NEWTON-RAPHSON" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "INVERSE-FFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SPOFA!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DPSS-TAPERS-TRI-DIAG" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GENERATE-FORWARD-INNOVATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FIND-PEAK-OF-AR-SDF-USING-QUADRATIC-APPROX" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "2D-MATRIX->LINEARIZED-UPPER-TRANGULAR" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "X+B" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "X+Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "AR-COEFFS->SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SDF->SDF-WITH-ACCURATE-PEAKS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "INVERSE-DFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "Q-R!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SUM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "COPY-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MAX-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "IOTA" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "WEIGHTED-MEAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DANIELL-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "NEXT-POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BARTLETT-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FILTER-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CREATE-LEAST-SQUARES-LOW-PASS-FILTER" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "JENKINS-SMOOTHING-WINDOW-BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "STEP-DOWN-LEVINSON-DURBIN-RECURSIONS" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "SPECTRAL-WINDOW-FOR-DIRECT-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "POSTCOLOR-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "RANORM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "WEIGHTED-LINEAR-LEAST-SQUARES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-SKEWNESS-AND-KURTOSIS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DFT-CHIRP!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-VARIOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTIPLY-SEQUENCES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SMOOTHING-WINDOW-FOR-LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME
     "SAPA" :EXTERNALP T)
    (:NAME "REFLECTION-COEFFS->VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "RANORMS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CEPSTRUM->I_M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PAPOULIS-BANDWIDTH->M" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ACVS-FOR-TIME-SERIES-SIMULATED-FROM-SDF" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "MULTIPLY-MATRIX-AND-SCALAR" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FILTER-TIME-SERIES-DIRECT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GENERATE-AR-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SUPPLIED-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LINEAR-INTERPOLATION!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "RUNNING-MEDIAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LOG-OF-GAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "IDEAL-HIGH-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SPOSL!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DPSS-DATA-TAPER!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRACE-MATRIX" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FORWARD-BACKWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-NORMAL-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LOWER-TRIANGULAR-SOLVE!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "X-Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CENTER&PREWHITEN&TAPER-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "YULE-WALKER-ALGORITHM-GIVEN-DATA" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "SAMPLE-VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "AR-COEFFS->VARIANCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BURG-ALGORITHM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTIPLY-TWO-MATRICES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X+B" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PARZEN-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "EUCLIDEAN-NORM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-EXPONENTIAL-DISTRIBUTION" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "IDEAL-LOW-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-FROM-A-FUNCTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-KOLMOGOROV-TEST-STATISTIC" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "NEWTON-RAPHSON" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CAREFUL-CONVERT-TO-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TWO-STEP-BURG-ALGORITHM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PREDICTED-Y-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TAIL-AREA-OF-NORMAL-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "MULTIPLY-2-POLYNOMIALS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "HISTOGRAM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FAST-FORWARD-BACKWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "INTEGRATE-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "IDEAL-BAND-PASS-FILTER-IRS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRANSFORM-A-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CREATE-CI-FOR-AMT-SDF-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X+Y" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "EIGENSPECTRA->ADAPTIVE-MULTITAPER-SPECTRAL-ESTIMATE" :PACKAGE-NAME
     "SAPA" :EXTERNALP T)
    (:NAME "GENERATE-BACKWARD-INNOVATIONS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CONVERT-FROM-DB" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-MEDIAN" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DIFFERENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BARTLETT-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MIN-AND-MAX-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRIG-PROLATE-TAPERS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-ORDERED-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRIANGULAR-CONVERGENCE-FACTORS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GENERATE-WHITE-NOISE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ORDINARY-LEAST-SQUARES-CHOLESKY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "AR-COEFFS->ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "GRENANDER-SMOOTHING-WINDOW-BANDWIDTH" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "BANDWIDTH&CONFIDENCE-INTERVALS-FOR-SDF-DB" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "COMPARE-SEQS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "NYQUIST-FREQUENCY->SAMPLING-TIME" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "X+Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DFT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "HERMITIAN-TRANSPOSE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PAPOULIS-M->BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TIME-SERIES-BANDWIDTH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "STANDARD-NORMAL-PDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PERIODOGRAM-AT-ONE-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "FILTER-TIME-SERIES-FFT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "VAR-PREDICTED-MEAN-AT-X" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PAPOULIS-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ONE-SIDED-SDF->TWO-SIDED-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SPECTRAL-WINDOW-FOR-LAG-WINDOW-SPECTRAL-ESTIMATE" :PACKAGE-NAME
     "SAPA" :EXTERNALP T)
    (:NAME "SAMPLING-TIME->NYQUIST-FREQUENCY" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "AR-COEFFS->SDF-AT-SINGLE-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "EVALUATE-POLYNOMIAL" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SIMULATE-TIME-SERIES-FROM-SDF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DANIELL-N-M->DEGREES-OF-FREEDOM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DPSS-TAPERS-THOMSON-APPROX" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTF" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "LINEARIZED-UPPER-TRANGULAR->2D-MATRIX" :PACKAGE-NAME "SAPA"
     :EXTERNALP T)
    (:NAME "YULE-WALKER-ALGORITHM-GIVEN-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP
     T)
    (:NAME "FORWARD-LS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "TRIGAMMA" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PRINT-1-OR-2-D-ARRAY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ONE-SIDED-FREQ->TWO-SIDED-FREQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SAMPLE-CEPSTRUM" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "INTERQUARTILE-RANGE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CHOLESKY!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MODIFIED-GRAM-SCHMIDT!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "THREE-POINT-SMOOTHER" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BIASED-ACVS->UNBIASED-ACVS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CIRCULAR-SHIFT-SEQUENCE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "QUANTILE-OF-GAMMA-DISTRIBUTION" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "POWER-OF-2" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "BINARY-SEARCH" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DIRECT-SPECTRAL-ESTIMATE" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "ADD-SEQUENCES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CHECK-ORTHONORMALITY" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SUM-OF-SQUARES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X+B!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "Q-Q-PLOT" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "SUBTRACT-TWO-MATRICES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "A*X+Y!" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "DURBIN-WATSON-TEST-STATISTIC" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "CENTER&TAPER-TIME-SERIES" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "PARZEN-LAG-WINDOW" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "REFLECTION-COEFFS->AR-COEFFS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTIPLY-POLYNOMIALS" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MIN-OF-SEQ" :PACKAGE-NAME "SAPA" :EXTERNALP T)
    (:NAME "MULTIPLY-MATRIX-AND-VECTOR" :PACKAGE-NAME "SAPA" :EXTERNALP T)))))
