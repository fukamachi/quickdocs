
(:TYPE :SYSTEM :NAME "infix" :AUTHOR NIL :MAINTAINER NIL :VERSION NIL :LICENCE
 NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "INFIX" :FULL-NAME "INFIX" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*VERSION*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "\"1.3  28-JUN-96\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PRINT-INFIX-COPYRIGHT*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION
     "If non-NIL, prints a copyright notice upon loading this file."
     :INITIAL-VALUE "T")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INFIX-COPYRIGHT" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*STANDARD-OUTPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Prints an INFIX copyright notice and header upon startup.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INFIX-READTABLE*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(COPY-READTABLE NIL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*NORMAL-READTABLE*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(COPY-READTABLE NIL)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "INFIX-ERROR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FORMAT-STRING" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INFIX-READER" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBCHAR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "ARG" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING->PREFIX" :PACKAGE-NAME "INFIX" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Convert a string to a prefix s-expression using the infix reader.
  If the argument is not a string, just return it as is.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-INFIX" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-REGULAR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAME-OPERATOR-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAME-TOKEN-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PEEKED-TOKEN*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PEEK-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FANCY-NUMBER-FORMAT-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LEFT" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "VALID-NUMBERP" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GATHER-SUPERIORS" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PREVIOUS-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Gathers an expression whose operators all exceed the precedence of
   the operator to the left.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-FIRST-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-TOKEN-PREFIX-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-NEXT-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LEFT" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-TOKEN-INFIX-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "LEFT" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INFIX-READ-DELIMITED-LIST" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "END-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "DELIMITER-TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OPERATOR-ORDERING*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION "Ordered list of operators of equal precedence."
     :INITIAL-VALUE
     "'((INFIX::[ INFIX::|(| INFIX::!) (INFIX::^^) (INFIX::~) (* / INFIX::%) (+ -)
  (INFIX::<< INFIX::>>) (< INFIX::== > <= INFIX::!= >=) (INFIX::&) (INFIX::^)
  (INFIX::|\\||) (NOT) (AND) (OR)
  (= INFIX::|:=| INFIX::+= INFIX::-= INFIX::*= /=) (INFIX::|,|) (IF)
  (INFIX::THEN INFIX::ELSE) (INFIX::] INFIX::|)|) (INFIX::%INFIX-END-TOKEN%))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OPERATOR-LESSP" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OP1" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "OP2" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*RIGHT-ASSOCIATIVE-OPERATORS*" :PACKAGE-NAME "INFIX" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "'(INFIX::^^ =)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "OPERATOR-RIGHT-ASSOCIATIVE-P" :PACKAGE-NAME "INFIX" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TOKEN-OPERATORS*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TOKEN-PREFIX-OPERATOR-TABLE*" :PACKAGE-NAME "INFIX" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TOKEN-INFIX-OPERATOR-TABLE*" :PACKAGE-NAME "INFIX" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TOKEN-OPERATOR-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-TOKEN-PREFIX-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-TOKEN-INFIX-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-TOKEN-OPERATOR" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OPERATOR-NAME" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PREFIX" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PREFIX-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
      ((:NAME "INFIX" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "INFIX-P" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-CHARACTER-TOKENIZATION" :PACKAGE-NAME "INFIX" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POST-PROCESS-EXPRESSION" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "EXPRESSION" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TEST-CASES*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE
     "'((\"1 * +2\" (* 1 2)) (\"1 * -2\" (* 1 (- 2))) (\"1 * /2\" (* 1 (/ 2))) (\"/2\" (/ 2))
  (\"not true\" (NOT INFIX::TRUE)) (\"foo\\\\-bar\" INFIX::FOO-BAR)
  (\"a + b-c\" (+ INFIX::A INFIX::B (- INFIX::C)))
  (\"a + b\\\\-c\" (+ INFIX::A INFIX::B-C)) (\"f\\\\oo\" INFIX::|FoO|)
  (\"!foo-bar * 2\" (* INFIX::FOO-BAR 2))
  (\"!(foo bar baz)\" (INFIX::FOO INFIX::BAR INFIX::BAZ))
  (\"!foo-bar \" INFIX::FOO-BAR) (\"!foo-bar\" INFIX::FOO-BAR)
  (\"a+-b\" (+ INFIX::A (- INFIX::B))) (\"a+b\" (+ INFIX::A INFIX::B))
  (\"a+b*c\" (+ INFIX::A (* INFIX::B INFIX::C)))
  (\"a+b+c\" (+ INFIX::A INFIX::B INFIX::C))
  (\"a+b-c\" (+ INFIX::A INFIX::B (- INFIX::C)))
  (\"a+b-c+d\" (+ INFIX::A INFIX::B (- INFIX::C) INFIX::D))
  (\"a+b-c-d\" (+ INFIX::A INFIX::B (- INFIX::C) (- INFIX::D)))
  (\"a-b\" (- INFIX::A INFIX::B)) (\"a*b\" (* INFIX::A INFIX::B))
  (\"a*b*c\" (* INFIX::A INFIX::B INFIX::C))
  (\"a*b+c\" (+ (* INFIX::A INFIX::B) INFIX::C)) (\"a/b\" (/ INFIX::A INFIX::B))
  (\"a^^b\" (EXPT INFIX::A INFIX::B)) (\"foo/-bar\" (/ INFIX::FOO (- INFIX::BAR)))
  (\"1+2*3^^4\" (+ 1 (* 2 (EXPT 3 4)))) (\"1+2*3^^4+5\" (+ 1 (* 2 (EXPT 3 4)) 5))
  (\"2*3^^4+1\" (+ (* 2 (EXPT 3 4)) 1)) (\"2+3^^4*5\" (+ 2 (* (EXPT 3 4) 5)))
  (\"2^^3^^4\" (EXPT 2 (EXPT 3 4)))
  (\"x^^2 + y^^2\" (+ (EXPT INFIX::X 2) (EXPT INFIX::Y 2)))
  (\"(1+2)/3\" (/ (+ 1 2) 3)) (\"(a=b)\" (SETQ INFIX::A INFIX::B))
  (\"(a=b,b=c)\" (PROGN (SETQ INFIX::A INFIX::B) (SETQ INFIX::B INFIX::C)))
  (\"1*(2+3)\" (* 1 (+ 2 3))) (\"1+2/3\" (+ 1 (/ 2 3)))
  (\"a,b\" (PROGN INFIX::A INFIX::B))
  (\"a,b,c\" (PROGN INFIX::A INFIX::B INFIX::C))
  (\"foo(a,b,(c,d))\" (INFIX::FOO INFIX::A INFIX::B (PROGN INFIX::C INFIX::D)))
  (\"foo(a,b,c)\" (INFIX::FOO INFIX::A INFIX::B INFIX::C))
  (\"(a+b,c)\" (PROGN (+ INFIX::A INFIX::B) INFIX::C)) (\"1\" 1) (\"-1\" (- 1))
  (\"+1\" 1) (\"1.\" 1) (\"1.1\" 1.1) (\"1e3\" 1000.0) (\"1e-3\" 0.001) (\"1f-3\" 0.001)
  (\"1e-3e\" (- INFIX::|1E| INFIX::|3E|)) (\"!1e-3 \" 0.001)
  (\"a and b and c\" (AND INFIX::A INFIX::B INFIX::C))
  (\"a and b or c\" (OR (AND INFIX::A INFIX::B) INFIX::C))
  (\"a and b\" (AND INFIX::A INFIX::B))
  (\"a or b and c\" (OR INFIX::A (AND INFIX::B INFIX::C)))
  (\"a or b\" (OR INFIX::A INFIX::B))
  (\"a<b and b<c\" (AND (< INFIX::A INFIX::B) (< INFIX::B INFIX::C)))
  (\"if (if a then b else c) then e\"
   (WHEN
       (IF INFIX::A
           INFIX::B
           INFIX::C)
     INFIX::E))
  (\"if 1 then 2 else 3+4\"
   (IF 1
       2
       (+ 3 4)))
  (\"(if 1 then 2 else 3)+4\"
   (+
    (IF 1
        2
        3)
    4))
  (\"if a < b then b else a\"
   (IF (< INFIX::A INFIX::B)
       INFIX::B
       INFIX::A))
  (\"if a and b then c and d else e and f\"
   (IF (AND INFIX::A INFIX::B)
       (AND INFIX::C INFIX::D)
       (AND INFIX::E INFIX::F)))
  (\"if a or b then c or d else e or f\"
   (IF (OR INFIX::A INFIX::B)
       (OR INFIX::C INFIX::D)
       (OR INFIX::E INFIX::F)))
  (\"if a then (if b then c else d) else e\"
   (IF INFIX::A
       (IF INFIX::B
           INFIX::C
           INFIX::D)
       INFIX::E))
  (\"if a then (if b then c) else d\"
   (IF INFIX::A
       (WHEN INFIX::B INFIX::C)
       INFIX::D))
  (\"if a then b else c\"
   (IF INFIX::A
       INFIX::B
       INFIX::C))
  (\"if a then b\" (WHEN INFIX::A INFIX::B))
  (\"if a then if b then c else d else e\"
   (IF INFIX::A
       (IF INFIX::B
           INFIX::C
           INFIX::D)
       INFIX::E))
  (\"if a then if b then c else d\"
   (WHEN INFIX::A
     (IF INFIX::B
         INFIX::C
         INFIX::D)))
  (\"if if a then b else c then e\"
   (WHEN
       (IF INFIX::A
           INFIX::B
           INFIX::C)
     INFIX::E))
  (\"if not a and not b then c\"
   (WHEN (AND (NOT INFIX::A) (NOT INFIX::B)) INFIX::C))
  (\"if not a then not b else not c and d\"
   (IF (NOT INFIX::A)
       (NOT INFIX::B)
       (AND (NOT INFIX::C) INFIX::D)))
  (\"not a and not b\" (AND (NOT INFIX::A) (NOT INFIX::B)))
  (\"not a or not b\" (OR (NOT INFIX::A) (NOT INFIX::B)))
  (\"not a<b and not b<c\"
   (AND (NOT (< INFIX::A INFIX::B)) (NOT (< INFIX::B INFIX::C))))
  (\"not a<b\" (NOT (< INFIX::A INFIX::B)))
  (\"a[i,k]*b[j,k]\"
   (* (AREF INFIX::A INFIX::I INFIX::K) (AREF INFIX::B INFIX::J INFIX::K)))
  (\"foo(bar)=foo[bar,baz]\"
   (SETF (INFIX::FOO INFIX::BAR) (AREF INFIX::FOO INFIX::BAR INFIX::BAZ)))
  (\"foo(bar,baz)\" (INFIX::FOO INFIX::BAR INFIX::BAZ))
  (\"foo[bar,baz]\" (AREF INFIX::FOO INFIX::BAR INFIX::BAZ))
  (\"foo[bar,baz]=barf\"
   (SETF (AREF INFIX::FOO INFIX::BAR INFIX::BAZ) INFIX::BARF))
  (\"max = if a < b then b else a\"
   (SETQ MAX
           (IF (< INFIX::A INFIX::B)
               INFIX::B
               INFIX::A)))
  (\"a < b < c\" (< INFIX::A INFIX::B INFIX::C))
  (\"a < b <= c\" (AND (< INFIX::A INFIX::B) (<= INFIX::B INFIX::C)))
  (\"a <= b <= c\" (<= INFIX::A INFIX::B INFIX::C))
  (\"a <= b <= c\" (<= INFIX::A INFIX::B INFIX::C))
  (\"a!=b and b<c\" (AND (NOT (= INFIX::A INFIX::B)) (< INFIX::B INFIX::C)))
  (\"a!=b\" (NOT (= INFIX::A INFIX::B))) (\"a<b\" (< INFIX::A INFIX::B))
  (\"a==b\" (= INFIX::A INFIX::B))
  (\"a*b(c)+d\" (+ (* INFIX::A (INFIX::B INFIX::C)) INFIX::D))
  (\"a+b(c)*d\" (+ INFIX::A (* (INFIX::B INFIX::C) INFIX::D)))
  (\"a+b(c)+d\" (+ INFIX::A (INFIX::B INFIX::C) INFIX::D))
  (\"d+a*b(c)\" (+ INFIX::D (* INFIX::A (INFIX::B INFIX::C))))
  (\"+a+b\" (+ INFIX::A INFIX::B)) (\"-a+b\" (+ (- INFIX::A) INFIX::B))
  (\"-a-b\" (+ (- INFIX::A) (- INFIX::B)))
  (\"-a-b-c\" (+ (- INFIX::A) (- INFIX::B) (- INFIX::C)))
  (\"a*b/c\" (/ (* INFIX::A INFIX::B) INFIX::C))
  (\"a+b-c\" (+ INFIX::A INFIX::B (- INFIX::C)))
  (\"a-b-c\" (- INFIX::A INFIX::B INFIX::C))
  (\"a/b*c\" (* (/ INFIX::A INFIX::B) INFIX::C))
  (\"a/b/c\" (/ INFIX::A INFIX::B INFIX::C)) (\"/a/b\" (/ (* INFIX::A INFIX::B)))
  (\"a^^b^^c\" (EXPT INFIX::A (EXPT INFIX::B INFIX::C)))
  (\"a(d)^^b^^c\" (EXPT (INFIX::A INFIX::D) (EXPT INFIX::B INFIX::C)))
  (\"a<b+c<d\" (< INFIX::A (+ INFIX::B INFIX::C) INFIX::D))
  (\"1*~2+3\" (+ (* 1 (LOGNOT 2)) 3)) (\"1+~2*3\" (+ 1 (* (LOGNOT 2) 3)))
  (\"1+~2+3\" (+ 1 (LOGNOT 2) 3))
  (\"f(a)*=g(b)\"
   (SETF (INFIX::F INFIX::A) (* (INFIX::F INFIX::A) (INFIX::G INFIX::B))))
  (\"f(a)+=g(b)\" (INCF (INFIX::F INFIX::A) (INFIX::G INFIX::B)))
  (\"f(a)-=g(b)\" (DECF (INFIX::F INFIX::A) (INFIX::G INFIX::B)))
  (\"f(a)/=g(b)\"
   (SETF (INFIX::F INFIX::A) (/ (INFIX::F INFIX::A) (INFIX::G INFIX::B))))
  (\"a&b\" (LOGAND INFIX::A INFIX::B)) (\"a^b\" (LOGXOR INFIX::A INFIX::B))
  (\"a|b\" (LOGIOR INFIX::A INFIX::B)) (\"a<<b\" (ASH INFIX::A INFIX::B))
  (\"a>>b\" (ASH INFIX::A (- INFIX::B))) (\"~a\" (LOGNOT INFIX::A))
  (\"a&&b\" (AND INFIX::A INFIX::B)) (\"a||b\" (OR INFIX::A INFIX::B))
  (\"a%b\" (MOD INFIX::A INFIX::B))
  (\"x^^2   ; the x coordinate
        + y^^2 ; the y coordinate\"
   :ERROR)
  (\"x^^2   ; the x coordinate
        + y^^2 ; the y coordinate
        \"
   (+ (EXPT INFIX::X 2) (EXPT INFIX::Y 2)))
  (\"foo(bar,baz\" :ERROR) (\"foo(bar,baz))\" (INFIX::FOO INFIX::BAR INFIX::BAZ))
  (\"foo[bar,baz]]\" :ERROR) (\"[foo,bar]\" :ERROR) (\"and a\" :ERROR) (\"< a\" :ERROR)
  (\"=bar\" :ERROR) (\"*bar\" :ERROR) (\"a not b\" :ERROR) (\"a if b then c\" :ERROR)
  (\"\" :ERROR) (\")a\" :ERROR) (\"]a\" :ERROR))")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-INFIX" :PACKAGE-NAME "INFIX" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TESTS" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
       (:NAME "*TEST-CASES*" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-INFIX-CASE" :PACKAGE-NAME "INFIX" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RESULT" :PACKAGE-NAME "INFIX" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "TEST-INFIX" :PACKAGE-NAME "INFIX" :EXTERNALP T)
    (:NAME "STRING->PREFIX" :PACKAGE-NAME "INFIX" :EXTERNALP T)))))
