
(:TYPE :SYSTEM :NAME "cl-who" :AUTHOR NIL :MAINTAINER NIL :VERSION "1.1.1"
 :LICENCE NIL :DESCRIPTION "(X)HTML generation macros" :LONG-DESCRIPTION NIL
 :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-WHO" :FULL-NAME "CL-WHO" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "DEFCONSTANT" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOC" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make sure VALUE is evaluated only once (to appease SBCL).")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PROLOGUE*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T) :DOCUMENTATION
     "This is the first line that'll be printed if the :PROLOGUE keyword
argument is T"
     :INITIAL-VALUE
     "\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ESCAPE-CHAR-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION
     "Used by ESCAPE-STRING to test whether a character should be escaped."
     :INITIAL-VALUE
     "(LAMBDA (CHAR) (OR (FIND CHAR \"<>&'\\\"\") (> (CHAR-CODE CHAR) 127)))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INDENT*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :DOCUMENTATION
     "Whether to insert line breaks and indent. Also controls amount of
indentation dynamically."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTML-MODE*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :DOCUMENTATION
     ":SGML for (SGML-)HTML, :XML (default) for XHTML, :HTML5 for HTML5."
     :INITIAL-VALUE ":XML")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DOWNCASE-TOKENS-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION
     "If NIL, a keyword symbol representing a tag or attribute name will
not be automatically converted to lowercase.  This is useful when one
needs to output case sensitive XML."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ATTRIBUTE-QUOTE-CHAR*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION "Quote character for attributes." :INITIAL-VALUE "#\\'")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*EMPTY-TAG-END*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :DOCUMENTATION "End of an empty tag.  Default is XML style."
     :INITIAL-VALUE "\" />\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTML-NO-INDENT-TAGS*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION
     "The list of HTML tags that should disable indentation inside them. The initial
value is a list containing only :PRE and :TEXTAREA."
     :INITIAL-VALUE "'(:PRE :TEXTAREA)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTML-EMPTY-TAGS*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION "The list of HTML tags that should be output as empty tags.
See *HTML-EMPTY-TAG-AWARE-P*."
     :INITIAL-VALUE
     "'(:AREA :ATOP :AUDIOSCOPE :BASE :BASEFONT :BR :CHOOSE :COL :COMMAND :EMBED
  :FRAME :HR :IMG :INPUT :ISINDEX :KEYGEN :LEFT :LIMITTEXT :LINK :META :NEXTID
  :OF :OVER :PARAM :RANGE :RIGHT :SOURCE :SPACER :SPOT :TAB :TRACK :WBR)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTML-EMPTY-TAG-AWARE-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :DOCUMENTATION
     "Set this to NIL to if you want to use CL-WHO as a strict XML
generator.  Otherwise, CL-WHO will only write empty tags listed
in *HTML-EMPTY-TAGS* as <tag/> (XHTML mode) or <tag> (SGML
mode and HTML5 mode).  For all other tags, it will always generate
<tag></tag>."
     :INITIAL-VALUE "T")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NEWLINE+" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :DOCUMENTATION
     "Used for indentation." :INITIAL-VALUE "(IF (BOUNDP 'CL-WHO::+NEWLINE+)
    (SYMBOL-VALUE 'CL-WHO::+NEWLINE+)
    (MAKE-STRING 1 :INITIAL-ELEMENT #\\Newline))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+SPACES+" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :DOCUMENTATION
     "Used for indentation." :INITIAL-VALUE "(IF (BOUNDP 'CL-WHO::+SPACES+)
    (SYMBOL-VALUE 'CL-WHO::+SPACES+)
    (MAKE-STRING 2000 :INITIAL-ELEMENT #\\  :ELEMENT-TYPE 'BASE-CHAR))")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BINDINGS" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Syntax: WITH-UNIQUE-NAMES ( { var | (var x) }* ) declaration* form*

Executes a series of forms with each VAR bound to a fresh,
uninterned symbol. The uninterned symbol is as if returned by a call
to GENSYM with the string denoted by X - or, if X is not supplied, the
string denoted by VAR - as argument.

The variable bindings created are lexical unless special declarations
are specified. The scopes of the name bindings and declarations do not
include the Xs.

The forms are evaluated in order, and the values of all but the last
are discarded (that is, the body is an implicit PROGN).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-REBINDING" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION "WITH-REBINDING ( { var | (var prefix) }* ) form*

Evaluates a series of forms in the lexical environment that is
formed by adding the binding of each VAR to a fresh, uninterned
symbol, and the binding of that fresh, uninterned symbol to VAR's
original value, i.e., its value in the current lexical environment.

The uninterned symbol is created as if by a call to GENSYM with the
string denoted by PREFIX - or, if PREFIX is not supplied, the string
denoted by VAR - as argument.

The forms are evaluated in order, and the values of all but the last
are discarded (that is, the body is an implicit PROGN).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "N-SPACES" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)) :DOCUMENTATION
     "A string with N spaces - used by indentation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-CHAR" :PACKAGE-NAME "CL-WHO" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "*ESCAPE-CHAR-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an escaped version of the character CHAR if CHAR satisfies
the predicate TEST.  Always returns a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-STRING" :PACKAGE-NAME "CL-WHO" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "*ESCAPE-CHAR-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)))
     :DOCUMENTATION
     "Escape all characters in STRING which pass TEST. This function is
not guaranteed to return a fresh string.  Note that you can pass NIL
for STRING which'll just be returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MINIMAL-ESCAPE-CHAR-P" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Helper function for the ESCAPE-FOO-MINIMAL functions to determine
whether CHAR must be escaped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-CHAR-MINIMAL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Escapes only #<, #>, and #& characters.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-STRING-MINIMAL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Escapes only #<, #>, and #& in STRING.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MINIMAL-PLUS-QUOTES-ESCAPE-CHAR-P" :PACKAGE-NAME "CL-WHO"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Helper function for the ESCAPE-FOO-MINIMAL-PLUS-QUOTES functions to
determine whether CHAR must be escaped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-CHAR-MINIMAL-PLUS-QUOTES" :PACKAGE-NAME "CL-WHO" :EXTERNALP
      T)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Like ESCAPE-CHAR-MINIMAL but also escapes quotes.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-STRING-MINIMAL-PLUS-QUOTES" :PACKAGE-NAME "CL-WHO"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Like ESCAPE-STRING-MINIMAL but also escapes quotes.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ISO-8859-1-ESCAPE-CHAR-P" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Helper function for the ESCAPE-FOO-ISO-8859-1 functions to
determine whether CHAR must be escaped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-CHAR-ISO-8859-1" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Escapes characters that aren't defined in ISO-8859-9.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-STRING-ISO-8859-1" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Escapes all characters in STRING which aren't defined in ISO-8859-1.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NON-7BIT-ASCII-ESCAPE-CHAR-P" :PACKAGE-NAME "CL-WHO" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Helper function for the ESCAPE-FOO-ISO-8859-1 functions to
determine whether CHAR must be escaped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-CHAR-ALL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Escapes characters which aren't in the 7-bit ASCII character set.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-STRING-ALL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Escapes all characters in STRING which aren't in the 7-bit ASCII
character set.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTRACT-DECLARATIONS" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "FORMS" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION "Given a FORM, the declarations - if any - will be extracted
   from the head of the FORM, and will return two values the declarations,
   and the remaining of FORM")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HTML-MODE" :PACKAGE-NAME "CL-WHO" :EXTERNALP T) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "Returns the current HTML mode. :SGML for (SGML-)HTML, :XML for
XHTML and :HTML5 for HTML5 (HTML syntax).")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HTML-MODE" :PACKAGE-NAME "CL-WHO" :EXTERNALP T))
     :LAMBDA-LIST ((:NAME "MODE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION "Sets the output mode to XHTML or (SGML-)HTML.  MODE can be
:SGML for HTML, :XML for XHTML or :HTML5 for HTML5 (HTML syntax).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PROCESS-TAG" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SEXP" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "BODY-FN" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a string list corresponding to the `HTML' (in CL-WHO
syntax) in SEXP.  Uses the generic function CONVERT-TO-STRING-LIST
internally.  Utility function used by TREE-TO-TEMPLATE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-ATTRIBUTES" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ATTR-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Helper function for CONVERT-TAG-TO-STRING-LIST which converts the
alist ATTR-LIST of attributes into a list of strings and/or Lisp
forms.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CONVERT-TAG-TO-STRING-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TAG" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "ATTR-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "BODY-FN" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION "Used by PROCESS-TAG to convert `HTML' into a list
of strings.  TAG is a keyword symbol naming the outer tag, ATTR-LIST
is an alist of its attributes (the car is the attribute's name as a
keyword, the cdr is its value), BODY is the tag's body, and BODY-FN is
a function which should be applied to BODY.  The function must return
a list of strings or Lisp forms.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CONVERT-TAG-TO-STRING-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TAG" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "ATTR-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "BODY-FN" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "The standard method which is not specialized.  The idea is that you
can use EQL specializers on the first argument.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TREE-TO-TEMPLATE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TREE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Transforms an HTML tree into an intermediate format - mainly a
flattened list of strings. Utility function used by TREE-TO-COMMANDS-AUX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-LIST-TO-STRING" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION "Concatenates a list of strings to one string.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "CONC" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STRING-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Concatenates all arguments which should be string into one string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TREE-TO-COMMANDS" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TREE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PROLOGUE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
      (((:NAME "INDENT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "*INDENT*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
       (:NAME "*INDENT*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-HTML-OUTPUT" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PROLOGUE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "INDENT" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Transform the enclosed BODY consisting of HTML as s-expressions
into Lisp code to write the corresponding HTML as strings to VAR -
which should either hold a stream or which'll be bound to STREAM if
supplied.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-HTML-OUTPUT-TO-STRING" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STRING-FORM" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "ELEMENT-TYPE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "CHARACTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
       (:NAME "PROLOGUE" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
       (:NAME "INDENT" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL))
     :DOCUMENTATION
     "Transform the enclosed BODY consisting of HTML as s-expressions
into Lisp code which creates the corresponding HTML as a string.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HYPERDOC-BASE-URI*" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"http://weitz.de/cl-who/\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HYPERDOC-LOOKUP" :PACKAGE-NAME "CL-WHO" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "ESCAPE-STRING-MINIMAL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-CHAR-ALL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-CHAR-MINIMAL-PLUS-QUOTES" :PACKAGE-NAME "CL-WHO" :EXTERNALP
     T)
    (:NAME "*HTML-EMPTY-TAG-AWARE-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "CONVERT-TAG-TO-STRING-LIST" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "WITH-HTML-OUTPUT-TO-STRING" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "HTM" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*HTML-EMPTY-TAGS*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "STR" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-STRING-ALL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-CHAR-MINIMAL" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*ESCAPE-CHAR-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "CONC" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "WITH-HTML-OUTPUT" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESC" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*HTML-NO-INDENT-TAGS*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*PROLOGUE*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "HTML-MODE" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*DOWNCASE-TOKENS-P*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-CHAR" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-STRING" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "*ATTRIBUTE-QUOTE-CHAR*" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-STRING-ISO-8859-1" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "FMT" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-CHAR-ISO-8859-1" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "CONVERT-ATTRIBUTES" :PACKAGE-NAME "CL-WHO" :EXTERNALP T)
    (:NAME "ESCAPE-STRING-MINIMAL-PLUS-QUOTES" :PACKAGE-NAME "CL-WHO"
     :EXTERNALP T)))))
