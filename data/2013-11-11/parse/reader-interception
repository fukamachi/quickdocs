
(:TYPE :SYSTEM :NAME "reader-interception" :AUTHOR NIL :MAINTAINER NIL :VERSION
 NIL :LICENCE NIL :DESCRIPTION
 "Intercept the reader to replace CL syntax with your own" :LONG-DESCRIPTION
 NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "READER-INTERCEPTION" :FULL-NAME "READER-INTERCEPTION"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "WITH-READER-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "HINT" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
       (:NAME "READER" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL))
     :DOCUMENTATION
     "You may override the Common Lisp reader, e.g. around LOAD or COMPILE-FILE,
by using WITH-READER-INTERCEPTION (HINT READER) BODY...
thus replacing the CL syntax with any syntax of your choice.
By combining this with ASDF 2.018's :around-compile hook,
you could compile any language with CL via a proper translation frontend.
You *must* specify a HINT to pass to PREPARE-READER-INTERCEPTION,
to help the interception find the first (next) character that will be read,
so it can intercept reading from there.
You must specify your READER, a function taking a STREAM as argument,
and either returning an object or raising an error
such as READER-ERROR or END-OF-FILE.
Inside the BODY, the *READTABLE* is set so that you may READ
from a stream starting with the hinted character, and
it will use your specified parser instead of the CL reader.
Inside the READER itself, READ will behave like the unintercepted CL reader.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPARE-READER-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HINT" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP
        NIL)
       (:NAME "DEFAULT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION "Before you may intercept the CL reader, you MUST prime
the reader-interception with the first character to be read.
You may give the character itself,
NIL for no character (e.g. EOF),
T for any ASCII characters (assuming the first one won't be further unicode),
a stream to read the character from,
a string that will be used as input stream,
a pathname to be open as a stream to read from with specified external-format")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SAVED-READTABLE*" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "*READTABLE*")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*READER*" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "'READER-INTERCEPTION::STANDARD-READ")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INTERCEPTION-READTABLE*" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(COPY-READTABLE NIL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INTERCEPTED-CHARACTERS*" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST 'EQUAL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INITIALIZE-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STANDARD-READTABLE*" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(COPY-READTABLE NIL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STANDARD-READ" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*STANDARD-INPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "EOF-ERROR-P" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "EOF-VALUE" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "RECURSIVE-P" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPARE-CHARACTER" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERCEPT-CHAR-READER" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PREPARE-ALL-ASCII" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CALL-WITH-READER-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "THUNK" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HINT" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
      ((:NAME "READER" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)
       (:NAME "*READER*" :PACKAGE-NAME "READER-INTERCEPTION" :EXTERNALP NIL)))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "WITH-READER-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
     :EXTERNALP T)
    (:NAME "PREPARE-READER-INTERCEPTION" :PACKAGE-NAME "READER-INTERCEPTION"
     :EXTERNALP T)))))
