
(:TYPE :SYSTEM :NAME "gtk-cffi-utils" :AUTHOR
 "Roman Klochkov <kalimehtar@mail.ru>" :MAINTAINER NIL :VERSION "1.0" :LICENCE
 "BSD" :DESCRIPTION "Different utils for gtk-cffi" :LONG-DESCRIPTION NIL
 :DEPENDS-ON ("ALEXANDRIA" "ITERATE" "CFFI") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "GTK-CFFI-UTILS" :FULL-NAME "GTK-CFFI-UTILS"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "DEBUG-OUT" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "MEMO" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-KEY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-HASH" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "HASH" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "If found KEY in HASH, return corresponding value,
else use BODY to calculate the value and save to HASH.
NIL values not saved")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BITMASK" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FLAGS" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION "Returns list from lisp values as keywords:
 Example: (bitmask after swapped)
 -> nil, when after=nil and swapped=nil
 -> (:after), when after=t and swapped=nil
 -> (:swapped), when after=nil and swapped=t
 -> (:after :swapped), when both are t")
    (:TYPE :MACRO :SYMBOL
     (:NAME "TEMPLATE" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VARS" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP NIL))
     :DOCUMENTATION
     "Universal template macro. For every ARG in ARGS binded to VARS generates
body. ARGS is list. If VARS also list, then every element in ARGS is
a list of the same length.
  BODY of template should be as of DEFMACRO. 
It should return list (resulting program chunk)."))
   :EXTERNAL-SYMBOLS
   ((:NAME "DEBUG-OUT" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
    (:NAME "MEMO" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
    (:NAME "TEMPLATE" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
    (:NAME "WITH-HASH" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)
    (:NAME "BITMASK" :PACKAGE-NAME "GTK-CFFI-UTILS" :EXTERNALP T)))))
