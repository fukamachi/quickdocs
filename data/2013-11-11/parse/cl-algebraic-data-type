
(:TYPE :SYSTEM :NAME "cl-algebraic-data-type" :AUTHOR
 "Robert Smith <quad@symbo1ics.com>" :MAINTAINER NIL :VERSION NIL :LICENCE
 "BSD 3-clause" :DESCRIPTION "A library for algebraic data types."
 :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-ALGEBRAIC-DATA-TYPE" :FULL-NAME
   "CL-ALGEBRAIC-DATA-TYPE" :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*CONSTRUCTORS*" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-CONSTRUCTORS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ADT" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-CONSTRUCTORS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ADT" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "CONSTRUCTORS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WILD?" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-LIST" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-CAR" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERNAL" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNWRAP-SINGLETONS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GEN-NAMES" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIELD" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-CONSTANT" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFDATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ADT-NAME" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONSTRUCTORS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
       NIL))
     :DOCUMENTATION "Define a new ADT. ADT-name has the following grammar:

ADT-NAME := <symbol>
          | (<symbol>)
          | (<symbol> :MUTABLE)

There is no difference between specifying it as a symbol or as a
singleton list. Specifying :MUTABLE will make DEFDATA mutable,
allowing the use of SET-DATA.

Constructors is a list of clauses with the following grammar:

<clause> := <symbol>
          | (<symbol> <type-specifier>*)

Each clause defines a constructor for the ADT. Nullary constructors
will define constants and all other constructors will define
functions.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SET-DATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJ" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NEW-VALUES" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP
        NIL)))
     :DOCUMENTATION
     "Mutate the fields of the ADT value OBJ whose constructor is NAME
and whose updated values are NEW-VALUES based on order. If the symbol
'_' is used as a value, that field is not updated. Trailing '_' may be
omitted.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-DATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "NAME" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
       (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VARS" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
      (:NAME "OBJ" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Destructure the ADT value OBJ, whose constructor is NAME. VARS must
be symbol which will be bound, or they must be the symbol '_', which
means the value will not be bound.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "MATCH" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ADT" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "OBJ" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP NIL))
     :DOCUMENTATION "Perform pattern matching on OBJ with (adt-type) ADT.

Each clause must have the following syntax:

<var> := <symbol> | '_'
<lhs> := '_'
       | (<symbol> <var>*)
<clause> := (<lhs> <lisp code>)

The symbol '_' denotes a wildcard, as well as a fallthough.

Note that pattern matching is only shallow (patterns are one-level
deep).
"))
   :EXTERNAL-SYMBOLS
   ((:NAME "DEFDATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
    (:NAME "WITH-DATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
    (:NAME "SET-DATA" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)
    (:NAME "MATCH" :PACKAGE-NAME "CL-ALGEBRAIC-DATA-TYPE" :EXTERNALP T)))))
