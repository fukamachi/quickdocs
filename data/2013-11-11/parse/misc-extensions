
(:TYPE :SYSTEM :NAME "misc-extensions" :AUTHOR NIL :MAINTAINER NIL :VERSION NIL
 :LICENCE NIL :DESCRIPTION NIL :LONG-DESCRIPTION NIL :DEPENDS-ON NIL
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "NEW-LET" :FULL-NAME "NEW-LET" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL (:NAME "LET" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "A generalization of CL:LET that better supports nested bindings and multiple
values.  Syntax: (let (<clause>*) <body>).  The <clause> syntax is more general
than for CL:LET:
  <clause>  ::=   <symbol>                 ; binds to NIL
                | ( <symbol> )             ; likewise
		| <clause1>
  <clause1> ::=   ( <symbol>+ <form> )     ; binding
                | ( <clause1>+ )           ; nesting
When a clause begins with more than one variable name, they are to be bound to
successive values of the form.  The nesting of clauses indicates sequencing of
bindings; more deeply nested clauses may reference bindings of shallower clauses.
All bindings at a given depth are done in parallel.  This allows arbitrary
combinations of parallel and sequential binding.  Standard declarations at the
head of BODY are handled correctly, though nonstandard ones may not be.  If two
variables of the same name are bound at different levels, any declaration
applies to the inner one.")
    (:TYPE :MACRO :SYMBOL (:NAME "NLET" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "A generalization of CL:LET that better supports nested bindings and multiple
values.  Syntax: (let (<clause>*) <body>).  The <clause> syntax is more general
than for CL:LET:
  <clause>  ::=   <symbol>                 ; binds to NIL
                | ( <symbol> )             ; likewise
		| <clause1>
  <clause1> ::=   ( <symbol>+ <form> )     ; binding
                | ( <clause1>+ )           ; nesting
When a clause begins with more than one variable name, they are to be bound to
successive values of the form.  The nesting of clauses indicates sequencing of
bindings; more deeply nested clauses may reference bindings of shallower clauses.
All bindings at a given depth are done in parallel.  This allows arbitrary
combinations of parallel and sequential binding.  Standard declarations at the
head of BODY are handled correctly, though nonstandard ones may not be.  If two
variables of the same name are bound at different levels, any declaration
applies to the inner one.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-NEW-LET" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-LEVEL" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "THIS-LEVEL-SINGLE" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "THIS-LEVEL-MULTIPLE" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "NEXT-LEVEL" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BOUND-DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "VARS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRUNE-DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "VARS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ANALYZE-DECLS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns two values. The first value is a cons of: (a) for the bound declarations
at the head of `body', an alist from variable name to a list of declarations
affecting that variable; (b) a list of the remaining (free) declarations.  The
second value is `body' with the declarations stripped off.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEW-LET-BOUND-VARS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TYPE-SPECIFIER-NAME?" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL (:NAME "COND" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "A generalization of CL:COND that makes it convenient to compute a value in
the predicate expression of a clause and then use that value in the consequent.
If the predicate expression is a LET form, then the scope of the variables bound
by the LET is extended to include the consequent expressions.  For example:

  (cond ((let ((x (foo)))
           (bar x))
         (baz x)))

Here the X in (BAZ X) is the one bound to the result of (FOO).")
    (:TYPE :MACRO :SYMBOL (:NAME "BCOND" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "A generalization of CL:COND that makes it convenient to compute a value in
the predicate expression of a clause and then use that value in the consequent.
If the predicate expression is a LET form, then the scope of the variables bound
by the LET is extended to include the consequent expressions.  For example:

  (cond ((let ((x (foo)))
           (bar x))
         (baz x)))

Here the X in (BAZ X) is the one bound to the result of (FOO).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BCOND-CLAUSE" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CLAUSE" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "BLOCK-NM" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "BCOND-BUILD-CLAUSE" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "LET-SYM" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "LET-CLAUSES" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "PRED" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "CONSEQUENTS" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "BLOCK-NM" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL (:NAME "FN" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LAMBDA-LIST" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "NEW-LET" :EXTERNALP NIL))
     :DOCUMENTATION
     "A variant of the `lambda' with two features: (a) the name is shorter
and (b) it automatically generates an `ignore' declaration for any parameter
whose name begins with an underscore.
Note that
  #'(fn ...)
doesn't work, since CL doesn't have Zetalisp-style lambda macros; you have
to say just
  (fn ...)
This is the modern style anyway, I think."))
   :EXTERNAL-SYMBOLS
   ((:NAME "BCOND" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
    (:NAME "COND" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
    (:NAME "FN" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
    (:NAME "NLET" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)
    (:NAME "LET" :PACKAGE-NAME "NEW-LET" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "GMAP" :FULL-NAME "GMAP" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL (:NAME "GMAP" :PACKAGE-NAME "GMAP" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "RES-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "FN" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION
     "A generalized mapping macro.  Applies `fn' to the successive values generated
by the `arg-specs', analagously to `mapcar'; that is, on each iteration, each
arg-spec yields one value, and `fn' is called with these values as arguments.
The values returned by `fn' are accumulated into a result according to
`res-spec'.  The `res-spec' is either a list whose car is a predefined result
type, or a list whose car is `nil' and whose cdr has the same form as the value
of a result type expander (see `def-gmap-res-type'); or, the `res-spec' can be
a symbol, which is shorthand for a list of that symbol; or, it can be a list
whose car is `:values' and whose cdr is a list of result-specs.  Similarly,
each of the `arg-specs' is either a list whose car is a predefined arg type,
or a list whose car is `nil' and whose cdr has the same form as the value of
an arg type expander (see `def-gmap-arg-type').")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>EXPAND" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FN" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "RES-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARG-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>LET-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARG-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "RES-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>PARAM" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>PARAM>ARG" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "PARAM" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "MULTI-VARS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>PARAM>EXIT-TEST" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAM" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>PARAM>MULTI-VARS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>PARAM>MULTI-LET-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAM" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "MULTI-VARS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>RES>INIT-CLAUSES" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "RES-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>RES>NEXT" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "RES-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "RESULT" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "FNVALS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>RES>CLEANUP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RES-SPECS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "RESULT-LIST" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ONE-VALUE-P" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>FUNCALL" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*GMAP-ARG-TYPE-LIST*" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :DOCUMENTATION "A list of all GMAP arg types that have been defined."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*GMAP-RES-TYPE-LIST*" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :DOCUMENTATION "A list of all GMAP result types that have been defined."
     :INITIAL-VALUE "NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-GMAP-ARG-TYPE" :PACKAGE-NAME "GMAP" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION
     "Defines a GMap arg-type.  Syntax is identical to `defun'.  The body should
return a list of 1 to 5 elements: (0, \"init\") the initial value of the
state variable; (1, \"exitp\"), if non-nil, a function of one argument which
is called on the state variable, a true result causing the iteration to
exit; (2, \"argfn\"), if non-nil, a function of one argument which is called
on the state variable to get the value to be used on this iteration; (3,
\"nextfn\"), if non-nil, a function of one argument which is called on the
state variable to get the new value of same; and (4, \"let-specs\") a list of
clauses for an `nlet' that will wrapped around the entire expansion.

It is also possible for an arg-type to generate multiple arguments.  If
element 2, \"argfn\", is of the form `(:values N FN)', FN should be a function
returning N values, which will be passed as separate arguments to the function
being mapped.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-GMAP-RES-TYPE" :PACKAGE-NAME "GMAP" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "ARGS" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION
     "Defines a GMap result-type.  Syntax is identical to `defun'.  The body should
return a list of 2 to 5 elements: (0, \"init\") the initial value of the state
variable; (1, \"resfn\") a function of two arguments which is called on the
state variable and the current value of the function being mapped, returning
the new value of the state variable; (2, \"cleanup\"), if non-nil, a function
of one argument which is called on the final value of the state variable to
get the value of the `gmap' form; (3, \"filterp\"), if non-nil, a predicate
of one argument which is called on the current value of the function being
mapped, a false value causing \"resfn\" not to be called on this iteration (and
the state variable to be unchanged); and (4, \"let-specs\") a list of
clauses for an `nlet' that will wrapped around the entire expansion.

It is also possible for a result-type to consume more than one value of the
function being mapped.  If element 1, \"resfn\", is of the form `(:consume N
FN)', FN should be a function of N + 1 arguments, and will receive N values
from the function being mapped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>ARG-SPEC-LOOKUP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "RAW-ARG-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>RES-SPEC-LOOKUP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "RAW-RES-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP>RES-SPEC-LOOKUP-1" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "RAW-RES-SPEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-404" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VALUE" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-416" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-427" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ALIST" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-438" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PLIST" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-449" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) 0)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) 1)
      ((:NAME "FIXNUMS?" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-586" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL) 1)
      ((:NAME "FIXNUMS?" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-696" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "INITIAL-VALUE" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "BASE" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-724" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-802" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VEC" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-889" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-ARG-SPEC-EXPANDER-969" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "STOP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "INCR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1053" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1087" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1121" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1155" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1189" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1244" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1254" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1264" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1298" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1308" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1342" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1376" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USE-VECTOR" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILL-POINTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ADJUSTABLE" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GMAP-RES-SPEC-EXPANDER-1525" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "USE-STRING" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FILL-POINTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ADJUSTABLE" :PACKAGE-NAME "GMAP" :EXTERNALP NIL)
      (:NAME "FILTERP" :PACKAGE-NAME "GMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "GMAP" :PACKAGE-NAME "GMAP" :EXTERNALP T)
    (:NAME "DEF-GMAP-RES-TYPE" :PACKAGE-NAME "GMAP" :EXTERNALP T)
    (:NAME "DEF-GMAP-ARG-TYPE" :PACKAGE-NAME "GMAP" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "REV-FUN-BIND" :FULL-NAME "REV-FUN-BIND" :DOCUMENTATION
   NIL :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "RLABELS" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE-FORM" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL))
     :DOCUMENTATION
     "Just like `labels' except that the first subform is the form that computes the
value, and the remaining subforms are the binding clauses.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "RFLET" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE-FORM" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL))
     :DOCUMENTATION
     "Just like `flet' except that the first subform is the form that computes the
value, and the remaining subforms are the binding clauses.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "RMACROLET" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE-FORM" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP NIL))
     :DOCUMENTATION
     "Just like `macrolet' except that the first subform is the form that computes the
value, and the remaining subforms are the binding clauses."))
   :EXTERNAL-SYMBOLS
   ((:NAME "RFLET" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T)
    (:NAME "RLABELS" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T)
    (:NAME "RMACROLET" :PACKAGE-NAME "REV-FUN-BIND" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "LEXICAL-CONTEXTS" :FULL-NAME "LEXICAL-CONTEXTS"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :STRUCT :SYMBOL
     (:NAME "CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PARAMETER-LIST" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONSTRUCTOR" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BIND-VARS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BIND-FNS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ALL-VARS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ALL-FNS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MACROS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "PARAMETER-LIST" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "CONSTRUCTOR" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "BIND-VARS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "BIND-FNS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "ALL-VARS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "ALL-FNS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "MACROS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-LOAD-FORM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CTXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENVIRONMENT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "CONTEXT-INSTANCE-DEFAULT-ELEMENT" :PACKAGE-NAME "LEXICAL-CONTEXTS"
      :EXTERNALP NIL)
     :DOCUMENTATION "An attempt to give the user a clue if they run into this."
     :INITIAL-VALUE
     "'LEXICAL-CONTEXTS::|Unbound context slot.  Recompile your `with-context' form.|")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFCONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONTEXT-NAME" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "PARAMETER-LIST" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONTEXT-INVOCATION" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CONTEXTS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONTEXT-INVOCATIONS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP
       NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFLEX" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VAL" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VAL?" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
      (:NAME "DOC" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION
     "Declares `var' as a global lexical variable, and if `val' is supplied and
`var' is not already bound, initializes it to `val'.  `doc', if supplied,
is taken as a documentation string.  In some implementations (e.g. Scieneer),
locally rebinding the same name is not permitted; in most, it is permitted
but creates a new lexical variable, with no effect on the global one.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFLEX-REINIT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "VAL" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOC" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION
     "Declares `var' as a global lexical variable, and initializes it to `val'.
`doc', if supplied, is taken as a documentation string.  In some
implementations (e.g. Scieneer), locally rebinding the same name is not
permitted; in most, it is permitted but creates a new lexical variable,
with no effect on the global one.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ISETQ" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "VAL" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION
     "\"Interactive `setq'\": can be used on previously-undeclared variables
without getting ugly warnings or causing the variable to be declared special.
Not to be used in code!!!")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFCONTEXT-CONTEXT-0-0" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
      (:NAME "F-3" :PACKAGE-NAME NIL :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "Z" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL) 3))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-CONTEXT-0" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFCONTEXT-CONTEXT-1-118" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "K" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-CONTEXT-1" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFCONTEXT-CONTEXT-2-210" :PACKAGE-NAME NIL :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-CONTEXT-2" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "ISETQ" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "DEFCONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "DEFLEX-REINIT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "WITH-CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "WITH-CONTEXTS" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "DEFLEX" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)
    (:NAME "IMPORT-CONTEXT" :PACKAGE-NAME "LEXICAL-CONTEXTS" :EXTERNALP T)))))
