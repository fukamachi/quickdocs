
(:TYPE :SYSTEM :NAME "listoflist" :AUTHOR "AJ Rossini" :MAINTAINER NIL :VERSION
 NIL :LICENCE "MIT" :DESCRIPTION
 "makes listoflist an xarray'able data structure." :LONG-DESCRIPTION NIL
 :DEPENDS-ON ("XARRAY" "LIFT") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "LISTOFLIST" :FULL-NAME "LISTOFLIST" :DOCUMENTATION
   "XARRAY support for list-of-list data structures." :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "LISTOFLISTP" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "RAGGED" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "VARTYPES" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Test for conformance of structure: list whose sublists are of the
same size (if ragged is T, then just test that list has elements of
type list).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSPOSE-LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "This function does the moral-equivalent of a matrix transpose on a
rectangular list-of-lists data structure.

Assumes listoflist is rectangular, need to see what happens if
ragged (or at least check).  Could use the listoflistp predicate to
confirm.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EQUAL-LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "Y" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "FIXME: This function, when written, should walk through 2 listoflists and
return T/nil based on equality.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SUBLISTS-OF-SAME-SIZE-P" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "LISTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "WRITEME!  Take a list of list, and verify that the sublists are all of the same size.
returns size-of-sublist if all sublists same size, otherwise nil")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISTSOFLISTS-CONSISTENT-DIMENSIONS-P" :PACKAGE-NAME "LISTOFLIST"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST-OF-LIST-NAMES" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check if the lengths of the lists are equal (T, otherwise NIL), to
justify further processing and initial conditions.")
    (:TYPE :METHOD :SYMBOL (:NAME "XTYPE" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL (:NAME "XRANK" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Basically, assuming coherently sized object, return number of
nested lists in first object.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISTOFLISTS-DIMENSIONS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LOL" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "We assume row-major, that is each sublist denotes a row, and columns are formed by taking the jth element from each list to form the jth column")
    (:TYPE :METHOD :SYMBOL (:NAME "XDIMS" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "XREF-WRITABLE-P" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBSCRIPTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Lists always can be written to -- until we read-only it?!")
    (:TYPE :METHOD :SYMBOL (:NAME "XREF" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBSCRIPTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "XREF" :PACKAGE-NAME "XARRAY" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      ((:NAME "OBJECT" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUBSCRIPTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CARRAY-LOL" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ELEMENT-TYPE" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "DIMENSIONS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a (simple-array element-type dimensions) containing elements,
coerced to element-type.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CVECTOR*-LOL" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a (simple-array element-type (*)) containing elements,
coerced to element-type, where the elemen-type is obtained using
numeric-type-classifier.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CARRAY*-LOL" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DIMENSIONS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ELEMENTS" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a (simple-array element-type dimensions) containing elements,
coerced to element-type, where the elemen-type is obtained using
numeric-type-classifier.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ARRAY->LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARR" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ROWMAJOR" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))))
     :DOCUMENTATION "FIXME: need to write this.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISTOFLIST->ARRAY" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOL" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ROW-MAJOR" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP NIL))))
     :DOCUMENTATION "From a listoflists structure, make an array.

FIXME: need to verify that the listoflists is a valid structure (same
size rows, typing if required, etc.

<example>
  (defparameter *mdfl-test*
      (list (list 'a 1 2.1)
            (list 'b 2 1.1)
            (list 'c 1 2.0)
            (list 'd 2 3.0)))
  (length *mdfl-test*)
  (length (elt *mdfl-test* 0))

  (defparameter *mdfl-test-dt* (make-datatable-from-listoflists *mdfl-test*))
  (array-dimensions *mdfl-test-dt*)
</example>"))
   :EXTERNAL-SYMBOLS
   ((:NAME "LISTOFLIST->ARRAY" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "TRANSPOSE-LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "XTYPE" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
    (:NAME "XREF-WRITEABLE-P" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "EQUAL-LISTOFLIST" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "XDIMS" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
    (:NAME "XELTYPE" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "LISTOFLISTP" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "XREF" :PACKAGE-NAME "XARRAY" :EXTERNALP T)
    (:NAME "SUBLISTS-OF-SAME-SIZE-P" :PACKAGE-NAME "LISTOFLIST" :EXTERNALP T)
    (:NAME "XRANK" :PACKAGE-NAME "XARRAY" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "-USER" :FULL-NAME "LISTOFLIST-USER" :DOCUMENTATION
   "verification, sandbox, and illustration package for LISTOFLIST."
   :SYMBOL-LIST NIL :EXTERNAL-SYMBOLS NIL)
  (:TYPE :PACKAGE :NAME "-UNITTESTS" :FULL-NAME "LISTOFLIST-UNITTESTS"
   :DOCUMENTATION "unit-testing structure for LISTOFLIST using LIFT."
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "LOL-UT" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP T)
     :SUPER-CLASS-LIST ((:NAME "TEST-MIXIN" :PACKAGE-NAME "LIFT" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MY-LOL-1" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MY-LOL-2" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "SETUP-TEST" :PACKAGE-NAME "LIFT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "TESTSUITE" :PACKAGE-NAME "LIFT" :EXTERNALP NIL)
       (:NAME "LOL-UT" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SETUP-TEST" :PACKAGE-NAME "LIFT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "TESTSUITE" :PACKAGE-NAME "LIFT" :EXTERNALP NIL)
       (:NAME "LOL-UT" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP T)))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "LOL-UT" :PACKAGE-NAME "LISTOFLIST-UNITTESTS" :EXTERNALP T)))))
