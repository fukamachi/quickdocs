
(:TYPE :SYSTEM :NAME "evol" :AUTHOR "Alexander Kahl <e-user@fsfe.org>"
 :MAINTAINER NIL :VERSION "0.0.1" :LICENCE "GPLv3+" :DESCRIPTION
 "evol - entrenched virtues of lisp / love reversed. Multi-purpose build system."
 :LONG-DESCRIPTION NIL :DEPENDS-ON
 ("EXTERNAL-PROGRAM" "CL-FAD" "CL-PPCRE" "ALEXANDRIA" "UNIX-OPTIONS"
  "BORDEAUX-THREADS" "PATRON")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "EVOL" :FULL-NAME "EVOL" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "POSIX-ARGV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "posix-argv => list

Return command line argument list. Implementation dependent.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POSIX-QUIT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CODE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "posix-quit => bye bye

Quit the current running CL instance returning error CODE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAPTHREAD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MORE-LISTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "mapthread function list &rest more-lists => list

Apply FUNCTION against each set of elements from LIST and MORE-LISTS just like
MAPCAR but use a new thread for each call. Returns result list from joining all
threads created that way.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-OUTPUTS-TO-STRINGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VARS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMS-DECLS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "with-outputs-to-strings (&rest vars) &body forms-decls => (result string1 .. stringN)

The multi-version of WITH-OUTPUT-TO-STRING preserving original return values.
Evaluate FORMS-DECLS with each element in VARS bound to a fresh open stream.
Return multiple VALUES of FORMS-DECLS evaluation result and one string per VARS
in given argument order.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRINGIFY" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "stringify object => string

If OBJECT is a STRING, return it - else cast WRITE-TO-STRING.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-SLOT-ENHANCED-ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "SLOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "with-slot-enhanced-environment (slots object) body => context

Create lexical context overriding *ENVIRONMENT* with a fresh copy enhanced by
all slot names/values as key/values from symbol list SLOTS in OBJECT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATHNAME-SUFFIX-P" :PACKAGE-NAME "EVOL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SUFFIX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "PATHSPEC" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "pathname-suffix-p suffix pathspec => boolean

Predicate whether pathspec has file name suffix.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PATHNAME-CHANGE-SUFFIX" :PACKAGE-NAME "EVOL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SUFFIX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "PATHSPEC" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "pathname-change-suffix suffix pathspec => string

Change suffix of path name string pathspec; adds suffix if none present yet.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T) :DOCUMENTATION
     NIL :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EXPAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "expand standard-object => string

Return a suitable form of the object for %-style rule expansion.
Defined here to prevent circular dependencies.")
    (:TYPE :METHOD :SYMBOL (:NAME "EXPAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "expand object => object

Just return IDENTITY of the OBJECT.")
    (:TYPE :METHOD :SYMBOL (:NAME "EXPAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "expand object => object

Just return IDENTITY of the OBJECT.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "GETENV" :PACKAGE-NAME "EVOL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ENV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T))
      ((:NAME "EXPANDED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "DEFAULT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) ""))
     :DOCUMENTATION "getenv var &key env expanded default => mixed

Return object stored for key var from hash :env and :expand the object for
external command use if desired.")
    (:TYPE :MACRO :SYMBOL (:NAME "DEFENV" :PACKAGE-NAME "EVOL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "VAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T))))
     :DOCUMENTATION "defenv var val &optional environment => val

Store val for key var in hash environment.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POSIX-GETENV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "posix-getenv name => string

Return value for POSIX environmental key name, empty string if nothing found.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERNIFY" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "internify name => symbol

Return interned symbol for arbitrarily typed name; useful for use as hash keys.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SYMBOLIZE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "symbolize name => symbol

Quotes, transforms and interns unquoted variable names.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEPENDENCY-NODES-HASHTABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "NAMEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "DEPENDENCYFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "dependency-nodes-hashtable predicate namefn dependencyfn env => node-list

Filter out all values satisfying PREDICATE from hashtable ENV and return result
list of transforming each one into a node list by calling NAMEFN and
DEPENDENCYFN.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEPENDENCY-NODE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAMEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "DEPENDENCYFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "dependency-node namefn dependencyfn object => node

Transform OBJECT into a node (list) by appending the results of calling NAMEFN
and DEPENDENCYFN against it.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ROOT-NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "root-nodes nodes => node-list

Return all root nodes in NODES.
Root nodes are identified by not being referenced as a dependency by any other
node. This is done by building the difference (complement of intersection) between the
ones having dependencies and the complete set.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LEAF-NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "leaf-nodes nodes => node-list

Return all leaf nodes in NODES.
Leaf nodes are simply the ones with no dependencies at all.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-NODE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "find-node name nodes => node

Find and return node designated by NAME in NODES.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "RESOLVE-COND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "SEEN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "PROLOGUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EPILOGUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "resolve-cond name nodes seen (&body prologue) &body epilogue => context

Insert COND clauses between PROLOGUE clauses and EPILOGUE final clause that
check for erroneous conditions between the NAME of a node, the list of all NODES
and nodes SEEN during dependency resolution and signal errors accordingly if
encountered.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESOLVE-QUEUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ROOT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "resolve-queue root nodes => queue

Try to resolve dependencies for ROOT node in NODES and return its dependency
queue.

Queues are suitable for sequential building only.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESOLVE-DAG" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ROOT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "resolve root nodes => dag

Try to resolve dependencies for ROOT node in NODES and return its dependency
dag (directed acyclic graph).

Dags are suitable for parallel building.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESOLVE-ALL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "RESFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ROOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION
     "resolve-all nodes resfn &optional (roots nodes) => list of dags or queues

Resolve list of distinct ROOTS (or, by default, everything) in node-list NODES
using resfn.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESOLVE-ROOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "RESFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "resolve-roots nodes resfn => list of dags or queues

Resolve node-list NODES using resfn for all its root-nodes.")
    (:TYPE :STRUCT :SYMBOL
     (:NAME "RING-BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "STRUCTURE-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Structure defining ring buffers utilizing a simple VECTOR of fixed size and
four indices:
START: Index of first live value
END:   Index of last live value
USED:  Beginning of current match
NEW:   End of current match"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "START" :PACKAGE-NAME "EXTERNAL-PROGRAM" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "USED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NEW" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "END" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-RING-BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "VECTOR" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM0" :PACKAGE-NAME NIL :EXTERNALP NIL))
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (((:NAME "START" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM1" :PACKAGE-NAME NIL :EXTERNALP NIL))
       -1)
      (((:NAME "USED" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM2" :PACKAGE-NAME NIL :EXTERNALP NIL))
       -1)
      (((:NAME "NEW" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM3" :PACKAGE-NAME NIL :EXTERNALP NIL))
       -1)
      (((:NAME "END" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "DUM4" :PACKAGE-NAME NIL :EXTERNALP NIL))
       -1))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEW-RING-BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LENGTH" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "new-ring-buffer length => ring-buffer

Create a new RING-BUFFER containing a simple character vector of fixed size
LENGTH.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RBREF" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "rbref buffer index => character or #Nul

Return character stored at INDEX in ring BUFFER.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RBREF" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "INDEX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "setf (rbref buffer index) value => value

SETF for RBREF. If INDEX > LENGTH of BUFFER, start over at the beginning.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-INSERT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "ring-buffer-insert buffer value => value

Increment END of BUFFER inserting VALUE at the new index.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-RESET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "ring-buffer-reset buffer => end-index

Reset match beginning/end indices USED and NEW in BUFFER to START and END.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-POP" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "ring-buffer-pop buffer => character

Increment START of BUFFER returning VALUE at the new index. Additionally, reset
the BUFFER match indices.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-NEXT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "ring-buffer-next buffer => character or nil

Return next match character incrementing USED in BUFFER or simply NIL if none
are left.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-CLEAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "ring-buffer-clear buffer => -1

Reset all indices of BUFFER to their initial state.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RING-BUFFER-FLUSH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "BUFFER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "ring-buffer-flush buffer => string

Flush all unused characters in BUFFER.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-UNTIL-MATCH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TERMINAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "read-until-match stream terminal => string

Read characters from STREAM until a sequence equal to string TERMINAL is read.
Return all characters read as string omitting TERMINAL itself. Signal error upon
EOF.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-HEREDOC" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARG" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "read-heredoc stream char arg => string

Return string from STREAM up to the point where the string read first until CHAR
is encountered. All evaluation is completely turned off so no quoting is
required at all.
Example: #>eof>Write whatever (you) \"want\"!eof => Write whatever (you) \"want\"!")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "COMMAND-FAILURE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RUN-COMMAND" :PACKAGE-NAME "EVOL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CMD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VERBOSE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FATAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "run-command cmd &key verbose fatal => (integer string string)

Run command line list CMD (blocking), returning VALUES of exit status of
invocation and strings of stdout and stderr output. If FATAL is non-nil and exit
status is not 0, signal COMMAND-FAILURE instead.
Side-effect: Print CMD prior to invocation and command output if VERBOSE is
non-nil.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPOLATE-COMMANDLINE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CMD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TARGET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) "")
      ((:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DEFAULT-SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP T)))
      ((:NAME "ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T)))
     :DOCUMENTATION
     "interpolate-commandline cmd &key target sourcefn environment => list

Interpolate split arguments of command line string CMD after grouping through
Bourne shell syntax block quoting, see split-commandline for details.
Unquoted quotes are stripped after interpolation, single quotes prevent
interpolation of their contained argument while double quotes don't.
Returns list of split and interpolated arguments.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFAULT-SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TARGET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "MODIFIER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "default-sourcefn target modifier => string

Default source computing function that does nothing but ignoring all arguments
and always returns an empty string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-COMMANDLINE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "CMD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "split-commandline cmd => list

Split command line string cmd into arguments accourding to Bourne shell syntax
rules honoring double quotes [\"], single quotes ['] and regular whitespace.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPOLATE-ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "TARGET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "interpolate-argument argument target sourcefn environment => list

Expand all % and $ matches in string argument in turn.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPOLATE-%-ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "TARGET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "interpolate-%-argument argument target sourcefn environment => string

Expand all matches of % words in string ARGUMENT honoring the special TARGET and
SOURCEFN matches and, for the rest, the ENVIRONMENT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INTERPOLATE-$-ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "interpolate-$-argument argument => string

Expand all matches of $ words in string ARGUMENT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REPLACE-WITH-REGION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "REPLACEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "replace-with-region replacefn &rest args => closure

Create closure that is suitable for use with cl-ppcre replacement forms. Created
closure invokes replacefn against the matched subsequence in the string to be
searched additionally passing args.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRIM-{}" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "trim-{} string => string

Trims {} brackets strings.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-%-MATCH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "MATCH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "TARGET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "ENVIRONMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "expand-%-match match target sourcefn environment => string

Act depending on string match:
- % returns %
- @ returns target
- < returns result of invoking sourcefn against target and modifier
- Any other sequence will be looked up in evol's environment returning the
  result, defaulting to an empty string
- In case of @ and <, if target respectively sourcefn invocation returns a list,
  it will be auto-deflated to a string with spaces as element seperator. To
  modify the deflation seperator, simply pass any non-whitespace character
  sequence after @ or <, e.g.
  [@,] for target := (foo bar baz) => \"foo,bar,baz\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPAND-$-MATCH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "MATCH" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "expand-$-match match => string

Lookup match in the environment CL was started in returning the result.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFLATE-STRING" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEPARATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) " "))
     :DOCUMENTATION "deflate-string list &optional separator => string|object

Splice list of strings into merged string having elements separated with string
seperator.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "Base class for all evolvables." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION
       "The name of the evolvable, also available in evol's environment")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DEPENDENCIES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "DEPENDENCIES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION
       "List of evolvables this one depends on")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ENV-SLOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ENV-SLOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION
       "List of slots to lexically bind to the environment during evolution")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MUTEX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "MUTEX" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION "Mutex for the wait queue")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WAITQUEUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "WAITQUEUE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION
       "Wait queue used for multithreaded breeding")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HATCHED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "HATCHED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION "Whether evolution is finished")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "initialize-instance :after evol &rest initargs => evol

Also register evolvable in the evol *environment*")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "print-object evolvable stream => nil

Printing evolvable-derived objects must simply return their names.")
    (:TYPE :METHOD :SYMBOL (:NAME "EXPAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "expand evol => string

Expand EVOL to its name.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Evolve this, whatever that may be")
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "evolve :around evol &rest args &key &allow-other-keys => context

Call the next method in scope of a copy of *ENVIRONMENT* enhanced by all slots
in EVOL specified by ENV-SLOTS.")
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "evolve :around evol &rest args &key &allow-other-keys => context

Call the next method in scope of a copy of *ENVIRONMENT* enhanced by all slots
in EVOL specified by ENV-SLOTS.")
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "evolve :after evol &rest args &key &allow-other-keys => t

Mark evolvable EVOL hatched.")
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "evolve :after evol &rest args &key &allow-other-keys => t

Mark evolvable EVOL hatched.")
    (:TYPE :GENERIC :SYMBOL (:NAME "RESET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "reset evolvable => result

Reset evolution of EVOLVABLE.")
    (:TYPE :METHOD :SYMBOL (:NAME "RESET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "reset evolvable => nil

Set slot HATCHED back to nil. Useful for development (only?).")
    (:TYPE :METHOD :SYMBOL (:NAME "RESET" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "reset evolvable => nil

Set slot HATCHED back to nil. Useful for development (only?).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVOLVABLE-P" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "evolvable-p object => boolean

Tell whether OBJECT is an EVOLVABLE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-EVOLVABLES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ENV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T)))
     :DOCUMENTATION "reset-evolvables env => evolvables-list

RESET all evolvables in hashtable ENV. Useful for development.")
    (:TYPE :CLASS :SYMBOL (:NAME "VIRTUAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Virtual evolvables exist for the sole purpose of
beautification through grouping and/or naming by having its dependencies
evolve."
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "VIRT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "VIRTUAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "HIVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST ((:NAME "VIRTUAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "Hives are similar to virtuals but enable mass spawning of
evolvables they auto-depend on so depending on a hive saves from declaring
lots of mutual evolvables manually."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OF" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL :READERS
       ((:NAME "OF" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)) :WRITERS NIL
       :DOCUMENTATION "The subtype of evolvable to harbor")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SPAWN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "SPAWN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION
       "Source of spawn evolvables; can be a function or a list")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "HIVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "HIVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "initialize-instance :after hive &rest initargs &key &allow-other-keys => void

Create an EVOLVABLE :OF type for each :SPAWN with all key arguments proxied
but :NAME, :OF:, :SPAWN and have the HIVE itself auto-depend on them.")
    (:TYPE :METHOD :SYMBOL (:NAME "EXPAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "HIVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "HIVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "expand hive => list

Hives expand to a list of their dependencies' names.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "DEFINITE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :SUPER-CLASS-LIST
     ((:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Definite evolvables define transformation rules and
computation of their effective input(s) to evolve, possibly from some kind of
sources."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION "The rule used to evolve the definite")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION
       "The function to compute the input from other slots
like e.g. target and name")))
    (:TYPE :CLASS :SYMBOL
     (:NAME "CHECKABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :SUPER-CLASS-LIST
     ((:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Evolvables derived from checkable provide a means to pre- and
post-validate their evolution."
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EVOLVED-P" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CHECKABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Check that given evolution has been evolved properly")
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "CHECKABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CHECKABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Files are targets that usually lead to evolution
of... files. Their existence can easily be checked through their distinct
pathnames."
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EVOLVED-P" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "EXECUTABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :SUPER-CLASS-LIST
     ((:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "Executables are files that can be run on a machine's stack by
either containing machince code themselves or referring to an interpreter for
source code contained within. This class ensures its file is executable after
creation."
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EXE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EXECUTABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "GENERIC-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST ((:NAME "DEFINITE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "Objects of this kind evolve through running an external
program through interpolating the rule and source function contained within
honoring common quoting rules in line with Bourne shell syntax."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRANS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "GENERIC-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "GENERIC" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "GENERIC-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "TODO" :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "PROGRAM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "GENERIC-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "EXECUTABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "TODO" :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CL-LOAD-OPS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "cl-load-ops list => list

Prepares a list of ASDF:LOAD-op forms for op in input LIST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CL-RUN-COMMAND" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "IMPLEMENTATION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "PACKAGES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "CMD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VERBOSE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FATAL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "cl-run-command implementation packages cmd &key verbose fatal => (integer string string)

Run CL command sequence CMD with the appropriate IMPLEMENTATION. Load all
PACKAGES with ASDF first.
Wrap CMD in an implicit PROGN and HANDLER-CASE.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "CL-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST ((:NAME "DEFINITE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "Evolution takes place here through running a freshly forked
Common Lisp copy that expects rule to be a list of forms to execute in order.
sourcefn is expected to return list of valid Common Lisp forms that will each be
grouped as a single argument to be passed to (eval) so no special quoting aside
from \\\" is required.
Variable expansion is only performed against sourcefn's return forms."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "IMPLEMENTATION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CL-IMPLEMENTATION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TRANS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "CL-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "CL-CORE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CL-TRANSFORMATOR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "FILE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "This evolvable enables creation of non-standalone Common Lisp
core (heap image) files.
Feed rule with a list of asdf-recognized package symbols to load into the
core."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION
       "Preinitialized for this class; returns a list of
forms to first load asdf, then in turn additional asdf packages from rule and
finally a form to have sbcl create a core file.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PACKAGES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CL-PACKAGES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS NIL
       :WRITERS NIL :DOCUMENTATION
       "Package to load before creating heap image.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CL-SAVE-OPTIONS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "CL-SAVE-OPTIONS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION "Additional arguments to pass to the
implementation-dependent save call.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ENV-SLOTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "CORE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "CL-CORE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL (:NAME "CL-EXE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "CL-CORE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "EXECUTABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "In line with cl-core, a complete dump is generated but with
the engine fully runable contained within so the resulting file is a real
executable.
Feed rule with a list of asdf-recognized package symbols to load into the
binary."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "RULE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL (:NAME "EVOLVE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "EXE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "CL-EXE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-DEPENDENCY-NODES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "with-dependency-nodes var &body body => context

Evaluate BODY in scope of VAR bound to dependency node list.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "EVAL-REVERSE-CONS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BODY1" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BODY2" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "eval-reverse-cons (&body body1) (&body body2) => cons

Evaluate BODY2 and BODY1 in this order and return result cons [BODY1|BODY2].")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-NEW-LOCK-HELD" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "with-new-lock-held var &body body => context

Evaluate BODY in locked scope of VAR bound to a new mutex with random name.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAFE-GETENV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LOCK" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "VAR" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "safe-getenv lock var => result

Mutex-protected GETENV.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAFE-FORMAT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "LOCK" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "DESTINATION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "CONTROL-STRING" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "safe-format lock control-string &rest format-arguments => nil

Mutex-protected FORMAT.")
    (:TYPE :CLASS :SYMBOL (:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION "Solitary breeder class." :SLOT-LIST
     NIL)
    (:TYPE :GENERIC :SYMBOL (:NAME "BREED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "Breed the evolvable so it can hatch")
    (:TYPE :METHOD :SYMBOL (:NAME "BREED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "breed breeder evol => result-list

Breed dependency evolvables of EVOL sequentially depth-first up to and including
EVOL itself. No multithreading, minimal overhead, nil deadlocks.")
    (:TYPE :METHOD :SYMBOL (:NAME "BREED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "breed breeder evol => result-list

Breed dependency evolvables of EVOL sequentially depth-first up to and including
EVOL itself. No multithreading, minimal overhead, nil deadlocks.")
    (:TYPE :CLASS :SYMBOL (:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "PATRON" :PACKAGE-NAME "PATRON" :EXTERNALP T))
     :DOCUMENTATION "Swarms are breeders that heavily rely on threading and also
derive from Patron for thread-pooled queue working."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS ((:NAME "SWARM-STREAM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "Stream to use for printing")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ERROR-STREAM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "SWARM-ERROR-STREAM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "Stream to use for printing errors")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STREAM-LOCK" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "STREAM-LOCK" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "Mutex to use for printing")))
    (:TYPE :METHOD :SYMBOL (:NAME "BREED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ENQUEUE-BREEDING" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Push breeding an evolvable into the worker queue and wait for
the job to finish")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENQUEUE-BREEDING" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "enqueue-breeding swarm evol => result

Create and hold a new mutex, push breeding into the Patron queue and wait for
Patron to call either RESULT-REPORT-FUNCTION or ERROR-REPORT-FUNCTION that are
both set to notify condition against the entry thread of this method which is
waiting. If a condition is found in the finished job, signal it, else return
evolution result.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENQUEUE-BREEDING" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "enqueue-breeding swarm evol => result

Create and hold a new mutex, push breeding into the Patron queue and wait for
Patron to call either RESULT-REPORT-FUNCTION or ERROR-REPORT-FUNCTION that are
both set to notify condition against the entry thread of this method which is
waiting. If a condition is found in the finished job, signal it, else return
evolution result.")
    (:TYPE :METHOD :SYMBOL (:NAME "BREED" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "SWARM" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      ((:NAME "EVOL" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "EVOLVABLE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)))
     :DOCUMENTATION "breed swarm evolvable => result-dag

Swarm-based evolution. Works through creating new threads per edge / dag node /
branch (equivalent here) while locking the evolvables encountered. Breeding is
forwarded to the Patron queue that works by using a thread pool itself so
welcome to deadlock wonderland!
There is considerable overhead involved in this method but payoff should be
reached early even for simple real-life evolutions with mediocre complexity.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-EVOLUTION*" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OPTIONS*" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :DOCUMENTATION NIL
     :INITIAL-VALUE
     "'((EVOL::HELP :OPTIONS (\"h\") :DEFAULT NIL :ARGUMENT NIL :DESCRIPTION
   \"Display this help and exit.\")
  (EVOL::SILENT :OPTIONS (\"s\" \"silent\" \"quiet\") :DEFAULT NIL :ARGUMENT NIL
   :DESCRIPTION \"Don't echo commands.\")
  (EVOL::FILE :OPTIONS (\"f\" \"file\" \"evolution\") :DEFAULT \"Evolution\" :ARGUMENT
   \"FILE\" :DESCRIPTION \"Use FILE as evolution.\")
  (EVOL::JOBS :OPTIONS (\"j\" \"jobs\") :DEFAULT \"1\" :ARGUMENT \"JOBS\" :DESCRIPTION
   \"Breed JOBS evolvables simultaneously.\"))")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEVOLUTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "DEPENDENCIES" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "devolution name &rest args &key type &allow-other-keys => object

Top-level syntactic sugar macro to create evolvables. Name will be the
environmental hash key, :TYPE must be a valid class name and all other keys will
be proxied to MAKE-INSTANCE.")
    (:TYPE :MACRO :SYMBOL (:NAME "DEFAULT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "default name => mixed

Top-level syntactic sugar macro to set the default evolvable to name.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVOLUTION-ARGUMENTS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARGS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "evolution-arguments args => list

List of what to evolve based on list of command line args, default evolution and
- as a last resort - the first defined evolvable.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "GETF-OPTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OPTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
      (:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "getf-option option keyword => result

GETF for options.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ARGUMENT-OPTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "argument-option argument => option

Find option owning ARGUMENT (command line option).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-OPTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ARGUMENT" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "format-option stream string argument => result

Print option STRING with optional ARGUMENT to STREAM; formatting depends on
whether STRING is a short or a long option, determined by its length.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNIX-OPTIONS-OPTIONS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "unix-options-options => (bool-options parameter-options)

Transform *OPTIONS* so that they are suitable for use with
UNIX-OPTIONS:MAP-PARSED-OPTIONS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-COMMANDLINE" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ARGV" :PACKAGE-NAME "EVOL" :EXTERNALP NIL))
     :DOCUMENTATION "parse-commandline argv => (args opts)

Parse command line argument list ARGV with UNIX-OPTIONS:MAP-PARSED-OPTIONS and
defined available *OPTIONS*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-HELP" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "print-help => string

Print help.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JOBS-BREEDER" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "JOBS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "jobs-breeder jobs => breeder

Create the appropriate BREEDER for the number of JOBS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOAD-EVOLUTION" :PACKAGE-NAME "EVOL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "OPTIONS" :PACKAGE-NAME "EVOL" :EXTERNALP NIL)) :DOCUMENTATION
     "load-evolution options => void

Load the evolution file based on command line OPTIONS.")
    (:TYPE :FUNCTION :SYMBOL (:NAME "REPL" :PACKAGE-NAME "EVOL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "repl => quit

Top-level function used for the standalone executable created through
bootstrapping evol.
Heads-up: Quits CL after execution."))
   :EXTERNAL-SYMBOLS
   ((:NAME "GETENV" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "RUN-COMMAND" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "DEFAULT-SOURCEFN" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "*ENVIRONMENT*" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "PATHNAME-CHANGE-SUFFIX" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "REPL" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "PATHNAME-SUFFIX-P" :PACKAGE-NAME "EVOL" :EXTERNALP T)
    (:NAME "DEFENV" :PACKAGE-NAME "EVOL" :EXTERNALP T)))))
