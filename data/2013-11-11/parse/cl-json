
(:TYPE :SYSTEM :NAME "cl-json" :AUTHOR NIL :MAINTAINER
 "Henrik Hjelte <henrik@henrikhjelte.com>" :VERSION "0.5.0" :LICENCE "MIT"
 :DESCRIPTION
 "JSON in Lisp. JSON (JavaScript Object Notation) is a lightweight data-interchange format."
 :LONG-DESCRIPTION NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "JSON" :FULL-NAME "JSON" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "LET-GENSYMS" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NAMES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CUSTOM-VARS*" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :DOCUMENTATION
     NIL :INITIAL-VALUE "NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-SHADOWED-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CUSTOM-KEY-TO-VARIABLE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "LOOP-ON-CUSTOM" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "VAR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "SET-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CUSTOMIZATIONS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "BIND-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "CUSTOMIZATIONS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-CUSTOM-VAR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "NAME" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OTHER-ARGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+JSON-LISP-ESCAPED-CHARS+" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION
     "Mapping between JSON String escape sequences and Lisp chars."
     :INITIAL-VALUE
     "'((#\\\" . #\\\") (#\\\\ . #\\\\) (#\\/ . #\\/) (#\\b . #\\Backspace) (#\\f . #\\Page)
  (#\\n . #\\Newline) (#\\r . #\\Return) (#\\t . #\\Tab) (#\\u 4 . 16))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*USE-STRICT-JSON-RULES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "If non-nil, signal error on unrecognized escape sequences in JSON
Strings.  If nil, translate any such sequence to the char after
slash."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "+JSON-LISP-SYMBOL-TOKENS+" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION
     "Mapping between JSON literal names and Lisp boolean values."
     :INITIAL-VALUE "'((\"true\" . T) (\"null\") (\"false\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-SYMBOLS-PACKAGE*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION "The package where JSON Object keys etc. are interned.
Default KEYWORD, NIL = use current *PACKAGE*."
     :INITIAL-VALUE "(FIND-PACKAGE 'KEYWORD)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-INTERN" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Intern STRING in the current *JSON-SYMBOLS-PACKAGE*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNKNOWN-SYMBOL-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SAFE-JSON-INTERN" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "The default json-intern is not safe. Interns of many 
unique symbols could potentially use a lot of memory.
An attack could exploit this by submitting something that is passed
through cl-json that has many very large, unique symbols. This version
is safe in that respect because it only allows symbols that already 
exists.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-IDENTIFIER-NAME-TO-LISP*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function which maps string (a JSON Object key) to
string (name of a Lisp symbol)."
     :INITIAL-VALUE "'JSON:CAMEL-CASE-TO-LISP")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LISP-IDENTIFIER-NAME-TO-JSON*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function which maps string (name of a Lisp symbol)
to string (e. g. JSON Object key)."
     :INITIAL-VALUE "'JSON:LISP-TO-CAMEL-CASE")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*IDENTIFIER-NAME-TO-KEY*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function which, during decoding, maps the *json-identifier-name-to-lisp*
-transformed key to the value it will have in the result object."
     :INITIAL-VALUE "'JSON:JSON-INTERN")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLASS-REGISTRY*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION
     "A list of anonymous fluid classes, one member for every distinct
combination of direct superclasses."
     :INITIAL-VALUE "NIL")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-CLASS-REGISTRY" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "INHERIT" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Run BODY in a dynamic environment where *CLASS-REGISTRY* is a
temporary local list.  If :INHERIT is non-null, the local registry
shall initially have the same content as the exterior *CLASS-REGISTRY*, 
otherwise it shall be NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-CLASS-REGISTRY" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Reset the *CLASS-REGISTRY* to NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-CLASS*" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "CLASS-DESIGNATOR" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Like FIND-CLASS, but allow self-designating classes for the
argument, and assert that the resulting class is a STANDARD-CLASS.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T) :SUPER-CLASS-LIST
     ((:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "A class to whose instances arbitrary new slots may
be added on the fly."
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ADD-DIRECT-SUBCLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SUPERCLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SUBCLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Fluid classes are thought to be anonymous, and so should not be
registered in the superclass.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-DIRECT-SUBCLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SUPERCLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SUBCLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Fluid classes are thought to be anonymous, and so should not be
registered in the superclass.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "VALIDATE-SUPERCLASS" :PACKAGE-NAME "SB-MOP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T))
      ((:NAME "SUPERCLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "STANDARD-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Any fluid class is also a standard class.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "Any instance of a fluid class." :SLOT-LIST NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "Any instance of a fluid class." :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPUTE-CLASS-PRECEDENCE-LIST" :PACKAGE-NAME "SB-MOP" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION "Objects of fluid classes are fluid objects.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MISSING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T))
      ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "OP" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SLOT-BOUNDP" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "A missing slot in a fluid class is considered unbound.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MISSING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T))
      ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "OP" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SLOT-MAKUNBOUND" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "A missing slot in a fluid class is considered unbound.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MISSING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T))
      ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "OP" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SLOT-VALUE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "On attempting to get the value of a missing slot, raise a
slot-unbound error.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SLOT-MISSING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T))
      ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "OP" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "On attempting to set a missing slot, add the slot to the class,
then repeat SETF.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-FLUID-CLASS-WITH-SLOTS" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "SLOTS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXTANT-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Create or update a fluid class, ensuring that it has (at least) all
the given SLOTS and SUPERCLASSES.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-AND-POPULATE-INSTANCE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make an instance of the given CLASS, and set its slots to given
values.  BINDINGS must be a list of pairs whose CARs are slot names
and CDRs are the respective values.  If no slot of a given name is
defined in the CLASS, the corresponding value is discarded.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "If CLASS is not NIL, create an instance of that
class.  Otherwise, create a fluid object whose class has the given
SUPERCLASSES (null list by default).  In either case, populate the
resulting object using BINDINGS (an alist of slot names and
values).")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Create a FLUID-OBJECT with the slots given by BINDINGS and whose
class has all the given SUPERCLASSES.  If the current *CLASS-REGISTRY*
has a member with exactly the same direct superclasses, it is updated
to include all the given slots.  Otherwise, a new FLUID-CLASS is
allocated and added to the *CLASS-REGISTRY*.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If the CLASS is explicitly specified, just create and populate an
instance, discarding any of the BINDINGS which do not correspond to
the slots of that CLASS.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If the CLASS is given as 'CONS, return the BINDINGS as alist.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If the CLASS is given as 'LIST, return the BINDINGS as plist.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FIND-CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
          (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If the CLASS is given as 'HASH-TABLE, return the BINDINGS as hash
table.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      ((:NAME "CLASS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If the CLASS is given as a symbol, find it and resort to the usual
procedure.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAX-PACKAGE" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "SYMBOLS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (((:NAME "INITIAL-VALUE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
       ((:NAME "FIND-PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "COMMON-LISP" :PACKAGE-NAME NIL :EXTERNALP NIL)))))
     :DOCUMENTATION
     "Try to find a package P such that the names of the given SYMBOLS,
when interned in P, yield the same symbols.  If no such package
exists, return an unspecific value and issue a warning.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PACKAGE-NAME*" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Same as PACKAGE-NAME, but ensure that the result is a symbol.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PROTOTYPE-NAME*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "The key of the prototype field in a JSON Object, and the name of a
slot in a Lisp object which accepts its prototype."
     :INITIAL-VALUE "'JSON:PROTOTYPE")
    (:TYPE :CLASS :SYMBOL (:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "A PROTOTYPE contains metadata for an object's class
in a format easily serializable to JSON: either the name of the class
as a string or (if it is anonymous) the names of the superclasses as a
list of strings; and the name of the Lisp package into which the names
of the class's slots and the name of the class / superclasses are to
be interned."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LISP-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS ((:NAME "LISP-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LISP-SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "LISP-SUPERCLASSES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LISP-PACKAGE" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "LISP-PACKAGE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-LOAD-FORM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
       (:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENVIRONMENT" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAKE-OBJECT-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Return a PROTOTYPE describing the OBJECT's class or
superclasses, and the package into which the names of the class /
superclasses and of the OBJECT's slots are to be interned.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a PROTOTYPE describing the OBJECT's class or superclasses,
and the package into which the names of the class / superclasses and
of the OBJECT's slots are to be interned.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "CLASS-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a PROTOTYPE of an object of the class named by CLASS-NAME.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-OBJECT-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SLOT-NAMES" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Prototypes are not to be given their own prototypes, otherwise we
would proceed ad malinfinitum.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-ADD-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T))
     :DOCUMENTATION
     "If the PROTOTYPE is not NIL, and the OBJECT has a slot to accept it,
do set it.  Return OBJECT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAP-SLOTS" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Call FUNCTION on the name and value of every bound slot in OBJECT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SIMPLIFIED-CAMEL-CASE-TO-LISP" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "CAMEL-STRING" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Insert - between lowercase and uppercase chars.
Ignore _ + * and several consecutive uppercase.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CAMEL-CASE-SPLIT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Assume STRING is in camel case, and split it into largest possible
``homogenous'' parts.  A homogenous part consists either a) of
upper-case alphabetic chars; or b) of lower-case alphabetic chars with
an optional initial upper-case; or c) of decimal digits; or d) of a
single non-alphanumeric char.  The return value is a list of
pairs (CATEGORY . PART) where CATEGORY is one of the keywords :UPPER,
:UPPER-1, :LOWER, :NUMERIC, :MIXED, and PART is a substring of
STRING.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CAMEL-CASE-TRANSFORM-ALL-CAPS" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PARTS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CAT-BEFORE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "FROM-NUMERIC" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Take a list of PARTS (as returned by CAMEL-CASE-SPLIT) and
transform it into a string with Lisp-style hyphenation, assuming that
some initial portion of it does not contain :MIXED parts.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CAMEL-CASE-TRANSFORM" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARTS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CAT-BEFORE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "PUNCT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION "Take a list of PARTS (as returned by CAMEL-CASE-SPLIT) and
transform it into a string with Lisp-style hyphenation, assuming that
some initial portion of it does not contain :UPPER parts.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CAMEL-CASE-TO-LISP" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Take a camel-case string and convert it into a string with
Lisp-style hyphenation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LISP-TO-CAMEL-CASE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Take a string with Lisp-style hyphentation and convert it to camel
case.  This is an inverse of CAMEL-CASE-TO-LISP.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-SYNTAX-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-CONTROL" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Signal a JSON-SYNTAX-ERROR condition.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-JSON-TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Read a JSON token (literal name, number or punctuation char) from
the given STREAM, and return 2 values: the token category (a symbol)
and the token itself, as a string or character.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PEEK-JSON-TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Return 2 values: the category and the first character of the next
token available in the given STREAM.  Unlike READ-JSON-TOKEN, this
function can not discriminate between integers and reals (hence, it
returns a single :NUMBER category), and cannot check whether the next
available symbol is a valid boolean or not (hence, the category for
such tokens is :SYMBOL).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-JSON-NUMBER-TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read a JSON number token from the given STREAM, and return 2
values: the token category (:INTEGER or :REAL) and the token itself,
as a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-JSON-NAME-TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read a JSON literal name token from the given STREAM, and return 2
values: the token category (:BOOLEAN) and the token itself, as a
string.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ESCAPED-CHAR-DISPATCH" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CODE-HANDLER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "DEFAULT-HANDLER" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compiles the escaped character alist to a (CASE ...) match expression.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-JSON-STRING-CHAR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read a JSON String char (or escape sequence) from the STREAM and
return it.  If an end of string (unescaped quote) is encountered,
return NIL.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-INPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T) :DOCUMENTATION
     "The default input stream for decoding operations." :INITIAL-VALUE
     "(MAKE-SYNONYM-STREAM '*STANDARD-INPUT*)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INTEGER-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 string argument (integer token)."
     :INITIAL-VALUE "(CONSTANTLY 0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*REAL-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T) :DOCUMENTATION
     "Designator for a function of 1 string argument (real token)."
     :INITIAL-VALUE "(CONSTANTLY 0)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BOOLEAN-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 string argument (boolean token)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BEGINNING-OF-STRING-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
an opening quote for a String)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STRING-CHAR-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 character argument (String char)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*END-OF-STRING-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
a closing quote for a String)."
     :INITIAL-VALUE "(CONSTANTLY \"\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BEGINNING-OF-ARRAY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
an opening bracket for an Array)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ARRAY-MEMBER-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 arbitrary argument (decoded member
of Array)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*END-OF-ARRAY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
a closing bracket for an Array)."
     :INITIAL-VALUE "(CONSTANTLY NIL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-ARRAY-TYPE*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "The Lisp sequence type to which JSON Arrays are to be coerced."
     :INITIAL-VALUE "'VECTOR")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*BEGINNING-OF-OBJECT-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
an opening brace for an Object)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OBJECT-KEY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 string argument (decoded member key
of Object)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OBJECT-VALUE-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 arbitrary argument (decoded member
value of Object)."
     :INITIAL-VALUE "(CONSTANTLY T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*END-OF-OBJECT-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of no arguments (called at encountering
a closing brace for an Object)."
     :INITIAL-VALUE "(CONSTANTLY NIL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*INTERNAL-DECODER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "Designator for a function of 1 stream argument called (instead of
DECODE-JSON) to decode a member of an Array or of an Object."
     :INITIAL-VALUE "'JSON:DECODE-JSON")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*OBJECT-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "A list of symbols naming dynamic variables which should be re-bound
in the scope of every JSON Object."
     :INITIAL-VALUE "'(JSON:*INTERNAL-DECODER*)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ARRAY-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "A list of symbols naming dynamic variables which should be re-bound
in the scope of every JSON Array."
     :INITIAL-VALUE "'(JSON:*INTERNAL-DECODER*)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*STRING-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "A list of symbols naming dynamic variables which should be re-bound
in the scope of every JSON String."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*AGGREGATE-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :DOCUMENTATION
     "A list of symbols naming dynamic variables which should be re-bound
in the scope of every JSON aggregate value (Object, Array or String)."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-INPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Read a JSON Value from STREAM and return the corresponding Lisp value.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CUSTOM-DECODER" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CUSTOMIZATIONS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a function which is like DECODE-JSON called in a dynamic
environment with the given CUSTOMIZATIONS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-FROM-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "JSON-STRING" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Read a JSON Value from JSON-STRING and return the corresponding
Lisp value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-FROM-SOURCE" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DECODER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "DECODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T))))
     :DOCUMENTATION
     "Decode a JSON Value from SOURCE using the value of DECODER (default
'DECODE-JSON) as decoder function.  If the SOURCE is a string, the
input is from this string; if it is a pathname, the input is from the
file that it names; otherwise, a stream is expected as SOURCE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-STRICT" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-INPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Same as DECODE-JSON, but allow only Objects or Arrays on the top
level, no junk afterwards.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AGGREGATE-SCOPE-PROGV" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VARIABLES" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Establish a dynamic environment where all VARIABLES are freshly
bound (to their current values), and execute BODY in it, returning the
result.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-ARRAY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read comma-separated sequence of JSON Values until a closing bracket,
calling array handlers as it goes.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read comma-separated sequence of JSON String:Value pairs until a
closing brace, calling object handlers as it goes.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECODE-JSON-STRING" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Read JSON String characters / escape sequences until a closing
double quote, calling string handlers as it goes.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-NUMBER" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :DOCUMENTATION
     "Take a number token and convert it to a numeric value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-BOOLEAN-TO-LISP" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Take a literal name token and convert it to a boolean value.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ACCUMULATOR*" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :DOCUMENTATION
     "List or vector where elements are stored." :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ACCUMULATOR-LAST*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION "If *ACCUMULATOR* is a list, this refers to its last cons."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INIT-ACCUMULATOR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Initialize a list accumulator.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-ADD" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :DOCUMENTATION
     "Add ELEMENT to the end of the list accumulator.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-ADD-KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Add a cons whose CAR is KEY to the end of the list accumulator.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-ADD-VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Set the CDR of the most recently accumulated cons to VALUE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-GET-SEQUENCE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Return all values accumulated so far in the list accumulator as
*JSON-ARRAY-TYPE*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-GET-STRING" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Return all values accumulated so far in the list accumulator as
*JSON-ARRAY-TYPE*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-GET" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "Return all values accumulated so far in the list accumulator as a
list.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INIT-STRING-STREAM-ACCUMULATOR" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Initialize a string-stream accumulator.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-STREAM-ACCUMULATOR-ADD" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Add CHAR to the end of the string-stream accumulator.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-STREAM-ACCUMULATOR-GET" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Return all characters accumulated so far in a string-stream
accumulator and close the stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-DECODER-SIMPLE-LIST-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Set the decoder semantics to the following:
  * Strings and Numbers are decoded naturally, reals becoming floats.
  * The literal name true is decoded to T, false and null to NIL.
  * Arrays are decoded to sequences of the type *JSON-ARRAY-TYPE*.
  * Objects are decoded to alists.  Object keys are converted by the
function *JSON-IDENTIFIER-NAME-TO-LISP* and then interned in the
package *JSON-SYMBOLS-PACKAGE*.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-DECODER-SIMPLE-LIST-SEMANTICS" :PACKAGE-NAME "JSON"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Execute BODY in a dynamic environement where the decoder semantics
is such as set by SET-DECODER-SIMPLE-LIST-SEMANTICS.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PROTOTYPE-PROTOTYPE*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION "The prototype for a prototype object." :INITIAL-VALUE
     "(MAKE-INSTANCE 'JSON:PROTOTYPE :LISP-CLASS 'JSON:PROTOTYPE :LISP-PACKAGE :JSON)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*PROTOTYPE*" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :DOCUMENTATION
     "When NIL, the Object being decoded does not (yet?) have a prototype.
When T, the decoder should get ready to decode a prototype field.
Otherwise, the value should be a prototype for the object being decoded."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INIT-ACCUMULATOR-AND-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Initialize a list accumulator and a prototype.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-ADD-KEY-OR-SET-PROTOTYPE" :PACKAGE-NAME "JSON"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If KEY (in a JSON Object being decoded) matches *PROTOTYPE-NAME*,
prepare to decode the corresponding Value as a PROTOTYPE object.
Otherwise, do the same as ACCUMULATOR-ADD-KEY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-ADD-VALUE-OR-SET-PROTOTYPE" :PACKAGE-NAME "JSON"
      :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "If VALUE (in a JSON Object being decoded) corresponds to a key
which matches *PROTOTYPE-NAME*, set VALUE to be the prototype of the
Object.  Otherwise, do the same as ACCUMULATOR-ADD-VALUE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCUMULATOR-GET-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Return a CLOS object, using keys and values accumulated so far in
the list accumulator as slot names and values, respectively.  If the
JSON Object had a prototype field infer the class of the object and
the package wherein to intern slot names from the prototype.
Otherwise, create a FLUID-OBJECT with slots interned in
*JSON-SYMBOLS-PACKAGE*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-DECODER-SIMPLE-CLOS-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Set the decoder semantics to the following:
  * Strings and Numbers are decoded naturally, reals becoming floats.
  * The literal name true is decoded to T, false and null to NIL.
  * Arrays are decoded to sequences of the type *JSON-ARRAY-TYPE*.
  * Objects are decoded to CLOS objects.  Object keys are converted by
the function *JSON-IDENTIFIER-NAME-TO-LISP*.  If a JSON Object has a
field whose key matches *PROTOTYPE-NAME*, the class of the CLOS object
and the package wherein to intern slot names are inferred from the
corresponding value which must be a valid prototype.  Otherwise, a
FLUID-OBJECT is constructed whose slot names are interned in
*JSON-SYMBOLS-PACKAGE*.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-DECODER-SIMPLE-CLOS-SEMANTICS" :PACKAGE-NAME "JSON"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Execute BODY in a dynamic environement where the decoder semantics
is such as set by SET-DECODER-SIMPLE-CLOS-SEMANTICS.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "CURRENT-DECODER" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Capture current values of custom variables and return a custom
decoder which restores these values in its dynamic environment.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CUSTOM-DECODER-LEVEL" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "CUSTOMIZATIONS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Execute BODY in a dynamic environment such that, when nested
structures are decoded, the outermost level is decoded with the given
custom handlers (CUSTOMIZATIONS) whereas inner levels are decoded in
the usual way.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T) :DOCUMENTATION
     "The default output stream for encoding operations." :INITIAL-VALUE
     "(MAKE-SYNONYM-STREAM '*STANDARD-OUTPUT*)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNENCODABLE-VALUE-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTEXT" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Signal an UNENCODABLE-VALUE-ERROR.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-SUBSTITUTE-PRINTED-REPRESENTATION-RESTART" :PACKAGE-NAME
      "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Establish a SUBSTITUTE-PRINTED-REPRESENTATION restart for OBJECT
and execute BODY.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Write a JSON representation of OBJECT to STREAM and
return NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION "Return the JSON representation of OBJECT as a string.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ANYTHING" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "If OBJECT is not handled by any specialized encoder signal an error
which the user can correct by choosing to encode the string which is
the printed representation of the OBJECT.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "NR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation of the number NR to STREAM (or to
*JSON-OUTPUT*).")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation of the string S to STREAM (or to
*JSON-OUTPUT*).")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "C" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "CHARACTER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "JSON does not define a character type, we encode characters as Strings.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation of the symbol S to STREAM (or to
*JSON-OUTPUT*).  If S is boolean, a boolean literal is written.
Otherwise, the name of S is passed to *LISP-IDENTIFIER-NAME-TO-JSON*
and the result is written as String.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-AGGREGATE-CONTEXT*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION
     "NIL outside of any aggregate environment, 'ARRAY or 'OBJECT within
the respective environments."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-AGGREGATE-FIRST*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION
     "T when the first member of a JSON Object or Array is encoded,
afterwards NIL."
     :INITIAL-VALUE "T")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEXT-AGGREGATE-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTEXT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Between two members of an Object or Array, print a comma separator.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-AGGREGATE" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "CONTEXT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "BEGIN-CHAR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "END-CHAR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Run BODY to encode a JSON aggregate type, delimited by BEGIN-CHAR
and END-CHAR.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-ARRAY" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Open a JSON Array, run BODY, then close the Array.  Inside the BODY,
AS-ARRAY-MEMBER or ENCODE-ARRAY-MEMBER should be called to encode
Members of the Array.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AS-ARRAY-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "BODY should be a program which encodes exactly one JSON datum to
STREAM.  AS-ARRAY-MEMBER ensures that the datum is properly formatted
as a Member of an Array, i. e. separated by comma from any preceding
or following Member.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-ARRAY-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Encode OBJECT as the next Member of the innermost JSON Array opened
with WITH-ARRAY in the dynamic context.  OBJECT is encoded using the
ENCODE-JSON generic function, so it must be of a type for which an
ENCODE-JSON method is defined.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STREAM-ARRAY-MEMBER-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T))))
     :DOCUMENTATION
     "Return a function which takes an argument and encodes it to STREAM
as a Member of an Array.  The encoding function is taken from the
value of ENCODER (default is #'ENCODE-JSON).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Open a JSON Object, run BODY, then close the Object.  Inside the BODY,
AS-OBJECT-MEMBER or ENCODE-OBJECT-MEMBER should be called to encode
Members of the Object.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "AS-OBJECT-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T))))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "BODY should be a program which writes exactly one JSON datum to
STREAM.  AS-OBJECT-MEMBER ensures that the datum is properly formatted
as a Member of an Object, i. e. preceded by the (encoded) KEY and
colon, and separated by comma from any preceding or following Member.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-OBJECT-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Encode KEY and VALUE as a Member pair of the innermost JSON Object
opened with WITH-OBJECT in the dynamic context.  KEY and VALUE are
encoded using the ENCODE-JSON generic function, so they both must be
of a type for which an ENCODE-JSON method is defined.  If KEY does not
encode to a String, its JSON representation (as a string) is encoded
over again.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STREAM-OBJECT-MEMBER-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T))))
     :DOCUMENTATION
     "Return a function which takes two arguments and encodes them to
STREAM as a Member of an Object (String : Value pair).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-LIST-GUESSING-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Write the JSON representation of the list S to STREAM (or to
*JSON-OUTPUT*).  If S is not encodable as a JSON Array, try to encode
it as an Object (per ENCODE-JSON-ALIST).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-BOOL" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :DOCUMENTATION
     "Intended for the JSON-EXPLICT-ENCODER. Converts a non-nil value
to a value (:true) that creates a json true value when used in the 
explict encoder. Or (:false).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-OR-NULL" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :DOCUMENTATION
     "Intended for the JSON-EXPLICT-ENCODER. Returns a non-nil value
as itself, or a nil value as a json null-value")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-LIST-EXPLICIT-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-LIST-ENCODER-FN*" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "#'JSON::ENCODE-JSON-LIST-GUESSING-ENCODER")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "USE-GUESSING-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "USE-EXPLICIT-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCAL-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-GUESSING-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-EXPLICIT-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation of the list S to STREAM (or to
*JSON-OUTPUT*), using one of the two rules specified by 
first calling USE-GUESSING-ENCODER or USE-EXPLICIT-ENCODER.
The guessing encoder: If S is a list encode S as a JSON Array, if
S is a dotted list encode it as an Object (per ENCODE-JSON-ALIST).
The explicit decoder: If S is a list, the first symbol defines
the encoding: 
If (car S) is 'TRUE return a JSON true value.
If (car S) is 'FALSE return a JSON false value.
If (car S) is 'NULL return a JSON null value.
If (car S) is 'JSON princ the strings in (cdr s) to stream
If (car S) is 'LIST or 'ARRAY encode (cdr S) as a a JSON Array.
If (car S) is 'OBJECT encode (cdr S) as A JSON Object, 
interpreting (cdr S) either as an A-LIST or a P-LIST.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation (Array) of the sequence S (not an
alist) to STREAM (or to *JSON-OUTPUT*).")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "H" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation (Object) of the hash table H to
STREAM (or to *JSON-OUTPUT*).")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "O" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
       (:NAME "STANDARD-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation (Object) of the CLOS object O to
STREAM (or to *JSON-OUTPUT*).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-ALIST" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ALIST" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation (Object) of ALIST to STREAM (or to
*JSON-OUTPUT*).  Return NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-ALIST-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ALIST" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the JSON representation (Object) of ALIST as a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-PLIST" :PACKAGE-NAME "JSON" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PLIST" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)))
     :DOCUMENTATION
     "Write the JSON representation (Object) of PLIST to STREAM (or to
*JSON-OUTPUT*).  Return NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-JSON-PLIST-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PLIST" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the JSON representation (Object) of PLIST as a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-JSON-STRING" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Write a JSON representation (String) of S to STREAM.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-JSON-CHARS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "S" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Write JSON representations (chars or escape sequences) of
characters in string S to STREAM.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WRITE-JSON-NUMBER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Write the JSON representation of the number NR to STREAM.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RANGE-KEYS" :PACKAGE-NAME "JSON" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "VAR-KEYS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "JSON-BIND-LEVEL-CUSTOMIZATIONS" :PACKAGE-NAME "JSON" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "LEVEL-KEYS" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "VALUE-REQUIRED" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "DECODER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "VALIDATOR" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "KEY-HANDLER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "VALUE-HANDLER" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "PASS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL (:NAME "JSON-BIND" :PACKAGE-NAME "JSON" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "VARS" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
      (:NAME "JSON-SOURCE" :PACKAGE-NAME "JSON" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "SIMPLIFIED-CAMEL-CASE-TO-LISP" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON-ALIST-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*BEGINNING-OF-STRING-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*AGGREGATE-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "DECODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "USE-GUESSING-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SUBSTITUTE-PRINTED-REPRESENTATION" :PACKAGE-NAME "JSON" :EXTERNALP
     T)
    (:NAME "*USE-STRICT-JSON-RULES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*END-OF-ARRAY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "JSON-BOOL" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*JSON-OUTPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "DECODE-JSON-FROM-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*BOOLEAN-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*JSON-IDENTIFIER-NAME-TO-LISP*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "UNENCODABLE-VALUE-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "CUSTOM-DECODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "PLACEHOLDER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "DECODE-JSON-FROM-SOURCE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "FLUID-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*JSON-ARRAY-TYPE*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "BIGNUMBER-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SET-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*STRING-CHAR-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-EXPLICIT-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*ARRAY-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON-ALIST" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "NO-CHAR-FOR-CODE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "AS-ARRAY-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*IDENTIFIER-NAME-TO-KEY*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "UNKNOWN-SYMBOL-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*INTEGER-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "BIND-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-ARRAY-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "USE-EXPLICIT-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*OBJECT-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "CURRENT-DECODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-DECODER-SIMPLE-LIST-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
     T)
    (:NAME "JSON-INTERN" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "MAKE-OBJECT-PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "PROTOTYPE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*BEGINNING-OF-OBJECT-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-SHADOWED-CUSTOM-VARS" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "PASS-CODE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "STREAM-OBJECT-MEMBER-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-OBJECT-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*LISP-IDENTIFIER-NAME-TO-JSON*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*OBJECT-VALUE-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-CUSTOM-DECODER-LEVEL" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*OBJECT-KEY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SUBSTITUTE-CHAR" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "MAKE-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-SUBSTITUTE-PRINTED-REPRESENTATION-RESTART" :PACKAGE-NAME
     "JSON" :EXTERNALP T)
    (:NAME "*BEGINNING-OF-ARRAY-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-LOCAL-CLASS-REGISTRY" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "JSON-OR-NULL" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-OBJECT" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SET-DECODER-SIMPLE-LIST-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
     T)
    (:NAME "CAMEL-CASE-TO-LISP" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "DECODE-JSON-STRICT" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*PROTOTYPE-NAME*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "LISP-TO-CAMEL-CASE" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-DECODER-SIMPLE-CLOS-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
     T)
    (:NAME "*END-OF-OBJECT-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-GUESSING-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*END-OF-STRING-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "JSON-SYNTAX-ERROR" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "RATIONAL-APPROXIMATION" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SAFE-JSON-INTERN" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*ARRAY-MEMBER-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*JSON-INPUT*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "STREAM-ARRAY-MEMBER-ENCODER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "AS-OBJECT-MEMBER" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "SET-DECODER-SIMPLE-CLOS-SEMANTICS" :PACKAGE-NAME "JSON" :EXTERNALP
     T)
    (:NAME "*INTERNAL-DECODER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*REAL-HANDLER*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON-PLIST" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*STRING-SCOPE-VARIABLES*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "*JSON-SYMBOLS-PACKAGE*" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "WITH-ARRAY" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "ENCODE-JSON-PLIST-TO-STRING" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "JSON-BIND" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "FLUID-CLASS" :PACKAGE-NAME "JSON" :EXTERNALP T)
    (:NAME "CLEAR-CLASS-REGISTRY" :PACKAGE-NAME "JSON" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "JSON-RPC" :FULL-NAME "JSON-RPC" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "DEFCONSTANT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+JSON-RPC-1.1+" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(IF (AND (BOUNDP 'JSON-RPC:+JSON-RPC-1.1+)
         (EQUALP (SYMBOL-VALUE 'JSON-RPC:+JSON-RPC-1.1+) \"1.1\"))
    (SYMBOL-VALUE 'JSON-RPC:+JSON-RPC-1.1+)
    \"1.1\")")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+JSON-RPC-2.0+" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(IF (AND (BOUNDP 'JSON-RPC:+JSON-RPC-2.0+)
         (EQUALP (SYMBOL-VALUE 'JSON-RPC:+JSON-RPC-2.0+) \"2.0\"))
    (SYMBOL-VALUE 'JSON-RPC:+JSON-RPC-2.0+)
    \"2.0\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-RPC-VERSION*" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :DOCUMENTATION "Bind this variable to influence whether you want to use
JSON-RPC version 1.1 or 2.0."
     :INITIAL-VALUE "JSON-RPC:+JSON-RPC-1.1+")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*JSON-RPC-FUNCTIONS*" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQUAL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLEAR-EXPORTED" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFUN-JSON-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LAMBDA-LIST" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION
     "Defines a function and registers it as a json-rpc target.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Is KEYWORD a valid JSON-RPC value encoding?")
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EXPLICIT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EXPLICIT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STREAMING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STREAMING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "GUESSING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "GUESSING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Default is no.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Default is no.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION "Translate RAW-VALUE according to JSON-RPC
value encoding ENCODING")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EXPLICIT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EXPLICIT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STREAMING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "STREAMING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "GUESSING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "GUESSING" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-JSON-RPC-ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VAR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION "Define a new encoding keyword, KEYWORD.  When the encoding
is invoked, the raw value will be bound to VAR, and the
BODY should return the encoded value.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "BOOLEAN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VAL" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "BOOLEAN" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))))
     :DOCUMENTATION NIL)
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+EMPTY-ARRAY+" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(IF (AND (BOUNDP 'JSON-RPC::+EMPTY-ARRAY+)
         (EQUALP (SYMBOL-VALUE 'JSON-RPC::+EMPTY-ARRAY+) '(:ARRAY)))
    (SYMBOL-VALUE 'JSON-RPC::+EMPTY-ARRAY+)
    '(:ARRAY))")
    (:TYPE :METHOD :SYMBOL
     (:NAME "JSON-RPC-ENCODING-P" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ARRAY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ENCODE-JSON-RPC-VALUE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RAW-VAL" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      ((:NAME "KEYWORD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "ARRAY" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPORT-AS-JSON-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FUNC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "FUNCTION-NAME" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Registers a lambda function FUNC as a json-rpc function.
TYPE determines how the return value of FUNC should be interpreted:
:explicit using the explicit encoder syntax,
:guessing using the guessing encode syntax
:streaming as a raw JSON string.
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-RPC-RESPONSE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RESULT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ERROR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ID" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION
     "When the method invocation completes, the service must reply with a response. The response is a single object serialized using JSON.

It has three properties:

    * result - The Object that was returned by the invoked method. This must be null in case there was an error invoking the method.
    * error - An Error object(unspecified in json-rpc 1.0) if there was an error invoking the method. Null if there was no error.
    * id - This must be the same id as the request it is responding to. ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-JSON-RPC-ERROR-OBJECT-1.1" :PACKAGE-NAME "JSON-RPC"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "MESSAGE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CODE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ERROR-OBJECT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION
     "This code is based on the Working Draft 7 August 2006 of Json-rpc 1.1 specification.
  http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-JSON-RPC-ERROR-OBJECT-2.0" :PACKAGE-NAME "JSON-RPC"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "MESSAGE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "CODE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "DATA" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "ERROR-OBJECT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INVOKE-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "JSON-SOURCE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION
     "A remote method is invoked by sending a request to a remote service. The request is a single object serialized using JSON.

It has three properties:

    * method - A String containing the name of the method to be invoked.
    * params - An Array of objects to pass as arguments to the method.
    * id - The request id. This can be of any type. It is used to match the response with the request that it is replying to. ")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INVOKE-RPC-PARSED" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARAMS" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ID" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-RESTART" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "RESTART-NAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PARAMS" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-ERROR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ERRMSG" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "CODE" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-ERROR-OBJECT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "EXPLICIT-ERROBJECT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-NOTHING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-INTERNAL-ERROR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "DEFUN-JSON-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "DEF-JSON-RPC-ENCODING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "SEND-NOTHING" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "JSON-RPC-CALL-ERROR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "SEND-INTERNAL-ERROR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "CLEAR-EXPORTED" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "+JSON-RPC-2.0+" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "EXPORT-AS-JSON-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "INVOKE-RPC-PARSED" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "+JSON-RPC-1.1+" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "*JSON-RPC-VERSION*" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "SEND-ERROR" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "SEND-ERROR-OBJECT" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)
    (:NAME "INVOKE-RPC" :PACKAGE-NAME "JSON-RPC" :EXTERNALP T)))))
