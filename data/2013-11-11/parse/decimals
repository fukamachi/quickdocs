
(:TYPE :SYSTEM :NAME "decimals" :AUTHOR "Teemu Likonen <tlikonen@iki.fi>"
 :MAINTAINER NIL :VERSION NIL :LICENCE "Public Domain" :DESCRIPTION
 "Decimal number parser and formatter" :LONG-DESCRIPTION NIL :DEPENDS-ON NIL
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "DECIMALS" :FULL-NAME "DECIMALS" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "ROUND-HALF-AWAY-FROM-ZERO" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DIVISOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) 1))
     :DOCUMENTATION
     "Divide _number_ by _divisor_ and round the result to the nearest integer.
If the result is half-way between two integers round away from zero. Two
values are returned: quotient and remainder.

This is similar to `cl:round` function except that `cl:round` rounds to
an even integer when number is exactly between two integers. Examples:

    (round-half-away-from-zero 3/2) => 2, -1/2
    (round 3/2)                     => 2, -1/2

    (round-half-away-from-zero 5/2) => 3, -1/2
    (round 5/2)                     => 2, 1/2")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIVIDE-INTO-GROUPS" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEPARATOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\ )
      ((:NAME "FROM-END" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "GROUP-DIGITS" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) 3))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DECIMAL-ROUND-SPLIT" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ROUND-MAGNITUDE" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) 0)
      ((:NAME "ROUNDER" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ROUND-HALF-AWAY-FROM-ZERO" :PACKAGE-NAME "DECIMALS" :EXTERNALP
         T)))
      ((:NAME "POSITIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\+)
      ((:NAME "NEGATIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\-)
      ((:NAME "ZERO-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-ALIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WIDTH" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SIDE" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "LEFT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) #\ ))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-DECIMAL-NUMBER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NUMBER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ROUND-MAGNITUDE" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) 0)
      ((:NAME "ROUNDER" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "ROUND-HALF-AWAY-FROM-ZERO" :PACKAGE-NAME "DECIMALS" :EXTERNALP
         T)))
      ((:NAME "DECIMAL-SEPARATOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\.)
      ((:NAME "INTEGER-GROUP-SEPARATOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "INTEGER-GROUP-DIGITS" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       3)
      ((:NAME "INTEGER-MINIMUM-WIDTH" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       0)
      ((:NAME "INTEGER-PAD-CHAR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\ )
      ((:NAME "FRACTIONAL-GROUP-SEPARATOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FRACTIONAL-GROUP-DIGITS" :PACKAGE-NAME "DECIMALS" :EXTERNALP
        NIL)
       3)
      ((:NAME "FRACTIONAL-MINIMUM-WIDTH" :PACKAGE-NAME "DECIMALS" :EXTERNALP
        NIL)
       0)
      ((:NAME "FRACTIONAL-PAD-CHAR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       #\ )
      ((:NAME "SHOW-TRAILING-ZEROS" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "POSITIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "NEGATIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\-)
      ((:NAME "ZERO-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Apply specified decimal number formatting rules to _number_ and
return a formatted string.

The second return value is (almost) the same formatted string divided
into four strings. It's a list of four strings: sign, integer part,
decimal separator and fractional part. Formatting arguments
_integer-minimum-width_ and _fractional-minimum-width_ do not apply to
the second return value. Everything else does.

_Number_ must be of type `real`. This function uses `rational` types
internally. If the given _number_ is a `float` it is first turned into
`rational` by calling `cl:rational`.

Formatting rules are specified with keyword arguments, as described
below. The default value is in parentheses.

  * `round-magnitude (0)`

    This is the order of magnitude used for rounding. The value must be
    an integer and it is interpreted as a power of 10.

  * `show-trailing-zeros (nil)`

    If the value is non-nil print all trailing zeros in fractional part.
    Examples:

        (format-decimal-number 1/5 :round-magnitude -3
                               :show-trailing-zeros nil)
        => \"0.2\"

        (format-decimal-number 1/5 :round-magnitude -3
                               :show-trailing-zeros t)
        => \"0.200\"

  * `rounder (#'round-half-away-from-zero)`

    The value must be a function (or a symbol naming a function). It is
    used to round the number to the specified round magnitude. The
    function must work like `cl:truncate`, `cl:floor`, `cl:ceiling` and
    `cl:round`, that is, take two arguments, a number and a divisor, and
    return the quotient as the first value.

    This package introduces another rounding function,
    `round-half-away-from-zero`, which is used by default. See its
    documentation for more information.

  * `decimal-separator (#\\.)`

    If the value is non-nil the `princ` output of the value will be
    added between integer and fractional parts. Probably the most useful
    types are `character` and `string`.

  * `integer-group-separator    (nil)`
  * `fractional-group-separator (nil)`

    If the value is non-nil the digits in integer or fractional parts
    are put in groups. The `princ` output of the value will be added
    between digit groups.

  * `integer-group-digits    (3)`
  * `fractional-group-digits (3)`

    The value is a positive integer defining the number of digits in
    groups.

  * `integer-minimum-width    (0)`
  * `fractional-minimum-width (0)`

    Format integer or fractional part using minimum of this amount of
    characters, possibly using some padding characters (see below).
    _positive-sign_, _negative-sign_ or _zero-sign_ (see below) is
    included when calculating the width of the integer part. Similarly
    _decimal-separator_ is included when calculating the width of the
    fractional part.

  * `integer-pad-char    (#\\Space)`
  * `fractional-pad-char (#\\Space)`

    The value is the padding character which is used to fill
    _integer-minimum-width_ or _fractional-minimum-width_.

  * `positive-sign (nil)`
  * `negative-sign (#\\-)`
  * `zero-sign     (nil)`

    If values are non-nil these are used as the leading sign for
    positive, negative and zero numbers. The `princ` output of the value
    is used.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-DECIMAL-FORMATTER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEYWORD-ARGUMENTS" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL))
     :DOCUMENTATION
     "Define a decimal number formatter function to use with the `~/`
directive of `cl:format`. The valid format is this:

    (define-decimal-formatter name
      (:keyword form)
      ...)

_Name_ is the symbol that names the function. _Keyword_ must be a valid
keyword argument for the `format-decimal-number` function (see its
documentation for more information). _Form_ is evaluated and the value
is used with the _keyword_ argument. Macro's side effect is that global
function _name_ is defined. It can be used with the `~/` directive of
`cl:format` function.

Examples:

    (define-decimal-formatter my-formatter
      (:round-magnitude -6)
      (:decimal-separator \",\")
      (:integer-group-separator \" \")
      (:integer-minimum-width 4)
      (:fractional-group-separator \" \")
      (:fractional-minimum-width 10)
      (:show-trailing-zeros t))
    => MY-FORMATTER

    (format nil \"~/my-formatter/\" 10/6)
    => \"   1,666 667  \"

    (format nil \"~/my-formatter/\" 100/8)
    => \"  12,500 000  \"

The `~/` directive function call can optionally take up to three
arguments to override the defaults:

    ~round-magnitude,integer-minimum-width,fractional-minimum-width/FUNCTION/

For example:

    (format nil \"~-2,3,4/my-formatter/\" 10/6)
    => \"  1,67 \"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NUMBER-STRING-TO-INTEGER" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NUMBER-STRING-TO-FRACTIONAL" :PACKAGE-NAME "DECIMALS" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-DECIMAL-NUMBER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DECIMAL-SEPARATOR" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\.)
      ((:NAME "POSITIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\+)
      ((:NAME "NEGATIVE-SIGN" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) #\-)
      ((:NAME "START" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "DECIMALS" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Examine _string_ (or its substring from _start_ to _end_) for a
decimal number. Assume that the decimal number is exact and return it as
a rational number.

Rules for parsing: First all leading and trailing `#\\Space` characters
are stripped. The resulting string may start with a _positive-sign_ or a
_negative-sign_ character. The latter causes this function to assume a
negative number. The following characters in the string must include one
or more digit characters and it may include one _decimal-separator_
character which separates integer and fractional parts. All other
characters are illegal. If these rules are not met a
`decimal-parse-error` condition is signaled.

Examples:

    (parse-decimal-number \"0.2\")  => 1/5
    (parse-decimal-number \".2\")   => 1/5
    (parse-decimal-number \"+3.\")  => 3
    (parse-decimal-number \" -7 \") => -7

    (parse-decimal-number \"−12,345\"
                          :decimal-separator #\\,
                          :negative-sign #\\−)
    => -2469/200"))
   :EXTERNAL-SYMBOLS
   ((:NAME "PARSE-DECIMAL-NUMBER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
    (:NAME "DECIMAL-PARSE-ERROR" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
    (:NAME "DEFINE-DECIMAL-FORMATTER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
    (:NAME "ROUND-HALF-AWAY-FROM-ZERO" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)
    (:NAME "FORMAT-DECIMAL-NUMBER" :PACKAGE-NAME "DECIMALS" :EXTERNALP T)))))
