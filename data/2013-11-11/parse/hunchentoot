
(:TYPE :SYSTEM :NAME "hunchentoot" :AUTHOR NIL :MAINTAINER NIL :VERSION
 "1.2.21" :LICENCE NIL :DESCRIPTION
 "Hunchentoot is a HTTP server based on USOCKET and
  BORDEAUX-THREADS.  It supports HTTP 1.1, serves static files, has a
  simple framework for user-defined handlers and can be extended
  through subclassing."
 :LONG-DESCRIPTION NIL :DEPENDS-ON
 ("CHUNGA" "CL-BASE64" "CL-FAD" "CL-PPCRE" "FLEXI-STREAMS" "CL+SSL" "MD5"
  "RFC2388" "TRIVIAL-BACKTRACE" "USOCKET" "BORDEAUX-THREADS")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "URL-REWRITE" :FULL-NAME "URL-REWRITE" :DOCUMENTATION
   NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*URL-REWRITE-TAGS*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
     :DOCUMENTATION
     "The tag/attribute combinations where URL-rewriting should happen."
     :INITIAL-VALUE
     "'((\"a\" . \"href\") (\"area\" . \"href\") (\"frame\" . \"src\") (\"img\" . \"src\")
  (\"input\" . \"src\") (\"form\" . \"action\") (\"iframe\" . \"src\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*URL-REWRITE-FILL-TAGS*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
     :DOCUMENTATION "The tag/attribute combinations where URL-rewriting should
optionally add an attribute."
     :INITIAL-VALUE "'((\"form\" . \"action\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*FIND-STRING-HASH*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :DOCUMENTATION
     "Hash tables used internally by READ-UNTIL to cache offset arrays."
     :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQUAL)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HYPERDOC-BASE-URI*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"http://weitz.de/url-rewrite/\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HYPERDOC-LOOKUP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PEEK-CHAR*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "PEEK-CHAR with input stream bound to *STANDARD-INPUT* and returning
NIL on EOF.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WHITESPACEP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "C" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL))
     :DOCUMENTATION "Checks whether C is a whitespace character.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LETTERP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "C" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)) :DOCUMENTATION
     "Checks whether C is a character between A and Z
(case-insensitive).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NAME-CHAR-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "C" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Checks whether C is a name constituent character in the sense of
HTML.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMMENT-START-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Checks whether *STANDARD-OUTPUT* currently 'looks at' the string
\"--\".  Will move the position within the stream by one unless the
first characters it sees is not a hyphen.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-WHILE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Reads characters from *STANDARD-INPUT* while PREDICATE returns a
true value for each character.  Returns the string which was read
unless SKIP is true.  Writes all characters read to *STANDARD-OUTPUT*
if WRITE-THROUGH is true.  On EOF the string read so far is returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-UNTIL" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Reads characters from *STANDARD-INPUT* up to and including STRING.
Returns the string which was read (excluding STRING) unless SKIP is
true.  Writes all characters read to *STANDARD-OUTPUT* if
WRITE-THROUGH is true.  On EOF the string read so far is returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SKIP-WHITESPACE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Read characters from *STANDARD-INPUT* as long as they are
whitespace. Returns the string which was read unless SKIP is true. On
EOF the string read so far is returned. Writes all characters read to
*STANDARD-OUTPUT* if WRITE-THROUGH is true.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-DELIMITED-STRING" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Reads and returns as its first value a string from
*STANDARD-INPUT*. The string is either delimited by ' or \" in which
case the delimiters aren't part of the string but the second return
value is the delimiter character or it is assumed to extend to the
next character which is not a name constituent (see NAME-CHAR-P). On
EOF the string read so far is returned. If SKIP is true NIL is
returned. Writes all characters read to *STANDARD-OUTPUT* if
WRITE-THROUGH is true.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-NAME" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Read characters from *STANDARD-INPUT* as long as they are name
constituents. Returns the string which was read unless SKIP is
true. On EOF the string read so far is returned. Writes all characters
read to *STANDARD-OUTPUT* if WRITE-THROUGH is true.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-ATTRIBUTE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SKIP" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "WRITE-THROUGH" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Read characters from *STANDARD-INPUT* assuming that they constitue
a SGML-style attribute/value pair. Returns three values - the name of
the attribute, its value, and the whole string which was read. On EOF
the string(s) read so far is/are returned. If SKIP is true NIL is
returned. Writes all characters read to *STANDARD-OUTPUT* if
WRITE-THROUGH is true.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SKIP-COMMENT" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Skip SGML comment from *STANDARD-INPUT*, i.e. a string enclosed in
'--' on both sides. Returns no values. Writes all characters read to
*STANDARD-OUTPUT*. This function assumes (without checking) that the
current position of *STANDARD-INPUT* is at the beginning of a comment,
after the first hyphen - see COMMENT-START-P.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-WITH-SCHEME-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Checks whether the string STRING represents a URL which starts with
a scheme, i.e. something like 'https://' or 'mailto:'.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "URL-ENCODE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "URL-encode a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-GET-PARAM-TO-URL" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "URL" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL))
     :DOCUMENTATION
     "URL is assumed to be a http URL. The pair of NAME and VALUE will be
added as a GET parameter to this URL. Assumes that there's no other
parameter of the same name. Only checks if #? is part of the string
to decide how to attach the new parameter to the end of the string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REWRITE-URLS" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "REWRITE-FN" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST-FN" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP NIL)
       ((:NAME "COMPLEMENT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "STARTS-WITH-SCHEME-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP
          T)))))
     :DOCUMENTATION
     "Reads an (X)HTML document from *STANDARD-INPUT* and writes it back
to *STANDARD-OUTPUT*. Any attribute value which is in one of the
positions denoted by *URL-REWRITE-TAGS* is rewritten by REWRITE-FN if
it passes the test denoted by the optional function TEST-FN which
defaults to the complement of STARTS-WITH-SCHEME-P.

This function aims to yield correct results for correct (X)HTML input
and it also tries hard to never signal an error although it may warn
if it encounters syntax errors. It will NOT detect any possible error
nor is there any warranty that it will work correctly with faulty
input."))
   :EXTERNAL-SYMBOLS
   ((:NAME "STARTS-WITH-SCHEME-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
    (:NAME "*URL-REWRITE-FILL-TAGS*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
    (:NAME "*URL-REWRITE-TAGS*" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
    (:NAME "URL-ENCODE" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
    (:NAME "ADD-GET-PARAM-TO-URL" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)
    (:NAME "REWRITE-URLS" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME "HUNCHENTOOT" :FULL-NAME "HUNCHENTOOT" :DOCUMENTATION
   NIL :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "WHEN-LET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "VAR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "FORM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Evaluates FORM and binds VAR to the result, then executes BODY
if VAR has a true value.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BINDINGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Syntax: WITH-UNIQUE-NAMES ( { var | (var x) }* ) declaration* form*

Executes a series of forms with each VAR bound to a fresh,
uninterned symbol. The uninterned symbol is as if returned by a call
to GENSYM with the string denoted by X - or, if X is not supplied, the
string denoted by VAR - as argument.

The variable bindings created are lexical unless special declarations
are specified. The scopes of the name bindings and declarations do not
include the Xs.

The forms are evaluated in order, and the values of all but the last
are discarded (that is, the body is an implicit PROGN).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-REBINDING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDINGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Syntax: WITH-REBINDING ( { var | (var prefix) }* ) form*

Evaluates a series of forms in the lexical environment that is
formed by adding the binding of each VAR to a fresh, uninterned
symbol, and the binding of that fresh, uninterned symbol to VAR's
original value, i.e., its value in the current lexical environment.

The uninterned symbol is created as if by a call to GENSYM with the
string denoted by PREFIX - or, if PREFIX is not supplied, the string
denoted by VAR - as argument.

The forms are evaluated in order, and the values of all but the last
are discarded (that is, the body is an implicit PROGN).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-PEER-ADDRESS-AND-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the peer address and port of the socket SOCKET as two
values.  The address is returned as a string in dotted IP address
notation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-LOCAL-ADDRESS-AND-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the local address and port of the socket SOCKET as two
values.  The address is returned as a string in dotted IP address
notation.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-SOCKET-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Returns a stream for the socket SOCKET.  The ACCEPTOR argument is
ignored.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Simple wrapper to allow LispWorks and Bordeaux Threads to coexist.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOCK-HELD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Simple wrapper to allow LispWorks and Bordeaux Threads to coexist.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-CONDITION-VARIABLE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONDITION-VARIABLE-SIGNAL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CONDITION-VARIABLE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONDITION-VARIABLE-WAIT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "CONDITION-VARIABLE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFCONSTANT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "DOC" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make sure VALUE is evaluated only once (to appease SBCL).")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFVAR-UNBOUND" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DOC-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) ""))
     :DOCUMENTATION
     "Convenience macro to declare unbound special variables with a
documentation string.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTTP-REASON-PHRASE-MAP*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION "Used to map numerical return codes to reason phrases."
     :INITIAL-VALUE "(MAKE-HASH-TABLE)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEF-HTTP-RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "REASON-PHRASE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Shortcut to define constants for return codes.  NAME is a
Lisp symbol, VALUE is the numerical value of the return code, and
REASON-PHRASE is the phrase (a string) to be shown in the
server's status line.")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CRLF+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :DOCUMENTATION
     "A 2-element array consisting of the character codes for a CRLF
sequence."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+CRLF+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+CRLF+)
    (MAKE-ARRAY 2 :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INITIAL-CONTENTS
                (MAPCAR 'CHAR-CODE '(#\\Return #\\Newline))))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-CONTINUE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (100) for 'Continue'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-CONTINUE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-CONTINUE+)
    100)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-SWITCHING-PROTOCOLS+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (101) for 'Switching Protocols'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-SWITCHING-PROTOCOLS+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-SWITCHING-PROTOCOLS+)
    101)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-OK+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (200) for 'OK'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-OK+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-OK+)
    200)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-CREATED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (201) for 'Created'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-CREATED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-CREATED+)
    201)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-ACCEPTED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (202) for 'Accepted'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-ACCEPTED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-ACCEPTED+)
    202)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NON-AUTHORITATIVE-INFORMATION+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION
     "HTTP return code (203) for 'Non-Authoritative Information'."
     :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NON-AUTHORITATIVE-INFORMATION+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NON-AUTHORITATIVE-INFORMATION+)
    203)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NO-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (204) for 'No Content'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NO-CONTENT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NO-CONTENT+)
    204)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-RESET-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (205) for 'Reset Content'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-RESET-CONTENT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-RESET-CONTENT+)
    205)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-PARTIAL-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (206) for 'Partial Content'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-PARTIAL-CONTENT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-PARTIAL-CONTENT+)
    206)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-MULTI-STATUS+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (207) for 'Multi-Status'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-MULTI-STATUS+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-MULTI-STATUS+)
    207)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-MULTIPLE-CHOICES+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (300) for 'Multiple Choices'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-MULTIPLE-CHOICES+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-MULTIPLE-CHOICES+)
    300)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-MOVED-PERMANENTLY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (301) for 'Moved Permanently'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-MOVED-PERMANENTLY+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-MOVED-PERMANENTLY+)
    301)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-MOVED-TEMPORARILY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (302) for 'Moved Temporarily'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-MOVED-TEMPORARILY+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-MOVED-TEMPORARILY+)
    302)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-SEE-OTHER+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (303) for 'See Other'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-SEE-OTHER+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-SEE-OTHER+)
    303)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NOT-MODIFIED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (304) for 'Not Modified'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NOT-MODIFIED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NOT-MODIFIED+)
    304)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-USE-PROXY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (305) for 'Use Proxy'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-USE-PROXY+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-USE-PROXY+)
    305)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-TEMPORARY-REDIRECT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (307) for 'Temporary Redirect'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-TEMPORARY-REDIRECT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-TEMPORARY-REDIRECT+)
    307)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-BAD-REQUEST+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (400) for 'Bad Request'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-BAD-REQUEST+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-BAD-REQUEST+)
    400)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-AUTHORIZATION-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (401) for 'Authorization Required'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-AUTHORIZATION-REQUIRED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-AUTHORIZATION-REQUIRED+)
    401)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-PAYMENT-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (402) for 'Payment Required'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-PAYMENT-REQUIRED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-PAYMENT-REQUIRED+)
    402)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-FORBIDDEN+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (403) for 'Forbidden'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-FORBIDDEN+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-FORBIDDEN+)
    403)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NOT-FOUND+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (404) for 'Not Found'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NOT-FOUND+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NOT-FOUND+)
    404)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-METHOD-NOT-ALLOWED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (405) for 'Method Not Allowed'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-METHOD-NOT-ALLOWED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-METHOD-NOT-ALLOWED+)
    405)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NOT-ACCEPTABLE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (406) for 'Not Acceptable'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NOT-ACCEPTABLE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NOT-ACCEPTABLE+)
    406)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-PROXY-AUTHENTICATION-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION
     "HTTP return code (407) for 'Proxy Authentication Required'."
     :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-PROXY-AUTHENTICATION-REQUIRED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-PROXY-AUTHENTICATION-REQUIRED+)
    407)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-REQUEST-TIME-OUT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (408) for 'Request Time-out'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-REQUEST-TIME-OUT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-REQUEST-TIME-OUT+)
    408)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-CONFLICT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (409) for 'Conflict'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-CONFLICT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-CONFLICT+)
    409)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-GONE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (410) for 'Gone'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-GONE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-GONE+)
    410)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-LENGTH-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (411) for 'Length Required'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-LENGTH-REQUIRED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-LENGTH-REQUIRED+)
    411)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-PRECONDITION-FAILED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (412) for 'Precondition Failed'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-PRECONDITION-FAILED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-PRECONDITION-FAILED+)
    412)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-REQUEST-ENTITY-TOO-LARGE+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (413) for 'Request Entity Too Large'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-REQUEST-ENTITY-TOO-LARGE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-REQUEST-ENTITY-TOO-LARGE+)
    413)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-REQUEST-URI-TOO-LARGE+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (414) for 'Request-URI Too Large'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-REQUEST-URI-TOO-LARGE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-REQUEST-URI-TOO-LARGE+)
    414)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-UNSUPPORTED-MEDIA-TYPE+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (415) for 'Unsupported Media Type'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-UNSUPPORTED-MEDIA-TYPE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-UNSUPPORTED-MEDIA-TYPE+)
    415)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-REQUESTED-RANGE-NOT-SATISFIABLE+" :PACKAGE-NAME
      "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "HTTP return code (416) for 'Requested range not satisfiable'."
     :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-REQUESTED-RANGE-NOT-SATISFIABLE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-REQUESTED-RANGE-NOT-SATISFIABLE+)
    416)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-EXPECTATION-FAILED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (417) for 'Expectation Failed'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-EXPECTATION-FAILED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-EXPECTATION-FAILED+)
    417)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-FAILED-DEPENDENCY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (424) for 'Failed Dependency'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-FAILED-DEPENDENCY+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-FAILED-DEPENDENCY+)
    424)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-INTERNAL-SERVER-ERROR+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (500) for 'Internal Server Error'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-INTERNAL-SERVER-ERROR+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-INTERNAL-SERVER-ERROR+)
    500)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-NOT-IMPLEMENTED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (501) for 'Not Implemented'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-NOT-IMPLEMENTED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-NOT-IMPLEMENTED+)
    501)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-BAD-GATEWAY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (502) for 'Bad Gateway'." :INITIAL-VALUE
     "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-BAD-GATEWAY+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-BAD-GATEWAY+)
    502)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-SERVICE-UNAVAILABLE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION "HTTP return code (503) for 'Service Unavailable'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-SERVICE-UNAVAILABLE+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-SERVICE-UNAVAILABLE+)
    503)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-GATEWAY-TIME-OUT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (504) for 'Gateway Time-out'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-GATEWAY-TIME-OUT+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-GATEWAY-TIME-OUT+)
    504)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+HTTP-VERSION-NOT-SUPPORTED+" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "HTTP return code (505) for 'Version not supported'."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT:+HTTP-VERSION-NOT-SUPPORTED+)
    (SYMBOL-VALUE 'HUNCHENTOOT:+HTTP-VERSION-NOT-SUPPORTED+)
    505)")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+DAY-NAMES+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "The three-character names of the seven days of the week - needed
for cookie date format."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+DAY-NAMES+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+DAY-NAMES+)
    #(\"Mon\" \"Tue\" \"Wed\" \"Thu\" \"Fri\" \"Sat\" \"Sun\"))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+MONTH-NAMES+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "The three-character names of the twelve months - needed for cookie
date format."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+MONTH-NAMES+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+MONTH-NAMES+)
    #(\"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*REWRITE-FOR-SESSION-URLS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION
     "Whether HTML pages should possibly be rewritten for cookie-less
session-management."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CONTENT-TYPES-FOR-URL-REWRITE*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "The content types for which url-rewriting is OK. See
*REWRITE-FOR-SESSION-URLS*."
     :INITIAL-VALUE "'(\"text/html\" \"application/xhtml+xml\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*THE-RANDOM-STATE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "A fresh random state." :INITIAL-VALUE
     "(MAKE-RANDOM-STATE T)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION-SECRET*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "A random ASCII string that's used to encode the public session
data.  This variable is initially unbound and will be set (using
RESET-SESSION-SECRET) the first time a session is created, if
necessary.  You can prevent this from happening if you set the value
yourself before starting acceptors.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HUNCHENTOOT-STREAM*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "The stream representing the socket Hunchentoot is listening on.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLOSE-HUNCHENTOOT-STREAM*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION "Will be set to T if the Hunchentoot socket stream has to be
closed at the end of the request."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HEADERS-SENT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "Used internally to check whether the reply headers have
already been sent for this request."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*FILE-UPLOAD-HOOK*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "If this is not NIL, it should be a unary function which will
be called with a pathname for each file which is uploaded to
Hunchentoot.  The pathname denotes the temporary file to which
the uploaded file is written.  The hook is called directly before
the file is created."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION-DB*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "The default (global) session database." :INITIAL-VALUE
     "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION-MAX-TIME*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "The default time (in seconds) after which a session times out."
     :INITIAL-VALUE "1800")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION-GC-FREQUENCY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "A session GC (see function SESSION-GC) will happen every
*SESSION-GC-FREQUENCY* requests (counting only requests which create
a new session) if this variable is not NIL.  See SESSION-CREATED."
     :INITIAL-VALUE "50")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*USE-USER-AGENT-FOR-SESSIONS*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION
     "Whether the 'User-Agent' header should be encoded into the session
string.  If this value is true, a session will cease to be accessible
if the client sends a different 'User-Agent' header."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*USE-REMOTE-ADDR-FOR-SESSIONS*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION
     "Whether the client's remote IP (as returned by REAL-REMOTE-ADDR)
should be encoded into the session string.  If this value is true, a
session will cease to be accessible if the client's remote IP changes.

This might for example be an issue if the client uses a proxy server
which doesn't send correct 'X_FORWARDED_FOR' headers."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-CONTENT-TYPE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "The default content-type header which is returned to the client.
If this is text content type, the character set used for encoding the
response will automatically be added to the content type in a
``charset'' attribute."
     :INITIAL-VALUE "\"text/html\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*METHODS-FOR-POST-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "A list of the request method types (as keywords) for which
Hunchentoot will try to compute POST-PARAMETERS."
     :INITIAL-VALUE "'(:POST)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HEADER-STREAM*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "If this variable is not NIL, it should be bound to a stream to
which incoming and outgoing headers will be written for debugging
purposes."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SHOW-LISP-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Whether Lisp errors in request handlers should be shown in HTML output."
     :INITIAL-VALUE "NIL")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SHOW-LISP-BACKTRACES-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION
     "Whether Lisp errors shown in HTML output should contain backtrace information."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-LISP-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "Whether Lisp errors in request handlers should be logged."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-LISP-BACKTRACES-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Whether Lisp backtraces should be logged.  Only has an effect if
*LOG-LISP-ERRORS-P* is true as well."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOG-LISP-WARNINGS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Whether Lisp warnings in request handlers should be logged."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LISP-ERRORS-LOG-LEVEL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Log level for Lisp errors.  Should be one of :ERROR (the default),
:WARNING, or :INFO."
     :INITIAL-VALUE ":ERROR")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LISP-WARNINGS-LOG-LEVEL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :DOCUMENTATION
     "Log level for Lisp warnings.  Should be one of :ERROR, :WARNING
(the default), or :INFO."
     :INITIAL-VALUE ":WARNING")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MESSAGE-LOG-LOCK*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A global lock to prevent concurrent access to the log file used by
the ACCEPTOR-LOG-MESSAGE function."
     :INITIAL-VALUE "(HUNCHENTOOT::MAKE-LOCK \"global-message-log-lock\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ACCESS-LOG-LOCK*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A global lock to prevent concurrent access to the log file used by
the ACCEPTOR-LOG-ACCESS function."
     :INITIAL-VALUE "(HUNCHENTOOT::MAKE-LOCK \"global-access-log-lock\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CATCH-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Whether Hunchentoot should catch and log errors (or rather invoke
the debugger)."
     :INITIAL-VALUE "T")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "The current ACCEPTOR object while in the context of a request.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "The current REQUEST object while in the context of a request.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :DOCUMENTATION
     "The current REPLY object while in the context of a request.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*SESSION*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "The current session while in the context of a request, or NIL.")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+IMPLEMENTATION-LINK+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A link to the website of the underlying Lisp implementation."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+IMPLEMENTATION-LINK+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+IMPLEMENTATION-LINK+)
    \"http://www.sbcl.org/\")")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TMP-DIRECTORY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION
     "Directory for temporary files created by MAKE-TMP-FILE-NAME."
     :INITIAL-VALUE "\"/tmp/hunchentoot/\"")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TMP-FILES*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A list of temporary files created while a request was handled."
     :INITIAL-VALUE "NIL")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+LATIN-1+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A FLEXI-STREAMS external format used for `faithful' input and
output of binary data."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+LATIN-1+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+LATIN-1+)
    (FLEXI-STREAMS:MAKE-EXTERNAL-FORMAT :LATIN1 :EOL-STYLE :LF))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+UTF-8+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "A FLEXI-STREAMS external format used internally for logging and to
encode cookie values."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+UTF-8+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+UTF-8+)
    (FLEXI-STREAMS:MAKE-EXTERNAL-FORMAT :UTF8 :EOL-STYLE :LF))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION "The external format used to compute the REQUEST object."
     :INITIAL-VALUE "HUNCHENTOOT::+UTF-8+")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+BUFFER-LENGTH+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "Length of buffers used for internal purposes."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+BUFFER-LENGTH+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+BUFFER-LENGTH+)
    8192)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-CONNECTION-TIMEOUT*" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :DOCUMENTATION
     "The default connection timeout used when an acceptor is reading
from and writing to a socket stream."
     :INITIAL-VALUE "20")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*GLOBAL-SESSION-DB-LOCK*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "A global lock to prevent two threads from modifying *session-db* at
the same time (or NIL for Lisps which don't have threads)."
     :INITIAL-VALUE "(LOAD-TIME-VALUE
 (AND HUNCHENTOOT::*SUPPORTS-THREADS-P*
      (HUNCHENTOOT::MAKE-LOCK \"global-session-db-lock\")))")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NEW-CONNECTION-WAIT-TIME+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION
     "Time in seconds to wait for a new connection to arrive before
performing a cleanup run."
     :INITIAL-VALUE "(IF (BOUNDP 'HUNCHENTOOT::+NEW-CONNECTION-WAIT-TIME+)
    (SYMBOL-VALUE 'HUNCHENTOOT::+NEW-CONNECTION-WAIT-TIME+)
    2)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*HYPERDOC-BASE-URI*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "\"http://weitz.de/hunchentoot/\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HYPERDOC-LOOKUP" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HUNCHENTOOT-ERROR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FORMAT-CONTROL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Signals an error of type HUNCHENTOOT-SIMPLE-ERROR with the provided
format control and arguments.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HUNCHENTOOT-WARN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORMAT-CONTROL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Signals a warning of type HUNCHENTOOT-SIMPLE-WARNING with the
provided format control and arguments.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARAMETER-ERROR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "FORMAT-CONTROL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Signals an error of type PARAMETER-ERROR with the provided
format control and arguments.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NOT-IMPLEMENTED" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Used to signal an error if an operation named NAME is not implemented.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "MAYBE-INVOKE-DEBUGGER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "This generic function is called whenever a
condition CONDITION is signaled in Hunchentoot.  You might want to
specialize it on specific condition classes for debugging purposes.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAYBE-INVOKE-DEBUGGER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "The default method invokes the debugger with CONDITION if
*CATCH-ERRORS-P* is NIL.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAYBE-INVOKE-DEBUGGER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "The default method invokes the debugger with CONDITION if
*CATCH-ERRORS-P* is NIL.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-DEBUGGER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Executes BODY and invokes the debugger if an error is signaled and
*CATCH-ERRORS-P* is NIL.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "IGNORE-ERRORS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Like IGNORE-ERRORS, but observes *CATCH-ERRORS-P*.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "HANDLER-CASE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "EXPRESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CLAUSES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Like HANDLER-CASE, but observes *CATCH-ERRORS-P*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-BACKTRACE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Returns a string with a backtrace of what the Lisp system thinks is
the \"current\" error.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIME-TYPE-LIST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION
     "An alist where the cars are MIME types and the cdrs are list
of file suffixes for the corresponding type."
     :INITIAL-VALUE
     "'((\"application/andrew-inset\" \"ez\") (\"application/cu-seeme\" \"cu\")
  (\"application/dsptype\" \"tsp\") (\"application/futuresplash\" \"spl\")
  (\"application/hta\" \"hta\") (\"application/java-archive\" \"jar\")
  (\"application/java-serialized-object\" \"ser\") (\"application/java-vm\" \"class\")
  (\"application/mac-binhex40\" \"hqx\") (\"application/mac-compactpro\" \"cpt\")
  (\"application/mathematica\" \"nb\") (\"application/msaccess\" \"mdb\")
  (\"application/msword\" \"doc\" \"dot\") (\"application/octet-stream\" \"bin\")
  (\"application/oda\" \"oda\") (\"application/ogg\" \"ogg\") (\"application/pdf\" \"pdf\")
  (\"application/pgp-keys\" \"key\") (\"application/pgp-signature\" \"pgp\")
  (\"application/pics-rules\" \"prf\") (\"application/postscript\" \"ps\" \"ai\" \"eps\")
  (\"application/rar\" \"rar\") (\"application/rdf+xml\" \"rdf\")
  (\"application/rss+xml\" \"rss\") (\"application/smil\" \"smi\" \"smil\")
  (\"application/wordperfect\" \"wpd\") (\"application/wordperfect5.1\" \"wp5\")
  (\"application/xhtml+xml\" \"xhtml\" \"xht\") (\"application/xml\" \"fo\" \"xml\" \"xsl\")
  (\"application/zip\" \"zip\") (\"application/vnd.cinderella\" \"cdy\")
  (\"application/vnd.mozilla.xul+xml\" \"xul\")
  (\"application/vnd.ms-excel\" \"xls\" \"xlb\" \"xlt\")
  (\"application/vnd.ms-pki.seccat\" \"cat\") (\"application/vnd.ms-pki.stl\" \"stl\")
  (\"application/vnd.ms-powerpoint\" \"ppt\" \"pps\")
  (\"application/vnd.oasis.opendocument.chart\" \"odc\")
  (\"application/vnd.oasis.opendocument.database\" \"odb\")
  (\"application/vnd.oasis.opendocument.formula\" \"odf\")
  (\"application/vnd.oasis.opendocument.graphics\" \"odg\")
  (\"application/vnd.oasis.opendocument.graphics-template\" \"otg\")
  (\"application/vnd.oasis.opendocument.image\" \"odi\")
  (\"application/vnd.oasis.opendocument.presentation\" \"odp\")
  (\"application/vnd.oasis.opendocument.presentation-template\" \"otp\")
  (\"application/vnd.oasis.opendocument.spreadsheet\" \"ods\")
  (\"application/vnd.oasis.opendocument.spreadsheet-template\" \"ots\")
  (\"application/vnd.oasis.opendocument.text\" \"odt\")
  (\"application/vnd.oasis.opendocument.text-master\" \"odm\")
  (\"application/vnd.oasis.opendocument.text-template\" \"ott\")
  (\"application/vnd.oasis.opendocument.text-web\" \"oth\")
  (\"application/vnd.rim.cod\" \"cod\") (\"application/vnd.smaf\" \"mmf\")
  (\"application/vnd.stardivision.calc\" \"sdc\")
  (\"application/vnd.stardivision.draw\" \"sda\")
  (\"application/vnd.stardivision.impress\" \"sdd\" \"sdp\")
  (\"application/vnd.stardivision.math\" \"smf\")
  (\"application/vnd.stardivision.writer\" \"sdw\" \"vor\")
  (\"application/vnd.stardivision.writer-global\" \"sgl\")
  (\"application/vnd.sun.xml.calc\" \"sxc\")
  (\"application/vnd.sun.xml.calc.template\" \"stc\")
  (\"application/vnd.sun.xml.draw\" \"sxd\")
  (\"application/vnd.sun.xml.draw.template\" \"std\")
  (\"application/vnd.sun.xml.impress\" \"sxi\")
  (\"application/vnd.sun.xml.impress.template\" \"sti\")
  (\"application/vnd.sun.xml.math\" \"sxm\")
  (\"application/vnd.sun.xml.writer\" \"sxw\")
  (\"application/vnd.sun.xml.writer.global\" \"sxg\")
  (\"application/vnd.sun.xml.writer.template\" \"stw\")
  (\"application/vnd.symbian.install\" \"sis\") (\"application/vnd.visio\" \"vsd\")
  (\"application/vnd.wap.wbxml\" \"wbxml\") (\"application/vnd.wap.wmlc\" \"wmlc\")
  (\"application/vnd.wap.wmlscriptc\" \"wmlsc\") (\"application/x-123\" \"wk\")
  (\"application/x-abiword\" \"abw\") (\"application/x-apple-diskimage\" \"dmg\")
  (\"application/x-bcpio\" \"bcpio\") (\"application/x-bittorrent\" \"torrent\")
  (\"application/x-cdf\" \"cdf\") (\"application/x-cdlink\" \"vcd\")
  (\"application/x-chess-pgn\" \"pgn\") (\"application/x-cpio\" \"cpio\")
  (\"application/x-csh\" \"csh\") (\"application/x-debian-package\" \"deb\" \"udeb\")
  (\"application/x-director\" \"dcr\" \"dir\" \"dxr\") (\"application/x-dms\" \"dms\")
  (\"application/x-doom\" \"wad\") (\"application/x-dvi\" \"dvi\")
  (\"application/x-flac\" \"flac\") (\"application/x-font\" \"pfa\" \"pfb\" \"gsf\" \"pcf\")
  (\"application/x-freemind\" \"mm\") (\"application/x-futuresplash\" \"spl\")
  (\"application/x-gnumeric\" \"gnumeric\") (\"application/x-go-sgf\" \"sgf\")
  (\"application/x-graphing-calculator\" \"gcf\")
  (\"application/x-gtar\" \"gtar\" \"tgz\" \"taz\") (\"application/x-hdf\" \"hdf\")
  (\"application/x-httpd-php\" \"phtml\" \"pht\" \"php\")
  (\"application/x-httpd-php-source\" \"phps\") (\"application/x-httpd-php3\" \"php3\")
  (\"application/x-httpd-php3-preprocessed\" \"php3p\")
  (\"application/x-httpd-php4\" \"php4\") (\"application/x-ica\" \"ica\")
  (\"application/x-internet-signup\" \"ins\" \"isp\") (\"application/x-iphone\" \"iii\")
  (\"application/x-iso9660-image\" \"iso\") (\"application/x-java-jnlp-file\" \"jnlp\")
  (\"application/x-javascript\" \"js\") (\"application/x-jmol\" \"jmz\")
  (\"application/x-kchart\" \"chrt\") (\"application/x-killustrator\" \"kil\")
  (\"application/x-koan\" \"skp\" \"skd\" \"skt\" \"skm\")
  (\"application/x-kpresenter\" \"kpr\" \"kpt\") (\"application/x-kspread\" \"ksp\")
  (\"application/x-kword\" \"kwd\" \"kwt\") (\"application/x-latex\" \"latex\")
  (\"application/x-lha\" \"lha\") (\"application/x-lzh\" \"lzh\")
  (\"application/x-lzx\" \"lzx\")
  (\"application/x-maker\" \"frm\" \"maker\" \"frame\" \"fm\" \"fb\" \"book\" \"fbdoc\")
  (\"application/x-mif\" \"mif\") (\"application/x-ms-wmd\" \"wmd\")
  (\"application/x-ms-wmz\" \"wmz\")
  (\"application/x-msdos-program\" \"com\" \"exe\" \"bat\" \"dll\")
  (\"application/x-msi\" \"msi\") (\"application/x-netcdf\" \"nc\")
  (\"application/x-ns-proxy-autoconfig\" \"pac\") (\"application/x-nwc\" \"nwc\")
  (\"application/x-object\" \"o\") (\"application/x-oz-application\" \"oza\")
  (\"application/x-pkcs7-certreqresp\" \"p7r\") (\"application/x-pkcs7-crl\" \"crl\")
  (\"application/x-python-code\" \"pyc\" \"pyo\")
  (\"application/x-quicktimeplayer\" \"qtl\")
  (\"application/x-redhat-package-manager\" \"rpm\") (\"application/x-sh\" \"sh\")
  (\"application/x-shar\" \"shar\") (\"application/x-shockwave-flash\" \"swf\" \"swfl\")
  (\"application/x-stuffit\" \"sit\") (\"application/x-sv4cpio\" \"sv4cpio\")
  (\"application/x-sv4crc\" \"sv4crc\") (\"application/x-tar\" \"tar\")
  (\"application/x-tcl\" \"tcl\") (\"application/x-tex-gf\" \"gf\")
  (\"application/x-tex-pk\" \"pk\") (\"application/x-texinfo\" \"texinfo\" \"texi\")
  (\"application/x-trash\" \"~%\" \"\" \"bak\" \"old\" \"sik\")
  (\"application/x-troff\" \"tt\" \"r\" \"roff\") (\"application/x-troff-man\" \"man\")
  (\"application/x-troff-me\" \"me\") (\"application/x-troff-ms\" \"ms\")
  (\"application/x-ustar\" \"ustar\") (\"application/x-wais-source\" \"src\")
  (\"application/x-wingz\" \"wz\") (\"application/x-x509-ca-cert\" \"crt\")
  (\"application/x-xcf\" \"xcf\") (\"application/x-xfig\" \"fig\")
  (\"application/x-xpinstall\" \"xpi\") (\"audio/basic\" \"au\" \"snd\")
  (\"audio/midi\" \"mid\" \"midi\" \"kar\")
  (\"audio/mpeg\" \"mpga\" \"mpega\" \"mp2\" \"mp3\" \"m4a\") (\"audio/mpegurl\" \"m3u\")
  (\"audio/prs.sid\" \"sid\") (\"audio/x-aiff\" \"aif\" \"aiff\" \"aifc\")
  (\"audio/x-gsm\" \"gsm\") (\"audio/x-mpegurl\" \"m3u\") (\"audio/x-ms-wma\" \"wma\")
  (\"audio/x-ms-wax\" \"wax\") (\"audio/x-pn-realaudio\" \"ra\" \"rm\" \"ram\")
  (\"audio/x-realaudio\" \"ra\") (\"audio/x-scpls\" \"pls\") (\"audio/x-sd2\" \"sd2\")
  (\"audio/x-wav\" \"wav\") (\"chemical/x-alchemy\" \"alc\")
  (\"chemical/x-cache\" \"cac\" \"cache\") (\"chemical/x-cache-csf\" \"csf\")
  (\"chemical/x-cactvs-binary\" \"cbin\" \"cascii\" \"ctab\") (\"chemical/x-cdx\" \"cdx\")
  (\"chemical/x-cerius\" \"cer\") (\"chemical/x-chem3d\" \"c3d\")
  (\"chemical/x-chemdraw\" \"chm\") (\"chemical/x-cif\" \"cif\")
  (\"chemical/x-cmdf\" \"cmdf\") (\"chemical/x-cml\" \"cml\")
  (\"chemical/x-compass\" \"cpa\") (\"chemical/x-crossfire\" \"bsd\")
  (\"chemical/x-csml\" \"csml\" \"csm\") (\"chemical/x-ctx\" \"ctx\")
  (\"chemical/x-cxf\" \"cxf\" \"cef\") (\"chemical/x-embl-dl-nucleotide\" \"emb\" \"embl\")
  (\"chemical/x-galactic-spc\" \"spc\")
  (\"chemical/x-gamess-input\" \"inp\" \"gam\" \"gamin\")
  (\"chemical/x-gaussian-checkpoint\" \"fch\" \"fchk\")
  (\"chemical/x-gaussian-cube\" \"cub\")
  (\"chemical/x-gaussian-input\" \"gau\" \"gjc\" \"gjf\")
  (\"chemical/x-gaussian-log\" \"gal\") (\"chemical/x-gcg8-sequence\" \"gcg\")
  (\"chemical/x-genbank\" \"gen\") (\"chemical/x-hin\" \"hin\")
  (\"chemical/x-isostar\" \"istr\" \"ist\") (\"chemical/x-jcamp-dx\" \"jdx\" \"dx\")
  (\"chemical/x-kinemage\" \"kin\") (\"chemical/x-macmolecule\" \"mcm\")
  (\"chemical/x-macromodel-input\" \"mmd\" \"mmod\") (\"chemical/x-mdl-molfile\" \"mol\")
  (\"chemical/x-mdl-rdfile\" \"rd\") (\"chemical/x-mdl-rxnfile\" \"rxn\")
  (\"chemical/x-mdl-sdfile\" \"sd\" \"sdf\") (\"chemical/x-mdl-tgf\" \"tgf\")
  (\"chemical/x-mmcif\" \"mcif\") (\"chemical/x-mol2\" \"mol2\")
  (\"chemical/x-molconn-Z\" \"b\") (\"chemical/x-mopac-graph\" \"gpt\")
  (\"chemical/x-mopac-input\" \"mop\" \"mopcrt\" \"mpc\" \"dat\" \"zmt\")
  (\"chemical/x-mopac-out\" \"moo\") (\"chemical/x-mopac-vib\" \"mvb\")
  (\"chemical/x-ncbi-asn1\" \"asn\") (\"chemical/x-ncbi-asn1-ascii\" \"prt\" \"ent\")
  (\"chemical/x-ncbi-asn1-binary\" \"val\" \"aso\")
  (\"chemical/x-ncbi-asn1-spec\" \"asn\") (\"chemical/x-pdb\" \"pdb\" \"ent\")
  (\"chemical/x-rosdal\" \"ros\") (\"chemical/x-swissprot\" \"sw\")
  (\"chemical/x-vamas-iso14976\" \"vms\") (\"chemical/x-vmd\" \"vmd\")
  (\"chemical/x-xtel\" \"xtel\") (\"chemical/x-xyz\" \"xyz\") (\"image/gif\" \"gif\")
  (\"image/ief\" \"ief\") (\"image/jpeg\" \"jpeg\" \"jpg\" \"jpe\") (\"image/pcx\" \"pcx\")
  (\"image/png\" \"png\") (\"image/svg+xml\" \"svg\" \"svgz\")
  (\"image/tiff\" \"tiff\" \"tif\") (\"image/vnd.djvu\" \"djvu\" \"djv\")
  (\"image/vnd.wap.wbmp\" \"wbmp\") (\"image/x-cmu-raster\" \"ras\")
  (\"image/x-coreldraw\" \"cdr\") (\"image/x-coreldrawpattern\" \"pat\")
  (\"image/x-coreldrawtemplate\" \"cdt\") (\"image/x-corelphotopaint\" \"cpt\")
  (\"image/x-icon\" \"ico\") (\"image/x-jg\" \"art\") (\"image/x-jng\" \"jng\")
  (\"image/x-ms-bmp\" \"bmp\") (\"image/x-photoshop\" \"psd\")
  (\"image/x-portable-anymap\" \"pnm\") (\"image/x-portable-bitmap\" \"pbm\")
  (\"image/x-portable-graymap\" \"pgm\") (\"image/x-portable-pixmap\" \"ppm\")
  (\"image/x-rgb\" \"rgb\") (\"image/x-xbitmap\" \"xbm\") (\"image/x-xpixmap\" \"xpm\")
  (\"image/x-xwindowdump\" \"xwd\") (\"model/iges\" \"igs\" \"iges\")
  (\"model/mesh\" \"msh\" \"mesh\" \"silo\") (\"model/vrml\" \"wrl\" \"vrml\")
  (\"text/calendar\" \"ics\" \"icz\") (\"text/comma-separated-values\" \"csv\")
  (\"text/css\" \"css\") (\"text/h323\" \"323\") (\"text/html\" \"html\" \"htm\" \"shtml\")
  (\"text/iuls\" \"uls\") (\"text/mathml\" \"mml\")
  (\"text/plain\" \"asc\" \"txt\" \"text\" \"diff\" \"pot\") (\"text/richtext\" \"rtx\")
  (\"text/rtf\" \"rtf\") (\"text/scriptlet\" \"sct\" \"wsc\") (\"text/texmacs\" \"tm\" \"ts\")
  (\"text/tab-separated-values\" \"tsv\")
  (\"text/vnd.sun.j2me.app-descriptor\" \"jad\") (\"text/vnd.wap.wml\" \"wml\")
  (\"text/vnd.wap.wmlscript\" \"wmls\") (\"text/x-bibtex\" \"bib\")
  (\"text/x-boo\" \"boo\") (\"text/x-c++hdr\" \"h++\" \"hpp\" \"hxx\" \"hh\")
  (\"text/x-c++src\" \"c++\" \"cpp\" \"cxx\" \"cc\") (\"text/x-chdr\" \"h\")
  (\"text/x-component\" \"htc\") (\"text/x-csh\" \"csh\") (\"text/x-csrc\" \"c\")
  (\"text/x-dsrc\" \"d\") (\"text/x-haskell\" \"hs\") (\"text/x-java\" \"java\")
  (\"text/javascript\" \"js\") (\"text/x-literate-haskell\" \"lhs\")
  (\"text/x-moc\" \"moc\") (\"text/x-pascal\" \"pp\" \"as\") (\"text/x-pcs-gcd\" \"gcd\")
  (\"text/x-perl\" \"pl\" \"pm\") (\"text/x-python\" \"py\") (\"text/x-setext\" \"etx\")
  (\"text/x-sh\" \"sh\") (\"text/x-tcl\" \"tcl\" \"tk\")
  (\"text/x-tex\" \"tex\" \"ltx\" \"sty\" \"cls\") (\"text/x-vcalendar\" \"vcs\")
  (\"text/x-vcard\" \"vcf\") (\"video/dl\" \"dl\") (\"video/dv\" \"dif\" \"dv\")
  (\"video/fli\" \"fli\") (\"video/gl\" \"gl\") (\"video/mpeg\" \"mpeg\" \"mpg\" \"mpe\")
  (\"video/mp4\" \"mp4\") (\"video/quicktime\" \"qt\" \"mov\")
  (\"video/vnd.mpegurl\" \"mxu\") (\"video/x-la-asf\" \"lsf\" \"lsx\")
  (\"video/x-m4v\" \"m4v\") (\"video/x-mng\" \"mng\") (\"video/x-ms-asf\" \"asf\" \"asx\")
  (\"video/x-ms-wm\" \"wm\") (\"video/x-ms-wmv\" \"wmv\") (\"video/x-ms-wmx\" \"wmx\")
  (\"video/x-ms-wvx\" \"wvx\") (\"video/x-msvideo\" \"avi\")
  (\"video/x-sgi-movie\" \"movie\") (\"x-conference/x-cooltalk\" \"ice\")
  (\"x-world/x-vrml\" \"vrm\" \"vrml\" \"wrl\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIME-TYPE-HASH*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "A hash table which maps file suffixes to MIME types."
     :INITIAL-VALUE "(LET ((HUNCHENTOOT::HASH (MAKE-HASH-TABLE :TEST #'EQUALP)))
  (LOOP HUNCHENTOOT::FOR (TYPE
                          . HUNCHENTOOT::SUFFIXES) HUNCHENTOOT::IN HUNCHENTOOT::*MIME-TYPE-LIST*
        DO (LOOP HUNCHENTOOT::FOR HUNCHENTOOT::SUFFIX HUNCHENTOOT::IN HUNCHENTOOT::SUFFIXES
                 DO (SETF (GETHASH HUNCHENTOOT::SUFFIX HUNCHENTOOT::HASH)
                            TYPE)))
  HUNCHENTOOT::HASH)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIME-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PATHSPEC" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Given a pathname designator PATHSPEC returns the MIME type
(as a string) corresponding to the suffix of the file denoted by
PATHSPEC (or NIL).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-WITH-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "SUBSEQ" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Tests whether the sequence SEQ starts with the sequence
SUBSEQ.  Individual elements are compared with TEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STARTS-WITH-ONE-OF-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQ" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "SUBSEQ-LIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "QUOTE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Tests whether the sequence SEQ starts with one of the
sequences in SUBSEQ-LIST.  Individual elements are compared with
TEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-RANDOM-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "N" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) 10)
      ((:NAME "BASE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) 16))
     :DOCUMENTATION "Returns a random number (as a string) with base BASE and N
digits.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REASON-PHRASE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Returns a reason phrase for the HTTP return code RETURN-CODE (which
should be an integer) or NIL for return codes Hunchentoot doesn't know.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Similar to CL:ASSOC, but 'does the right thing' if
THING is a string or a symbol.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ASSOC*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     (((:NAME "THING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MD5-HEX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Calculates the md5 sum of the string STRING and returns it as a hex string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-FOR-HTML" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Escapes the characters #\\<, #\\>, #\\', #\\\", and #\\& for HTML
output.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HTTP-TOKEN-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "TOKEN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "This function tests whether OBJECT is a non-empty string which is a
TOKEN according to RFC 2068 (i.e. whether it may be used for, say,
cookie names).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RFC-1123-DATE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "GET-UNIVERSAL-TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T))))
     :DOCUMENTATION
     "Generates a time string according to RFC 1123. Default is current time.
This can be used to send a 'Last-Modified' header - see
HANDLE-IF-MODIFIED-SINCE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ISO-TIME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "GET-UNIVERSAL-TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP
         T))))
     :DOCUMENTATION
     "Returns the universal time TIME as a string in full ISO format.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-TMP-FILE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PREFIX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       "hunchentoot"))
     :DOCUMENTATION
     "Generates a unique name for a temporary file.  This function is
called from the RFC2388 library when a file is uploaded.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUOTE-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Quotes string according to RFC 2616's definition of `quoted-string'.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "UPGRADE-VECTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONVERTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a vector with the same length and the same elements as
VECTOR (a variable holding a vector) but having element type
NEW-TYPE.  If CONVERTER is not NIL, it should designate a function
which will be applied to each element of VECTOR before the result is
stored in the new vector.  The resulting vector will have a fill
pointer set to its end.

The macro also uses SETQ to store the new vector in VECTOR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "URL-DECODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Decodes a URL-encoded string which is assumed to be encoded using the
external format EXTERNAL-FORMAT, i.e. this is the inverse of
URL-ENCODE. It is assumed that you'll rarely need this function, if
ever. But just in case - here it is. The default for EXTERNAL-FORMAT is
the value of *HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORM-URL-ENCODED-LIST-TO-ALIST" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FORM-URL-ENCODED-LIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
       NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Converts a list FORM-URL-ENCODED-LIST of name/value pairs into an
alist.  Both names and values are url-decoded while doing this.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIES-TO-ALIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COOKIES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Converts a list of cookies of the form \"key=value\" to an alist.  No
  character set processing is done.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "URL-ENCODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "URL-encodes a string using the external format EXTERNAL-FORMAT. The
default for EXTERNAL-FORMAT is the value of
*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTENT-TYPE-HEADER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Reads and parses a `Content-Type' header and returns it as three
values - the type, the subtype, and the requests' character set as
specified in the 'charset' parameter in the header, if there is one
and if the content type is \"text\".  CONTENT-TYPE-HEADER is supposed
to be the corresponding header value as a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KEEP-ALIVE-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Returns a true value unless the incoming request's headers or the
server's PERSISTENT-CONNECTIONS-P setting obviate a keep-alive reply.
The second return value denotes whether the client has explicitly
asked for a persistent connection.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADDRESS-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Returns a string with information about Hunchentoot suitable for
inclusion in HTML output.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "INPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Whether input chunking is currently switched on for
*HUNCHENTOOT-STREAM* - note that this will return NIL if the stream
not a chunked stream.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Whether the current connection to the client is secure. See
ACCEPTOR-SSL-P.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-MAPPED-CONDITIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Run BODY with usocket condition mapping in effect, i.e. platform specific network errors will be
  signalled as usocket conditions.  For Lispworks, no mapping is performed.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CONDITIONS-CAUGHT-AND-LOGGED" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Run BODY with conditions caught and logged by the *ACCEPTOR*. Errors are
stopped right away so no other part of the software is impacted by them.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-LOG-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "STREAM-VAR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "DESTINATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Helper macro to write log entries.  STREAM-VAR is a symbol that
will be bound to the logging stream during the execution of BODY.
DESTINATION is the logging destination, which can be either a pathname
designator of the log file, a symbol designating an open stream or NIL
if no logging should be done.  LOCK refers to the lock that should be
held during the logging operation.  If DESTINATION is a pathname, a
flexi stream with UTF-8 encoding will be created and bound to
STREAM-VAR.  If an error occurs while writing to the log file, that
error will be logged to *ERROR-OUTPUT*.

Note that logging to a file involves opening and closing the log file
for every logging operation, which is overall costly.  Web servers
with high throughput demands should make use of a specialized logging
function rather than relying on Hunchentoot's default logging
facility.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Each COOKIE objects describes one outgoing cookie." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS
       ((:NAME "COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The name of the cookie - a string.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The value of the cookie. Will be URL-encoded
when sent to the browser.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXPIRES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-EXPIRES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The time (a universal time) when the
cookie expires (or NIL).")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MAX-AGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-MAX-AGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The time delta (in seconds) after which the
cookie expires (or NIL).")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The path this cookie is valid for (or NIL).")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DOMAIN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-DOMAIN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The domain this cookie is valid for (or NIL).")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SECURE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "COOKIE-SECURE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "A generalized boolean denoting whether this
cookie is a secure cookie.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HTTP-ONLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "COOKIE-HTTP-ONLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "A generalized boolean denoting whether
this cookie is a `HttpOnly' cookie.

This is a Microsoft extension that has been implemented in Firefox as
well. See <http://msdn2.microsoft.com/en-us/library/ms533046.aspx>.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INIT-ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Ensure COOKIE has a correct slot-value for NAME.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-COOKIE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Adds the COOKIE object COOKIE to the outgoing cookies of the
REPLY object REPLY. If a cookie with the same name
(case-sensitive) already exists, it is replaced.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) "")
      (:NAME "EXPIRES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "MAX-AGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "DOMAIN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "SECURE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "HTTP-ONLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Creates a cookie object from the parameters provided and adds
it to the outgoing cookies of the REPLY object REPLY. If a cookie
with the name NAME (case-sensitive) already exists, it is
replaced.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIE-DATE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "UNIVERSAL-TIME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Converts UNIVERSAL-TIME to cookie date format.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "STRINGIFY-COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Converts the COOKIE object COOKIE to a string suitable for a
'Set-Cookie' header to be sent to the client.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :SUPER-CLASS-LIST
     NIL :DOCUMENTATION "Objects of this class hold all the information
about an outgoing reply.  They are created automatically by
Hunchentoot and can be accessed and modified by the corresponding
handler.

You should not mess with the slots of these objects directly, but you
can subclass REPLY in order to implement your own behaviour.  See the
REPLY-CLASS slot of the ACCEPTOR class."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The outgoing 'Content-Type' http
header which defaults to the value of *DEFAULT-CONTENT-TYPE*.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTENT-LENGTH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The outgoing 'Content-Length'
http header which defaults NIL.  If this is NIL, Hunchentoot will
compute the content length.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HEADERS-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "HEADERS-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "An alist of the outgoing http headers
not including the 'Set-Cookie', 'Content-Length', and 'Content-Type'
headers.  Use the functions HEADER-OUT and (SETF HEADER-OUT) to
modify this slot.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "The http return code of this
reply.  The return codes Hunchentoot can handle are defined in
specials.lisp.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "REPLY-EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The external format of the reply -
used for character output.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "COOKIES-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "COOKIES-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The outgoing cookies.  This slot's
value should only be modified by the functions defined in
cookies.lisp.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HEADERS-OUT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of the outgoing headers associated with the
REPLY object REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIES-OUT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of the outgoing cookies associated with the
REPLY object REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "COOKIES-OUT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Sets the alist of the outgoing cookies associated with the REPLY
object REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTENT-TYPE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "The outgoing 'Content-Type' http header of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Sets the outgoing 'Content-Type' http header of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTENT-LENGTH*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "The outgoing 'Content-Length' http header of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-LENGTH*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Sets the outgoing 'Content-Length' http header of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RETURN-CODE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "The http return code of REPLY.  The return codes Hunchentoot can
handle are defined in specials.lisp.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RETURN-CODE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Sets the http return code of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REPLY-EXTERNAL-FORMAT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "The external format of REPLY which is used for character output.")
    (:TYPE :FUNCTION :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REPLY-EXTERNAL-FORMAT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
       T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Sets the external format of REPLY.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HEADER-OUT-SET-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns a true value if the outgoing http header named NAME has
been specified already.  NAME should be a keyword or a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the current value of the outgoing http header named NAME.
NAME should be a keyword or a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIE-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the current value of the outgoing cookie named
NAME. Search is case-sensitive.")
    (:TYPE :GENERIC :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Changes the current value of the outgoing http
header named NAME (a keyword or a string).  If a header with this
name doesn't exist, it is created.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONTENT-TYPE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Special case for the `Content-Type' header.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONTENT-TYPE" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Special case for the `Content-Type' header.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Special case for the `Content-Length' header.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Special case for the `Content-Length' header.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "If NAME is a string, it is converted to a keyword first.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "If NAME is a string, it is converted to a keyword first.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Objects of this class hold all the information
about an incoming request.  They are created automatically by
acceptors and can be accessed by the corresponding handler.

You should not mess with the slots of these objects directly, but you
can subclass REQUEST in order to implement your own behaviour.  See
the REQUEST-CLASS slot of the ACCEPTOR class."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "REQUEST-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The acceptor which created this request
object.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HEADERS-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "HEADERS-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "An alist of the incoming headers.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS NIL
       :READERS
       ((:NAME "REQUEST-METHOD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The request method as a keyword.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "URI" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS
       ((:NAME "REQUEST-URI" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The request URI as a string.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The HTTP protocol as a keyword.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOCAL-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "LOCAL-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "The IP address of the local system
that the client connected to.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOCAL-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "LOCAL-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "The TCP port number of the local
system that the client connected to.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The IP address of the client that
initiated this request.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REMOTE-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REMOTE-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The TCP port number of the client
socket from which this request originated.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTENT-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTENT-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "A stream from which the request
body can be read if there is one.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "COOKIES-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "COOKIES-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "An alist of the cookies sent by the client.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "GET-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "GET-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "An alist of the GET parameters sent
by the client.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "POST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "POST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "An alist of the POST parameters
sent by the client.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCRIPT-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SCRIPT-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The URI requested by the client without
the query string.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "QUERY-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "QUERY-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The query string of this request.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION "The session object associated with this
request.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "AUX-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "AUX-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION
       "Used to keep a user-modifiable alist with
arbitrary data during the request.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RAW-POST-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The raw string sent as the body of a
POST request, populated only if not a multipart/form-data request.")))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PROCESS-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This function is called by PROCESS-CONNECTION after
the incoming headers have been read.  It calls HANDLE-REQUEST to
select and call a handler and sends the output of this handler to the
client using START-OUTPUT.  Note that PROCESS-CONNECTION is called
once per connection and loops in case of a persistent connection while
PROCESS-REQUEST is called anew for each request.

Essentially, you can view process-request as a thin wrapper around
HANDLE-REQUEST.

The return value of this function is ignored.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-HACK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "The rfc2388 package is buggy in that it operates on a character
stream and thus only accepts encodings which are 8 bit transparent.
In order to support different encodings for parameter values
submitted, we post process whatever string values the rfc2388 package
has returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-RFC2388-FORM-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE-HEADER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Creates an alist of POST parameters from the stream STREAM which is
supposed to be of content type 'multipart/form-data'.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-POST-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "WANT-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "ALREADY-READ" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) 0))
     :DOCUMENTATION
     "Reads the request body from the stream and stores the raw contents
(as an array of octets) in the corresponding slot of the REQUEST
object.  Returns just the stream if WANT-STREAM is true.  If there's a
Content-Length header, it is assumed, that ALREADY-READ octets have
already been read.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INIT-ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "The only initarg for a REQUEST object is :HEADERS-IN.  All other
slot values are computed in this :AFTER method.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROCESS-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Standard implementation for processing a request.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "WITHIN-REQUEST-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "True if we're in the context of a request, otherwise nil.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-MULTIPART-FORM-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Parse the REQUEST body as multipart/form-data, assuming that its
content type has already been verified.  Returns the form data as
alist or NIL if there was no data or the data could not be parsed.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-READ-POST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "FORCE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make surce that any POST parameters in the REQUEST are parsed.  The
body of the request must be either application/x-www-form-urlencoded
or multipart/form-data to be considered as containing POST parameters.
If FORCE is true, parsing is done unconditionally.  Otherwise, parsing
will only be done if the RAW-POST-DATA slot in the REQUEST is false.
EXTERNAL-FORMAT specifies the external format of the data in the
request body.  By default, the encoding is determined from the
Content-Type header of the request or from
*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT* if none is found.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RECOMPUTE-REQUEST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Recomputes the GET and POST parameters for the REQUEST object
REQUEST.  This only makes sense if you're switching external formats
during the request.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCRIPT-NAME*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the file name of the REQUEST object REQUEST. That's the
requested URI without the query string (i.e the GET parameters).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "QUERY-STRING*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the query string of the REQUEST object REQUEST. That's
the part behind the question mark (i.e. the GET parameters).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of the GET parameters associated with the REQUEST
object REQUEST.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "POST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POST-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of the POST parameters associated with the REQUEST
object REQUEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HEADERS-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of the incoming headers associated with the
REQUEST object REQUEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIES-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns an alist of all cookies associated with the REQUEST object
REQUEST.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "HEADER-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns the incoming header with name NAME.  NAME
can be a keyword (recommended) or a string.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "HEADER-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HEADER-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HEADER-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the incoming header with name NAME.  NAME can be a keyword
(recommended) or a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AUTHORIZATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns as two values the user and password (if any) as encoded in
the 'AUTHORIZATION' header.  Returns NIL if there is no such header.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOTE-ADDR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the address the current request originated from.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOTE-PORT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the port the current request originated from.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOCAL-ADDR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the address the current request connected to.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOCAL-PORT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the port the current request connected to.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REAL-REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the 'X-Forwarded-For' incoming http header as the
second value in the form of a list of IP addresses and the first
element of this list as the first value if this header exists.
Otherwise returns the value of REMOTE-ADDR as the only value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HOST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the 'Host' incoming http header value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REQUEST-URI*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the request URI.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REQUEST-METHOD*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the request method as a Lisp keyword.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SERVER-PROTOCOL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the request protocol as a Lisp keyword.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the 'User-Agent' http header.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COOKIE-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the cookie with the name NAME (a string) as sent by the
browser - or NIL if there is none.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REFERER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Returns the 'Referer' (sic!) http header.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the GET parameter with name NAME (a string) - or NIL if
there is none.  Search is case-sensitive.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "POST-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the POST parameter with name NAME (a string) - or NIL if
there is none.  Search is case-sensitive.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the GET or the POST parameter with name NAME (a string) -
or NIL if there is none.  If both a GET and a POST parameter with the
same name exist the GET parameter is returned.  Search is
case-sensitive.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HANDLE-IF-MODIFIED-SINCE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "TIME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Handles the 'If-Modified-Since' header of REQUEST.  The date string
is compared to the one generated from the supplied universal time
TIME.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTERNAL-FORMAT-FROM-CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Creates and returns an external format corresponding to the value
of the content type header provided in CONTENT-TYPE.  If the content
type was not set or if the character set specified was invalid, NIL is
returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RAW-POST-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "FORCE-TEXT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "FORCE-BINARY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "WANT-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the content sent by the client if there was any (unless
the content type was \"multipart/form-data\").  By default, the result
is a string if the type of the `Content-Type' media type is \"text\",
and a vector of octets otherwise.  In the case of a string, the
external format to be used to decode the content will be determined
from the `charset' parameter sent by the client (or otherwise
*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT* will be used).

You can also provide an external format explicitly (through
EXTERNAL-FORMAT) in which case the result will unconditionally be a
string.  Likewise, you can provide a true value for FORCE-TEXT which
will force Hunchentoot to act as if the type of the media type had
been \"text\".  Or you can provide a true value for FORCE-BINARY which
means that you want a vector of octets at any rate.

If, however, you provide a true value for WANT-STREAM, the other
parameters are ignored and you'll get the content (flexi) stream to
read from it yourself.  It is then your responsibility to read the
correct amount of data, because otherwise you won't be able to return
a response to the client.  If the content type of the request was
`multipart/form-data' or `application/x-www-form-urlencoded', the
content has been read by Hunchentoot already and you can't read from
the stream anymore.

You can call RAW-POST-DATA more than once per request, but you can't
mix calls which have different values for WANT-STREAM.

Note that this function is slightly misnamed because a client can send
content even if the request method is not POST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AUX-REQUEST-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the value associated with SYMBOL from the request object
REQUEST (the default is the current request) if it exists.  The
second return value is true if such a value was found.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DELETE-AUX-REQUEST-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Removes the value associated with SYMBOL from the request object
REQUEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return a relative pathname that has been verified to not contain
  any directory traversals or explicit device or host fields.  Returns
  NIL if the path is not acceptable.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REQUEST-PATHNAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "DROP-PREFIX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Construct a relative pathname from the request's SCRIPT-NAME.
If DROP-PREFIX is given, pathname construction starts at the first path
segment after the prefix.
")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-DB-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WHOLE-DB-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "A function which returns a lock that will be used
to prevent concurrent access to sessions.  The first argument will be
the acceptor that handles the current request, the second argument is
true if the whole (current) session database is modified.  If it is
NIL, only one existing session in the database is modified.

This function can return NIL which means that sessions or session
databases will be modified without a lock held (for example for
single-threaded environments).  The default is to always return a
global lock (ignoring the ACCEPTOR argument) for Lisps that support
threads and NIL otherwise.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-DB-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WHOLE-DB-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-SESSION-LOCK-HELD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "This is like WITH-LOCK-HELD except that it will accept NIL as a
\"lock\" and just execute BODY in this case.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-DB" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns the current session database which is an
alist where each car is a session's ID and the cdr is the
corresponding SESSION object itself.  The default is to use a global
list for all acceptors.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-DB" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SESSION-DB" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Modifies the current session database.  See SESSION-DB.")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SESSION-DB" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "NEW-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NEXT-SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns the next sequential session ID, an integer,
which should be unique per session.  The default method uses a simple
global counter and isn't guarded by a lock.  For a high-performance
production environment you might consider using a more robust
implementation.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEXT-SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NEXT-SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "SESSION objects are automatically maintained by
Hunchentoot.  They should not be created explicitly with MAKE-INSTANCE
but implicitly with START-SESSION and they should be treated as opaque
objects.

You can ignore Hunchentoot's SESSION objects altogether and implement
your own sessions if you provide corresponding methods for
SESSION-COOKIE-VALUE and SESSION-VERIFY."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION "The unique ID (an INTEGER) of the session.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "SESSION-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "The session string encodes enough
data to safely retrieve this session.  It is sent to the browser as a
cookie value or as a GET parameter.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "SESSION-USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The incoming 'User-Agent' header that
was sent when this session was created.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SESSION-REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The remote IP address of the client
when this session was started as returned by REAL-REMOTE-ADDR.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION-START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SESSION-START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The time this session was started.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LAST-CLICK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "SESSION-LAST-CLICK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION "The last time this session was used.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "SESSION-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION "Data associated with this session -
see SESSION-VALUE.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MAX-TIME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "SESSION-MAX-TIME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The time (in seconds) after which this
session expires if it's not used.")))
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENCODE-SESSION-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Creates a uniquely encoded session string based on the values ID,
USER-AGENT, REMOTE-ADDR, and START")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRINGIFY-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Creates a string representing the SESSION object SESSION. See
ENCODE-SESSION-STRING.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INIT-ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Set SESSION-STRING slot after the session has been initialized.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SESSION-GC" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "Removes sessions from the current session database which are too
old - see SESSION-TOO-OLD-P.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SESSION-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*SESSION*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Returns the value associated with SYMBOL from the session object
SESSION (the default is the current session) if it exists.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DELETE-SESSION-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*SESSION*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Removes the value associated with SYMBOL from SESSION if there is
one.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns a string which can be used to safely
restore the session SESSION if as session has already been
established.  This is used as the value stored in the session cookie
or in the corresponding GET parameter and verified by SESSION-VERIFY.

A default method is provided and there's no reason to change it unless
you want to use your own session objects.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns the name (a string) of the cookie (or the
GET parameter) which is used to store a session on the client side.
The default is to use the string \"hunchentoot-session\", but you can
specialize this function if you want another name.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-CREATED" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "NEW-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "This function is called whenever a new session has
been created.  There's a default method which might trigger a session
GC based on the value of *SESSION-GC-FREQUENCY*.

The return value is ignored.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-CREATED" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Counts session usage globally and triggers session GC if
necessary.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-CREATED" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Counts session usage globally and triggers session GC if
necessary.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Returns the current SESSION object. If there is no current session,
creates one and updates the corresponding data structures. In this
case the function will also send a session cookie to the browser.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REMOVE-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Completely removes the SESSION object SESSION from Hunchentoot's
internal session database.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SESSION-TOO-OLD-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Returns true if the SESSION object SESSION has not been active in
the last (SESSION-MAX-TIME SESSION) seconds.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-STORED-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the SESSION object corresponding to the number ID if the
session has not expired. Will remove the session if it has expired but
will not create a new one.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SESSION-VERIFY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Tries to get a session identifier from the cookies
(or alternatively from the GET parameters) sent by the client (see
SESSION-COOKIE-NAME and SESSION-COOKIE-VALUE).  This identifier is
then checked for validity against the REQUEST object REQUEST.  On
success the corresponding session object (if not too old) is returned
(and updated).  Otherwise NIL is returned.

A default method is provided and you only need to write your own one
if you want to maintain your own sessions.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-VERIFY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-SESSION-SECRET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Sets *SESSION-SECRET* to a new random value. All old sessions will
cease to be valid.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RESET-SESSIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Removes ALL stored sessions of ACCEPTOR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCANNER-FOR-GET-PARAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAM-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a CL-PPCRE scanner which matches a GET parameter in a
URL.  Scanners are memoized in SCANNER-HASH once they are created.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCANNER-FOR-GET-PARAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAM-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a CL-PPCRE scanner which matches a GET parameter in a
URL.  Scanners are memoized in SCANNER-HASH once they are created.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ADD-COOKIE-VALUE-TO-URL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "URL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       ((:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
        (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
      ((:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "WHEN-LET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
        ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
         ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
          (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
        ((:NAME "SESSION-COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
          T)
         (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))))
      ((:NAME "REPLACE-AMPERSANDS-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Removes all GET parameters named COOKIE-NAME from URL and then
adds a new GET parameter with the name COOKIE-NAME and the value
VALUE.  If REPLACE-AMPERSANDS-P is true all literal ampersands in URL
are replaced with '&amp;'. The resulting URL is returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-REWRITE-URLS-FOR-SESSION" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HTML" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       ((:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
        (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
      ((:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "WHEN-LET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
        ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
         ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
          (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
        ((:NAME "SESSION-COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
          T)
         (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))))
     :DOCUMENTATION "Rewrites the HTML page HTML such that the name/value pair
COOKIE-NAME/COOKIE-VALUE is inserted if the client hasn't sent a
cookie of the same name but only if *REWRITE-FOR-SESSION-URLS* is
true.  See the docs for URL-REWRITE:REWRITE-URLS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-PREFIX-DISPATCHER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "PREFIX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Creates a request dispatch function which will dispatch to the
function denoted by HANDLER if the file name of the current request
starts with the string PREFIX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-REGEX-DISPATCHER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "REGEX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Creates a request dispatch function which will dispatch to the
function denoted by HANDLER if the file name of the current request
matches the CL-PPCRE regular expression REGEX.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ABORT-REQUEST-HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RESULT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "This function can be called by a request handler at any time to
immediately abort handling the request.  This works as if the handler
had returned RESULT.  See the source code of REDIRECT for an example.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-HANDLE-RANGE-HEADER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "FILE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Helper function for handle-static-file.  Determines whether the
  requests specifies a Range header.  If so, parses the header and
  position the already opened file to the location specified.  Returns
  the number of bytes to transfer from the file.  Invalid specified
  ranges are reported to the client with a HTTP 416 status code.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HANDLE-STATIC-FILE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATHNAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "A function which acts like a Hunchentoot handler for the file
denoted by PATHNAME.  Sends a content type header corresponding to
CONTENT-TYPE or (if that is NIL) tries to determine the content type
via the file's suffix.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER" :PACKAGE-NAME
      "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "URI" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Creates and returns a request dispatch function which will dispatch
to a handler function which emits the file denoted by the pathname
designator PATH with content type CONTENT-TYPE if the SCRIPT-NAME of
the request matches the string URI.  If CONTENT-TYPE is NIL, tries to
determine the content type via the file's suffix.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CREATE-FOLDER-DISPATCHER-AND-HANDLER" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "URI-PREFIX" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "BASE-PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Creates and returns a dispatch function which will dispatch to a
handler function which emits the file relative to BASE-PATH that is
denoted by the URI of the request relative to URI-PREFIX.  URI-PREFIX
must be a string ending with a slash, BASE-PATH must be a pathname
designator for an existing directory.  If CONTENT-TYPE is not NIL,
it'll be the content type used for all files in the folder.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NO-CACHE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "Adds appropriate headers to completely prevent caching on most browsers.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REDIRECT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TARGET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "HOST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       ((:NAME "HOST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
        (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       (:NAME "HOST-PROVIDED-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
      (:NAME "PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "PROTOCOL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "IF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
        (:NAME "HTTPS" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)
        (:NAME "HTTP" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
      ((:NAME "ADD-SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       ((:NAME "NOT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        ((:NAME "OR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
         (:NAME "HOST-PROVIDED-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
         ((:NAME "STARTS-WITH-SCHEME-P" :PACKAGE-NAME "URL-REWRITE" :EXTERNALP
           T)
          (:NAME "TARGET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
         ((:NAME "COOKIE-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
          ((:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
            T)
           (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))))))
      ((:NAME "CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "+HTTP-MOVED-TEMPORARILY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        T)))
     :DOCUMENTATION
     "Redirects the browser to TARGET which should be a string.  If
TARGET is a full URL starting with a scheme, HOST, PORT and PROTOCOL
are ignored.  Otherwise, TARGET should denote the path part of a URL,
PROTOCOL must be one of the keywords :HTTP or :HTTPS, and the URL to
redirect to will be constructed from HOST, PORT, PROTOCOL, and TARGET.
Adds a session ID if ADD-SESSION-ID is true.  If CODE is a 3xx
redirection code, it will be sent as status code.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REQUIRE-AUTHORIZATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "REALM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       "Hunchentoot"))
     :DOCUMENTATION
     "Sends back appropriate headers to require basic HTTP authentication
(see RFC 2617) for the realm REALM.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DISPATCH-TABLE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :DOCUMENTATION "A global list of dispatch functions." :INITIAL-VALUE
     "(LIST 'HUNCHENTOOT:DISPATCH-EASY-HANDLERS)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*EASY-HANDLER-ALIST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :DOCUMENTATION "An alist of (URI acceptor-names function) lists defined by
DEFINE-EASY-HANDLER."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-REAL-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Computes the `real' paramater name (a string) from the Lisp
symbol SYMBOL.  Used in cases where no parameter name is
provided.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARGUMENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Converts the string ARGUMENT to TYPE where TYPE is one of the
symbols STRING, CHARACTERS, INTEGER, KEYWORD, or BOOLEAN - or
otherwise a function designator for a function of one argument.
ARGUMENT can also be NIL in which case this function also returns
NIL unconditionally.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-SIMPLE-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARAMETER-READER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Retrieves the parameter named PARAMETER-NAME using the reader
PARAMETER-READER and converts it to TYPE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-LIST-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Retrieves all parameters from PARAMETERS which are named
PARAMETER-NAME, converts them to TYPE, and returns a list of
them.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-ARRAY-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Retrieves all parameters from PARAMETERS which are named like
\"PARAMETER-NAME[N]\" (where N is a non-negative integer),
converts them to TYPE, and returns an array where the Nth element
is the corresponding value.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-HASH-TABLE-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TYPE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "KEY-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "TEST-FUNCTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Retrieves all parameters from PARAMETERS which are named like
\"PARAMETER-NAME{FOO}\" (where FOO is any sequence of characters
not containing curly brackets), converts them to TYPE, and
returns a hash table with test function TEST-FUNCTION where the
corresponding value is associated with the key FOO (converted to
KEY-TYPE).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPUTE-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMETER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "PARAMETER-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "REQUEST-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Computes and returns the parameter(s) called PARAMETER-NAME
and converts it/them according to the value of PARAMETER-TYPE.
REQUEST-TYPE is one of :GET, :POST, or :BOTH.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-DEFUN-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DESCRIPTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "DEFAULT-PARAMETER-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
       NIL)
      (:NAME "DEFAULT-REQUEST-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Creates a keyword parameter to be used by DEFINE-EASY-HANDLER.
DESCRIPTION is one of the elements of DEFINE-EASY-HANDLER's
LAMBDA-LIST and DEFAULT-PARAMETER-TYPE and DEFAULT-REQUEST-TYPE
are the global default values.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "DEFINE-EASY-HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DESCRIPTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "LAMBDA-LIST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Defines a handler with the body BODY and optionally registers
it with a URI so that it will be found by DISPATCH-EASY-HANDLERS.
DESCRIPTION is either a symbol NAME or a list matching the
destructuring lambda list

  (name &key uri acceptor-names default-parameter-type default-request-type).

LAMBDA-LIST is a list the elements of which are either a symbol
VAR or a list matching the destructuring lambda list

  (var &key real-name parameter-type init-form request-type).

The resulting handler will be a Lisp function with the name NAME
and keyword parameters named by the VAR symbols.  Each VAR will
be bound to the value of the GET or POST parameter called
REAL-NAME (a string) before BODY is executed.  If REAL-NAME is
not provided, it will be computed by downcasing the symbol name
of VAR.

If URI (which is evaluated) is provided, then it must be a string or
a function designator for a function of one argument.  In this case,
the handler will be returned by DISPATCH-EASY-HANDLERS, if URI is a
string and the script name of a request is URI, or if URI designates a
function and applying this function to the current request object
returns a true value.

ACCEPTOR-NAMES (which is evaluated) can be a list of symbols which
means that the handler will be returned by DISPATCH-EASY-HANDLERS in
acceptors which have one of these names (see ACCEPTOR-NAME).
ACCEPTOR-NAMES can also be the symbol T which means that the handler
will be returned by DISPATCH-EASY-HANDLERS in every acceptor.

Whether the GET or POST parameter (or both) will be taken into
consideration, depends on REQUEST-TYPE which can
be :GET, :POST, :BOTH, or NIL.  In the last case, the value of
DEFAULT-REQUEST-TYPE (the default of which is :BOTH) will be
used.

The value of VAR will usually be a string (unless it resulted from a
file upload in which case it won't be converted at all), but if
PARAMETER-TYPE (which is evaluated) is provided, the string will be
converted to another Lisp type by the following rules:

If the corresponding GET or POST parameter wasn't provided by the
client, VAR's value will be NIL.  If PARAMETER-TYPE is 'STRING, VAR's
value remains as is.  If PARAMETER-TYPE is 'INTEGER and the parameter
string consists solely of decimal digits, VAR's value will be the
corresponding integer, otherwise NIL.  If PARAMETER-TYPE is 'KEYWORD,
VAR's value will be the keyword obtained by interning the upcased
parameter string into the keyword package.  If PARAMETER-TYPE is
'CHARACTER and the parameter string is of length one, VAR's value will
be the single character of this string, otherwise NIL.  If
PARAMETER-TYPE is 'BOOLEAN, VAR's value will always be T (unless it
is NIL by the first rule above, of course).  If PARAMETER-TYPE is any
other atom, it is supposed to be a function designator for a unary
function which will be called to convert the string to something else.

Those were the rules for `simple' types, but PARAMETER-TYPE can
also be a list starting with one of the symbols LIST, ARRAY, or
HASH-TABLE.  The second value of the list must always be a simple
parameter type as in the last paragraph - we'll call it the
`inner type' below.

In the case of 'LIST, all GET/POST parameters called REAL-NAME
will be collected, converted to the inner type, and assembled
into a list which will be the value of VAR.

In the case of 'ARRAY, all GET/POST parameters which have a name
like the result of

  (format nil \"~A[~A]\" real-name n)

where N is a non-negative integer, will be assembled into an
array where the Nth element will be set accordingly, after
conversion to the inner type.  The array, which will become the
value of VAR, will be big enough to hold all matching parameters,
but not bigger.  Array elements not set as described above will
be NIL.  Note that VAR will always be bound to an array, which
may be empty, so it will never be NIL, even if no appropriate
GET/POST parameters are found.

The full form of a 'HASH-TABLE parameter type is

  (hash-table inner-type key-type test-function),

but KEY-TYPE and TEST-FUNCTION can be left out in which case they
default to 'STRING and 'EQUAL, respectively.  For this parameter
type, all GET/POST parameters which have a name like the result
of

  (format nil \"~A{~A}\" real-name key)

(where KEY is a string that doesn't contain curly brackets) will
become the values (after conversion to INNER-TYPE) of a hash
table with test function TEST-FUNCTION where KEY (after
conversion to KEY-TYPE) will be the corresponding key.  Note that
VAR will always be bound to a hash table, which may be empty, so
it will never be NIL, even if no appropriate GET/POST parameters
are found.

To make matters even more complicated, the three compound
parameter types also have an abbreviated form - just one of the
symbols LIST, ARRAY, or HASH-TABLE.  In this case, the inner type
will default to 'STRING.

If PARAMETER-TYPE is not provided or NIL, DEFAULT-PARAMETER-TYPE
(the default of which is 'STRING) will be used instead.

If the result of the computations above would be that VAR would
be bound to NIL, then INIT-FORM (if provided) will be evaluated
instead, and VAR will be bound to the result of this evaluation.

Handlers built with this macro are constructed in such a way that
the resulting Lisp function is useful even outside of
Hunchentoot.  Specifically, all the parameter computations above
will only happen if *REQUEST* is bound, i.e. if we're within a
Hunchentoot request.  Otherwise, VAR will always be bound to the
result of evaluating INIT-FORM unless a corresponding keyword
argument is provided.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DISPATCH-EASY-HANDLERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This is a dispatcher which returns the appropriate handler
defined with DEFINE-EASY-HANDLER, if there is one.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "EASY-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "This is the acceptor of the ``easy'' Hunchentoot framework." :SLOT-LIST
     NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-DISPATCH-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "EASY-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "The easy request dispatcher which selects a request handler
based on a list of individual request dispatchers all of which can
either return a handler or neglect by returning NIL.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "EASY-SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "EASY-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This is an acceptor that mixes the ``easy''
  Hunchentoot with SSL connections."
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "WRITE-HEADER-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Accepts a string KEY and a Lisp object VALUE and
writes them directly to the client as an HTTP header line.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRITE-HEADER-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRITE-HEADER-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRITE-HEADER-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRITE-HEADER-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAYBE-ADD-CHARSET-TO-CONTENT-TYPE-HEADER" :PACKAGE-NAME
      "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Given the contents of a CONTENT-TYPE header, add a charset=
  attribute describing the given EXTERNAL-FORMAT if no charset=
  attribute is already present and the content type is a text content
  type.  Returns the augmented content type.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START-OUTPUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "CONTENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "CONTENT-PROVIDED-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)))
     :DOCUMENTATION "Sends all headers and maybe the content body to
*HUNCHENTOOT-STREAM*.  Returns immediately and does nothing if called
more than once per request.  Called by PROCESS-REQUEST and/or
SEND-HEADERS.  The RETURN-CODE argument represents the integer return
code of the request.  The corresponding reason phrase is determined by
calling the REASON-PHRASE function.  The CONTENT provided represents
the body data to send to the client, if any.  If it is not specified,
no body is written to the client.  The handler function is expected to
directly write to the stream in this case.

Returns the stream that is connected to the client.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-RESPONSE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "COOKIES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "CONTENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Send a HTTP response to the STREAM and log the event in ACCEPTOR.
  STATUS-CODE is the HTTP status code used in the response.  HEADERS
  and COOKIES are used to create the response header.  If CONTENT is
  provided, it is sent as the response body.

  If *HEADER-STREAM* is not NIL, the response headers are written to
  that stream when they are written to the client.

  STREAM is returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-HEADERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION
     "Sends the initial status line and all headers as determined by the
REPLY object *REPLY*.  Returns a binary stream to which the body of
the reply can be written.  Once this function has been called, further
changes to *REPLY* don't have any effect.  Also, automatic handling of
errors (i.e. sending the corresponding status code to the browser,
etc.) is turned off for this request.  If your handlers return the
full body as a string or as an array of octets you should NOT call
this function.

This function does not return control to the caller during HEAD
request processing.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-INITIAL-REQUEST-LINE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Reads and returns the initial HTTP request line, catching permitted
errors and handling *BREAK-EVEN-WHILE-READING-REQUEST-TYPE-P*.  If no
request could be read, returns NIL.  At this point, both an
end-of-file as well as a timeout condition are normal; end-of-file
will occur when the client has decided to not send another request but
to close the connection instead, a timeout indicates that the
connection timeout established by Hunchentoot has expired and we do
not want to wait for another request any longer.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-BAD-REQUEST-RESPONSE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ADDITIONAL-INFO" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Send a ``Bad Request'' response to the client.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINTABLE-ASCII-CHAR-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GET-REQUEST-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Reads incoming headers from the client via STREAM.  Returns as
multiple values the headers as an alist, the method, the URI, and the
protocol of the request.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SET-TIMEOUTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "USOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "READ-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "WRITE-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Sets up timeouts on the given USOCKET object.  READ-TIMEOUT is the
read timeout period, WRITE-TIMEOUT is the write timeout, specified in
(fractional) seconds.  The timeouts can either be implemented using
the low-level socket options SO_RCVTIMEO and SO_SNDTIMEO or some
other, implementation specific mechanism.  On platforms that do not
support separate read and write timeouts, both must be equal or an
error will be signaled.  READ-TIMEOUT and WRITE-TIMEOUT may be NIL,
which means that the corresponding socket timeout value will not be
set.")
    (:TYPE :CLASS :SYMBOL
     (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "An instance of this class is responsible for
distributing the work of handling requests for its acceptor.  This is
an \"abstract\" class in the sense that usually only instances of
subclasses of TASKMASTER will be used."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       ((:NAME "TASKMASTER-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "A backpointer to the acceptor instance
this taskmaster works for.")))
    (:TYPE :GENERIC :SYMBOL
     (:NAME "EXECUTE-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This is a callback called by the acceptor once it
has performed all initial processing to start listening for incoming
connections (see START-LISTENING).  It usually calls the
ACCEPT-CONNECTIONS method of the acceptor, but depending on the
taskmaster instance the method might be called from a new thread.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "HANDLE-INCOMING-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "This function is called by the acceptor to start
processing of requests on a new incoming connection.  SOCKET is the
usocket instance that represents the new connection (or a socket
handle on LispWorks).  The taskmaster starts processing requests on
the incoming connection by calling the PROCESS-CONNECTION method of
the acceptor instance.  The SOCKET argument is passed to
PROCESS-CONNECTION as an argument.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SHUTDOWN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Shuts down the taskmaster, i.e. frees all resources
that were set up by it.  For example, a multi-threaded taskmaster
might terminate all threads that are currently associated with it.
This function is called by the acceptor's STOP method.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CREATE-REQUEST-HANDLER-THREAD" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Create a new thread in which to process the request.
    This thread will call PROCESS-CONNECTION to process the request.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TOO-MANY-TASKMASTER-REQUESTS" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Signal a \"too many requests\" error, just prior to closing the connection.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TASKMASTER-MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "The maximum number of request threads this taskmaster will simultaneously
    run before refusing or queueing new connections requests.  If the value
    is null, then there is no limit.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- no limit on the number of threads.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- no limit on the number of threads.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TASKMASTER-MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "The maximum number of connections this taskmaster will accept before refusing
    new connections.  If supplied, this must be greater than MAX-THREAD-COUNT.
    The number of queued requests is the difference between MAX-ACCEPT-COUNT
    and MAX-THREAD-COUNT.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- no limit on the number of connections.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- no limit on the number of connections.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns the current number of taskmaster requests.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- claim there is one connection thread.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- claim there is one connection thread.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INCREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Atomically increment the number of taskmaster requests.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INCREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- do nothing.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INCREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- do nothing.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DECREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Atomically decrement the number of taskmaster requests")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DECREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- do nothing.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DECREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Default method -- do nothing.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "START-THREAD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "THUNK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Start a name thread in which to call the THUNK, in the context of the given TASKMASTER.
Keyword arguments provide TASKMASTER-dependent options.
Return a thread object.

Hunchentoot taskmaster methods will call it with the taskmaster as the context,
allowing hunchentoot extensions to define specialized methods that may e.g.
wrap the thunk within a proper set of bindings and condition handlers.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "START-THREAD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "THUNK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "START-THREAD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "THUNK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "SINGLE-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :SUPER-CLASS-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "A taskmaster that runs synchronously in the thread
where the START function was invoked (or in the case of LispWorks in
the thread started by COMM:START-UP-SERVER).  This is the simplest
possible taskmaster implementation in that its methods do nothing but
calling their acceptor \"sister\" methods - EXECUTE-ACCEPTOR calls
ACCEPT-CONNECTIONS, HANDLE-INCOMING-CONNECTION calls
PROCESS-CONNECTION."
     :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXECUTE-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SINGLE-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT"
        :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-INCOMING-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SINGLE-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT"
        :EXTERNALP T))
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-MAX-THREAD-COUNT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE "100")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-MAX-ACCEPT-COUNT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "(+ HUNCHENTOOT::*DEFAULT-MAX-THREAD-COUNT* 20)")
    (:TYPE :CLASS :SYMBOL
     (:NAME "MULTI-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :SUPER-CLASS-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "An abstract class for taskmasters that use multiple threads.
For a concrete class to instantiate, use one-thread-per-connection-taskmaster."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPTOR-PROCESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-PROCESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "A process that accepts incoming connections and hands them off to new processes
     for request handling.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXECUTE-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "MULTI-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT"
        :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "MULTI-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
       T))
     :DOCUMENTATION "A taskmaster that starts one thread for listening
to incoming requests and one new thread for each incoming connection.

If MAX-THREAD-COUNT is null, a new thread will always be created for
each request.

If MAX-THREAD-COUNT is supplied, the number of request threads is
limited to that.  Furthermore, if MAX-ACCEPT-COUNT is not supplied, an
HTTP 503 will be sent if the thread limit is exceeded.  Otherwise, if
MAX-ACCEPT-COUNT is supplied, it must be greater than MAX-THREAD-COUNT;
in this case, requests are accepted up to MAX-ACCEPT-COUNT, and only
then is HTTP 503 sent.

It is important to note that MAX-ACCEPT-COUNT and the HTTP 503 behavior
described above is racing with the acceptor listen backlog. If we are receiving
requests faster than threads can be spawned and 503 sent, the requests will be
silently rejected by the kernel.

In a load-balanced environment with multiple Hunchentoot servers, it's
reasonable to provide MAX-THREAD-COUNT but leave MAX-ACCEPT-COUNT null.
This will immediately result in HTTP 503 when one server is out of
resources, so the load balancer can try to find another server.

In an environment with a single Hunchentoot server, it's reasonable
to provide both MAX-THREAD-COUNT and a somewhat larger value for
MAX-ACCEPT-COUNT.  This will cause a server that's almost out of
resources to wait a bit; if the server is completely out of resources,
then the reply will be HTTP 503.

This is the default taskmaster implementation for multi-threaded Lisp
implementations."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TASKMASTER-MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The maximum number of request threads this taskmaster will simultaneously
     run before refusing or queueing new connections requests.  If the value
     is null, then there is no limit.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The number of taskmaster processing threads currently running.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "THREAD-COUNT-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "TASKMASTER-THREAD-COUNT-LOCK" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION
       "In the absence of 'atomic-incf', we need this to atomically
     increment and decrement the request count.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TASKMASTER-MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The maximum number of connections this taskmaster will accept before refusing
     new connections.  If supplied, this must be greater than MAX-THREAD-COUNT.
     The number of queued requests is the difference between MAX-ACCEPT-COUNT
     and MAX-THREAD-COUNT.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TASKMASTER-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The number of connection currently accepted by the taskmaster. These
    connections are not ensured to be processed, thay may be waiting for an
    empty processing slot or rejected because the load is too heavy.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPT-COUNT-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "TASKMASTER-ACCEPT-COUNT-LOCK" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION
       "In the absence of 'atomic-incf', we need this to atomically
     increment and decrement the accept count.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WAIT-QUEUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "TASKMASTER-WAIT-QUEUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION
       "A queue that we use to wait for a free connection.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WAIT-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "TASKMASTER-WAIT-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION "The lock for the connection wait queue.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WORKER-THREAD-NAME-FORMAT" :PACKAGE-NAME "HUNCHENTOOT"
        :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "TASKMASTER-WORKER-THREAD-NAME-FORMAT" :PACKAGE-NAME
         "HUNCHENTOOT" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INIT-ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Ensure the if MAX-ACCEPT-COUNT is supplied, that it is greater than MAX-THREAD-COUNT.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INCREMENT-TASKMASTER-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DECREMENT-TASKMASTER-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INCREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "DECREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NOTE-FREE-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Note that a connection has been freed up")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WAIT-FOR-FREE-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION "Wait for a connection to be freed up")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TOO-MANY-TASKMASTER-REQUESTS" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CREATE-REQUEST-HANDLER-THREAD" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Create a thread for handling a single request")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHUTDOWN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHUTDOWN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-INCOMING-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-INCOMING-CONNECTION%" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME
        "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEND-SERVICE-UNAVAILABLE-REPLY" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A helper function to send out a quick error reply, before any state
is set up via PROCESS-REQUEST.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLIENT-AS-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "A helper function which returns the client's address and port as a
   string and tries to act robustly in the presence of network problems.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEFAULT-DOCUMENT-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SUB-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "To create a Hunchentoot webserver, you make an
instance of this class and use the generic function START to start it
(and STOP to stop it).  Use the :PORT initarg if you don't want to
listen on the default http port 80.  There are other initargs most of
which you probably won't need very often.  They are explained in
detail in the docstrings of the slot definitions for this class.

Unless you are in a Lisp without MP capabilities, you can have several
active instances of ACCEPTOR (listening on different ports) at the
same time."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS NIL
       :READERS
       ((:NAME "ACCEPTOR-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The port the acceptor is listening on.  The
default is 80.  Note that depending on your operating system you might
need special privileges to listen on port 80.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ADDRESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "ACCEPTOR-ADDRESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The address the acceptor is listening on.
If address is a string denoting an IP address, then the server only
receives connections for that address.  This must be one of the
addresses associated with the machine and allowed values are host
names such as \"www.zappa.com\" and address strings such as
\"72.3.247.29\".  If address is NIL, then the server will receive
connections to all IP addresses on the machine. This is the default.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ACCEPTOR-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The optional name of the acceptor, a symbol.
This name can be utilized when defining \"easy handlers\" - see
DEFINE-EASY-HANDLER.  The default name is an uninterned symbol as
returned by GENSYM.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQUEST-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-REQUEST-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Determines which class of request
objects is created when a request comes in and should be (a symbol
naming) a class which inherits from REQUEST.  The default is the
symbol REQUEST.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REPLY-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-REPLY-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Determines which class of reply
objects is created when a request is served in and should be (a
symbol naming) a class which inherits from REPLY.  The default is the
symbol REPLY.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "ACCEPTOR-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION "The taskmaster (i.e. an instance of a
subclass of TASKMASTER) that is responsible for scheduling the work
for this acceptor.  The default depends on the MP capabilities of the
underlying Lisp.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OUTPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-OUTPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "A generalized boolean denoting
whether the acceptor may use chunked encoding for output, i.e. when
sending data to the client.  The default is T and there's usually no
reason to change this to NIL.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "INPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-INPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "A generalized boolean denoting
whether the acceptor may use chunked encoding for input, i.e. when
accepting request bodies from the client.  The default is T and
there's usually no reason to change this to NIL.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PERSISTENT-CONNECTIONS-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-PERSISTENT-CONNECTIONS-P" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "A generalized boolean
denoting whether the acceptor supports persistent connections, which
is the default for threaded acceptors.  If this property is NIL,
Hunchentoot closes each incoming connection after having processed one
request.  This is the default for non-threaded acceptors.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "READ-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-READ-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :WRITERS NIL :DOCUMENTATION "The read timeout of the acceptor,
specified in (fractional) seconds.  The precise semantics of this
parameter is determined by the underlying Lisp's implementation of
socket timeouts.  NIL means no timeout.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "WRITE-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-WRITE-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :WRITERS NIL :DOCUMENTATION "The write timeout of the acceptor,
specified in (fractional) seconds.  The precise semantics of this
parameter is determined by the underlying Lisp's implementation of
socket timeouts.  NIL means no timeout.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LISTEN-SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-LISTEN-SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The socket listening for incoming
connections.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LISTEN-BACKLOG" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-LISTEN-BACKLOG" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :WRITERS NIL :DOCUMENTATION "Number of pending connections
          allowed in the listen socket before the kernel rejects
          further incoming connections.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPTOR-SHUTDOWN-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-SHUTDOWN-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "A flag that makes the acceptor
shutdown itself when set to something other than NIL.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQUESTS-IN-PROGRESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "ACCESSOR-REQUESTS-IN-PROGRESS" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "The number of
requests currently in progress.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SHUTDOWN-QUEUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-SHUTDOWN-QUEUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "A condition variable
used with soft shutdown, signaled when all requests
have been processed.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SHUTDOWN-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-SHUTDOWN-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "The lock protecting the shutdown-queue
condition variable and the requests-in-progress counter.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCESS-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-ACCESS-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Destination of the access log
which contains one log entry per request handled in a format similar
to Apache's access.log.  Can be set to a pathname or string
designating the log file, to a open output stream or to NIL to
suppress logging.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MESSAGE-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-MESSAGE-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Destination of the server
error log which is used to log informational, warning and error
messages in a free-text format intended for human inspection. Can be
set to a pathname or string designating the log file, to a open output
stream or to NIL to suppress logging.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ERROR-TEMPLATE-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-ERROR-TEMPLATE-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION "Directory pathname that
 contains error message template files for server-generated error
 messages.  Files must be named <return-code>.html with <return-code>
 representing the HTTP return code that the file applies to,
 i.e. 404.html would be used as the content for a HTTP 404 Not found
 response.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DOCUMENT-ROOT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR-DOCUMENT-ROOT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Directory pathname that points to
files that are served by the acceptor if no more specific
acceptor-dispatch-request method handles the request.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "PRINT-OBJECT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Starts the ACCEPTOR so that it begins accepting
connections.  Returns the acceptor.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "STOP" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SOFT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Stops the ACCEPTOR so that it no longer accepts
requests.  If SOFT is true, and there are any requests in progress,
wait until all requests are fully processed, but meanwhile do not
accept new requests.  Note that SOFT must not be set when calling
STOP from within a request handler, as that will deadlock.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "START-LISTENING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Sets up a listen socket for the given ACCEPTOR and
enables it to listen to incoming connections.  This function is called
from the thread that starts the acceptor initially and may return
errors resulting from the listening operation (like 'address in use'
or similar).")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPT-CONNECTIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "In a loop, accepts a connection and hands it over
to the acceptor's taskmaster for processing using
HANDLE-INCOMING-CONNECTION.  On LispWorks, this function returns
immediately, on other Lisps it retusn only once the acceptor has been
stopped.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INITIALIZE-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Can be used to modify the stream which is used to
communicate between client and server before the request is read.  The
default method of ACCEPTOR does nothing, but see for example the
method defined for SSL-ACCEPTOR.  All methods of this generic function
must return the stream to use.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "RESET-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Resets the stream which is used to communicate
between client and server after one request has been served so that it
can be used to process the next request.  This generic function is
called after a request has been processed and must return the
stream.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PROCESS-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "This function is called by the taskmaster when a
new client connection has been established.  Its arguments are the
ACCEPTOR object and a LispWorks socket handle or a usocket socket
stream object in SOCKET.  It reads the request headers, sets up the
request and reply objects, and hands over to PROCESS-REQUEST.  This is
done in a loop until the stream has to be closed or until a connection
timeout occurs.

It is probably not a good idea to re-implement this method until you
really, really know what you're doing.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "HANDLE-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This function is called once the request has been
read and a REQUEST object has been created.  Its job is to set up
standard error handling and request logging.

Might be a good place for around methods specialized for your subclass
of ACCEPTOR which bind or rebind special variables which can then be
accessed by your handlers.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-DISPATCH-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "This function is called to actually dispatch the
request once the standard logging and error handling has been set up.
ACCEPTOR subclasses implement methods for this function in order to
perform their own request routing.  If a method does not want to
handle the request, it is supposed to invoke CALL-NEXT-METHOD so that
the next ACCEPTOR in the inheritance chain gets a chance to handle the
request.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns a true value if ACCEPTOR uses SSL
connections.  The default is to unconditionally return NIL and
subclasses of ACCEPTOR must specialize this method to signal that
they're using secure connections - see the SSL-ACCEPTOR class.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "STOP" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SOFT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "RESET-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROCESS-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DO-WITH-ACCEPTOR-REQUEST-COUNT-INCREMENTED" :PACKAGE-NAME
      "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-ACCEPTOR-REQUEST-COUNT-INCREMENTED" :PACKAGE-NAME
      "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Execute BODY with ACCEPTOR-REQUESTS-IN-PROGRESS of ACCEPTOR
  incremented by one.  If the ACCEPTOR-SHUTDOWN-P returns true after
  the BODY has been executed, the ACCEPTOR-SHUTDOWN-QUEUE condition
  variable of the ACCEPTOR is signalled in order to finish shutdown
  processing.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ACCEPTOR-MAKE-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADERS-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "CONTENT-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "URI" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Make a REQUEST instance for the ACCEPTOR, setting up those slots
  that are determined from the SOCKET by calling the appropriate
  socket query functions.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PROCESS-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      ((:NAME "SOCKET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-LOG-ACCESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Function to call to log access to the acceptor.  The RETURN-CODE,
CONTENT and CONTENT-LENGTH keyword arguments contain additional
information about the request to log.  In addition, it can use the
standard request accessor functions that are available to handler
functions to find out more information about the request.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-LOG-ACCESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Default method for access logging.  It logs the information to the
destination determined by (ACCEPTOR-ACCESS-LOG-DESTINATION ACCEPTOR)
(unless that value is NIL) in a format that can be parsed by most
Apache log analysis tools.)")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-LOG-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "LOG-LEVEL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "FORMAT-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Function to call to log messages by the ACCEPTOR.  It must accept
a severity level for the message, which will be one of :ERROR, :INFO,
or :WARNING, a format string and an arbitary number of formatting
arguments.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-LOG-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "LOG-LEVEL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "FORMAT-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Default function to log server messages.  Sends a formatted message
  to the destination denoted by (ACCEPTOR-MESSAGE-LOG-DESTINATION
  ACCEPTOR).  FORMAT and ARGS are as in FORMAT.  LOG-LEVEL is a
  keyword denoting the log level or NIL in which case it is ignored.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-MESSAGE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOG-LEVEL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "FORMAT-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGUMENTS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Convenience function which calls the message logger of the current
acceptor (if there is one) with the same arguments it accepts.

This is the function which Hunchentoot itself uses to log errors it
catches during request processing.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "START-LISTENING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPT-CONNECTIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-DISPATCH-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
      T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "Detault implementation of the request dispatch method, generates an
+http-not-found+ error.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "HANDLE-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      ((:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION
     "Standard method for request handling.  Calls the request dispatcher
of *ACCEPTOR* to determine how the request should be handled.  Also
sets up standard error handling which catches any errors within the
handler.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-STATUS-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "HTTP-STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "This function is called after the request's handler has been
   invoked to convert the HTTP-STATUS-CODE to a HTML message to be
   displayed to the user.  If this function returns a string, that
   string is sent to the client instead of the content produced by the
   handler, if any.

   If an ERROR-TEMPLATE-DIRECTORY is set in the current acceptor and
   the directory contains a file corresponding to HTTP-STATUS-CODE
   named <code>.html, that file is sent to the client after variable
   substitution.  Variables are referenced by ${<variable-name>}.

   Additional keyword arguments may be provided which are made
   available to the templating logic as substitution variables.  These
   variables can be interpolated into error message templates in,
   which contains the current URL relative to the server and without
   GET parameters.

   In addition to the variables corresponding to keyword arguments,
   the script-name, lisp-implementation-type,
   lisp-implementation-version and hunchentoot-version variables are
   available.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-COOKED-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "HTTP-STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ERROR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BACKTRACE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-STATUS-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "HTTP-STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-STATUS-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "HTTP-STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-AS-KEYWORD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Intern STRING as keyword using the reader so that case conversion is done with the reader defaults.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-STATUS-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "HTTP-STATUS-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PROPERTIES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Default function to generate error message sent to the client.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-REMOVE-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
      (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION
     "This function is called whenever a session in ACCEPTOR is being
   destroyed because of a session timout or an explicit REMOVE-SESSION
   call.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-REMOVE-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      ((:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Default implementation for the session removal hook function.  This
function is called whenever a session is destroyed.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "ACCEPTOR-SERVER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Returns a string which can be used for 'Server' headers.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-SERVER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-SERVER-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
     :DOCUMENTATION "Create and START an instance of this class
(instead of ACCEPTOR) if you want an https server.  There are two
required initargs, :SSL-CERTIFICATE-FILE and :SSL-PRIVATEKEY-FILE, for
pathname designators denoting the certificate file and the key file in
PEM format.  On LispWorks, you can have both in one file in which case
the second initarg is optional.  You can also use the
:SSL-PRIVATEKEY-PASSWORD initarg to provide a password (as a string)
for the key file (or NIL, the default, for no password).

The default port for SSL-ACCEPTOR instances is 443 instead of 80"
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SSL-CERTIFICATE-FILE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-SSL-CERTIFICATE-FILE" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "A pathname designator for a
certificate file in PEM format.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SSL-PRIVATEKEY-FILE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-SSL-PRIVATEKEY-FILE" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "A pathname designator for a
private key file in PEM format, or (only on LispWorks) NIL if the
certificate file contains the private key.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SSL-PRIVATEKEY-PASSWORD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "ACCEPTOR-SSL-PRIVATEKEY-PASSWORD" :PACKAGE-NAME "HUNCHENTOOT"
         :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The password for the
private key file or NIL for no password.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "ACCEPTOR-SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITARGS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
       (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T))
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "+HTTP-GATEWAY-TIME-OUT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CREATE-REGEX-DISPATCHER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-STATUS-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-GC" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-PATH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "START-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HEADERS-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-INTERNAL-SERVER-ERROR+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "NO-CACHE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "AUX-REQUEST-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-METHOD*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-PROXY-AUTHENTICATION-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "HANDLE-IF-MODIFIED-SINCE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "MAYBE-INVOKE-DEBUGGER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "STOP" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*SHOW-LISP-BACKTRACES-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "DELETE-AUX-REQUEST-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SCRIPT-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-UNSUPPORTED-MEDIA-TYPE+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "RAW-POST-DATA" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REAL-REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REDIRECT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HEADER-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "TASKMASTER-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-MULTI-STATUS+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "RESET-SESSIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-MOVED-PERMANENTLY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HUNCHENTOOT-CONDITION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-FORBIDDEN+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIES-OUT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*LISP-WARNINGS-LOG-LEVEL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "GET-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-LOG-MESSAGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-EXPECTATION-FAILED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "ACCEPTOR-SSL-PRIVATEKEY-FILE" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "RESET-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "POST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-NOT-IMPLEMENTED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-MAX-AGE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-READ-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SET-COOKIE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*USE-REMOTE-ADDR-FOR-SESSIONS*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "ACCEPTOR-ACCESS-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "RESET-SESSION-SECRET" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*CATCH-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ONE-THREAD-PER-CONNECTION-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "SESSION-START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HEADERS-OUT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "RETURN-CODE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-HTTP-ONLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-ACCEPTED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-LENGTH-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-METHOD-NOT-ALLOWED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "START-THREAD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-RESET-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "RFC-1123-DATE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REFERER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "MIME-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "MULTI-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "ACCEPTOR-OUTPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "*HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "*SESSION-SECRET*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-URI" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-PERSISTENT-CONNECTIONS-P" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "*LISP-ERRORS-LOG-LEVEL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-WRITE-TIMEOUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-MULTIPLE-CHOICES+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "DECREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "HEADER-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "PROCESS-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-CREATED" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SCRIPT-NAME*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-VERIFY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*HEADER-STREAM*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HUNCHENTOOT-ERROR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "INCREMENT-TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "PROCESS-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*METHODS-FOR-POST-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "*FILE-UPLOAD-HOOK*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HANDLE-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REPLY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CREATE-PREFIX-DISPATCHER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*SESSION*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "POST-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-AUTHORIZATION-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "TASKMASTER-MAX-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "*DEFAULT-CONTENT-TYPE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-BAD-REQUEST+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*DISPATCH-TABLE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-BAD-GATEWAY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "LOCAL-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REPLY-EXTERNAL-FORMAT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*LOG-LISP-WARNINGS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-DOMAIN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HEADERS-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-SEE-OTHER+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REPLY-EXTERNAL-FORMAT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*REQUEST*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "QUERY-STRING*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-METHOD" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "EXECUTE-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-MAX-TIME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIES-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "TASKMASTER-THREAD-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "LOG-MESSAGE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SERVER-PROTOCOL*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-SWITCHING-PROTOCOLS+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "ACCEPTOR-ADDRESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-ERROR-TEMPLATE-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "HEADERS-OUT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-DISPATCH-REQUEST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "CLIENT-AS-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "GET-PARAMETERS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-NOT-MODIFIED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REMOTE-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-NOT-ACCEPTABLE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "URL-ENCODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-TOO-OLD-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-MESSAGE-LOG-DESTINATION" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "+HTTP-REQUEST-TIME-OUT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-DB-LOCK" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CREATE-FOLDER-DISPATCHER-AND-HANDLER" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "ABORT-REQUEST-HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "AUTHORIZATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "LOCAL-PORT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER" :PACKAGE-NAME
     "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "DISPATCH-EASY-HANDLERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-MOVED-TEMPORARILY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*SESSION-GC-FREQUENCY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-PAYMENT-REQUIRED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-REQUEST-URI-TOO-LARGE+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "+HTTP-NO-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUIRE-AUTHORIZATION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-VERSION-NOT-SUPPORTED+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "SINGLE-THREADED-TASKMASTER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "ACCEPTOR-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-SECURE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "WITHIN-REQUEST-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-PARTIAL-CONTENT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CONTENT-LENGTH*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "GET-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*HANDLE-HTTP-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REMOTE-PORT*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-DOCUMENT-ROOT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-OK+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HEADER-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "PARAMETER-ERROR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REASON-PHRASE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "DELETE-SESSION-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-CONTINUE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-URI*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-EXPIRES" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HOST" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HANDLE-INCOMING-CONNECTION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "DEFINE-EASY-HANDLER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*SESSION-MAX-TIME*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*HTTP-ERROR-HANDLER*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REMOTE-ADDR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-REQUEST-ENTITY-TOO-LARGE+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "CONTENT-TYPE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SET-COOKIE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REMOVE-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HUNCHENTOOT-WARNING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HANDLE-STATIC-FILE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ESCAPE-FOR-HTML" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*ACCEPTOR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "LOCAL-ADDR*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "START" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-PRECONDITION-FAILED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "+HTTP-SERVICE-UNAVAILABLE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "NEXT-SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "REQUEST-PATHNAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SEND-HEADERS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-SSL-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*SHOW-LISP-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*REWRITE-FOR-SESSION-URLS*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "*USE-USER-AGENT-FOR-SESSIONS*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "ACCEPT-CONNECTIONS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "HTTP-TOKEN-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "START-LISTENING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-REMOVE-SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*CONTENT-TYPES-FOR-URL-REWRITE*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "ACCEPTOR-REQUEST-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-REQUESTED-RANGE-NOT-SATISFIABLE+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "URL-DECODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "LOCAL-PORT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*DEFAULT-CONNECTION-TIMEOUT*" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "SESSION-DB" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-SSL-CERTIFICATE-FILE" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "USER-AGENT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "EASY-SSL-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-COOKIE-VALUE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*REPLY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-REMOTE-ADDR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIES-IN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*TMP-DIRECTORY*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-INPUT-CHUNKING-P" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "+HTTP-FAILED-DEPENDENCY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CREATE-REQUEST-HANDLER-THREAD" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "+HTTP-CONFLICT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-TEMPORARY-REDIRECT+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "ACCEPTOR-LOG-ACCESS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-SSL-PRIVATEKEY-PASSWORD" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "*LOG-LISP-BACKTRACES-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-GONE+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "DEFAULT-DOCUMENT-DIRECTORY" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "TASKMASTER-MAX-ACCEPT-COUNT" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP
     T)
    (:NAME "+HTTP-USE-PROXY+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "TOO-MANY-TASKMASTER-REQUESTS" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "INITIALIZE-CONNECTION-STREAM" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "+HTTP-CREATED+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*LOG-LISP-ERRORS-P*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "+HTTP-NOT-FOUND+" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "CONTENT-TYPE*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION-ID" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "POST-PARAMETER" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-REPLY-CLASS" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SESSION" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIES-IN*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "SHUTDOWN" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "ACCEPTOR-LISTEN-BACKLOG" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "*HUNCHENTOOT-VERSION*" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "COOKIE-NAME" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "EASY-ACCEPTOR" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "QUERY-STRING" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "RETURN-CODE" :PACKAGE-NAME "HUNCHENTOOT" :EXTERNALP T)
    (:NAME "RECOMPUTE-REQUEST-PARAMETERS" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "+HTTP-NON-AUTHORITATIVE-INFORMATION+" :PACKAGE-NAME "HUNCHENTOOT"
     :EXTERNALP T)))))
