
(:TYPE :SYSTEM :NAME "clack" :AUTHOR "Eitarow Fukamachi" :MAINTAINER NIL
 :VERSION "12.8.0" :LICENCE "LLGPL" :DESCRIPTION
 "Web application environment for Common Lisp" :LONG-DESCRIPTION
 "# Clack - Web Application Environment for Common Lisp

Clack is a web application environment for Common Lisp inspired by Python's WSGI and Ruby's Rack. Your awesome framework should base on this.

## Usage

    (defpackage simple-app
      (:use :cl
            :clack))
    (in-package :simple-app)
    
    (defvar *handler*
        (clackup
          #'(lambda (env)
              '(200 (:content-type \"text/plain\") (\"Hello, Clack!\")))))

Now access [http://localhost:5000/](http://localhost:5000/) and Clack should show you \"Hello, Clack!\".

To stop the server, execute `(clack:stop *handler*)`.

## Installation

Clack is available on [Quicklisp](http://www.quicklisp.org/beta/).

    (ql:quickload :clack)

## Documentation

- [Tutorial](http://clacklisp.org/tutorial/)
- [Quickdocs Page](http://quickdocs.org/clack/)

## Server

* [Hunchentoot](http://weitz.de/hunchentoot/)
* Apache2 ([mod_lisp2](http://www.fractalconcept.com/asp/69t3/sdataQvWkQvUi-GrHDM==/asdataQuvY9x3g$ecX))
* [FastCGI](http://www.fastcgi.com/)

## Middleware

Middleware is one of the Clack Component. It takes another Application and runs it.

### Bundle Middleware

* [Clack.Middleware.Static](http://quickdocs.org/clack/api#package-CLACK.MIDDLEWARE.STATIC) - Serves static files.
* [Clack.Middleware.Logger](http://quickdocs.org/clack/api#package-CLACK.MIDDLEWARE.LOGGER) - Logging in Clack Application or Middleware.
* [Clack.Middleware.Session](http://quickdocs.org/clack/api#package-CLACK.MIDDLEWARE.SESSION) - Session management.

### Contrib Middleware

* [Clack.Middleware.Dbi](http://quickdocs.org/clack/api#system-clack-middleware-dbi) - Middleware for CL-DBI connection management.
* [Clack.Middleware.Csrf](http://quickdocs.org/clack/api#system-clack-middleware-csrf) - Provides easy way to protect from CSRF.
* [Clack.Middleware.Auth.Basic](http://quickdocs.org/clack/api#system-clack-middleware-auth-basic) - Basic Authentication Middleware.
* [Clack.Middleware.Clsql](http://quickdocs.org/clack/api#system-clack-middleware-clsql) - For CLSQL connection management.
* [Clack.Middleware.Postmodern](http://quickdocs.org/clack/api#system-clack-middleware-postmodern) - Middleware for POSTMODERN connection management.
* [Clack.Middleware.Rucksack](http://quickdocs.org/clack/api#system-clack-middleware-rucksack) - For wrapping Rucksack transaction.
* [Clack.Middleware.OAuth](http://quickdocs.org/clack/api#system-clack-middleware-oauth) - Authorization by OAuth.

## Author

* Eitarow Fukamachi (e.arrows@gmail.com)

## Copyright

Copyright (c) 2011 Eitarow Fukamachi

## Contributors

* https://github.com/fukamachi/clack/graphs/contributors

## License

Licensed under the LLGPL License.
"
 :DEPENDS-ON
 ("TRIVIAL-TYPES" "ALEXANDRIA" "ANAPHORA" "SPLIT-SEQUENCE" "CL-SYNTAX"
  "CL-SYNTAX-ANNOT" "CL-PPCRE" "CL-FAD" "IRONCLAD" "RFC2388" "FLEXI-STREAMS"
  "LOCAL-TIME" "CIRCULAR-STREAMS" "MULTIVAL-PLIST" "YASON" "CL-BASE64"
  "MARSHAL" "TRIVIAL-BACKTRACE")
 :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CLACK" :FULL-NAME "CLACK" :DOCUMENTATION "# 
Clack main package just for convenience.


## SYNOPSIS

    (clackup (lambda (env)
               (declare (ignore env))
               '(200 nil (\"Hello, Clack!\")))
             :port 5000
             :debug t)

    (clackup #p\"app.lisp\"
             :server :fcgi
             :port 8080
             :debug nil)

## DESCRIPTION

Contrary to your expectations, this package is not so significant. Just exporting symbols imported from Clack.Component and Clack.Middleware.

This package is mostly just here to avoid confusion, especially for beginners. Most peaple expect there to be a package that has the same as asdf:system.

Worthy of special mention is `clackup'. It provides an easy way to run Clack Applications.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Component
* Clack.Middleware

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLACK-OUTPUT*" :PACKAGE-NAME "CLACK" :EXTERNALP T) :DOCUMENTATION
     "Standard output for a Clack running process." :INITIAL-VALUE
     "*STANDARD-OUTPUT*")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*CLACK-ERROR-OUTPUT*" :PACKAGE-NAME "CLACK" :EXTERNALP T)
     :DOCUMENTATION "Standard error output for a Clack running process."
     :INITIAL-VALUE "*ERROR-OUTPUT*")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CLACKUP" :PACKAGE-NAME "CLACK" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "CLACK" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CLACK" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SERVER" :PACKAGE-NAME "CLACK" :EXTERNALP NIL)
       (:NAME "HUNCHENTOOT" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      ((:NAME "PORT" :PACKAGE-NAME "CLACK" :EXTERNALP NIL) 5000)
      ((:NAME "DEBUG" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&ALLOW-OTHER-KEYS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "
Easy way to run Clack Application.
You can specify backend server with passing `:server'. The default is `:hunchentoot'.

Example:
  (clackup (lambda (env)
             (declare (ignore env))
             '(200 nil (\"ok\")))
           :port 5000
           :debug t)

  (clackup #p\"app.lisp\"
           :server :fcgi
           :port 8080
           :debug nil)
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EVAL-FILE" :PACKAGE-NAME "CLACK" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FILE" :PACKAGE-NAME "CLACK" :EXTERNALP NIL)) :DOCUMENTATION
     "Safer way to read and eval a file content. This function returns the last value."))
   :EXTERNAL-SYMBOLS
   ((:NAME "WRAP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
    (:NAME "CALL-NEXT" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
    (:NAME "MAKE-APP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "STOP" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T)
    (:NAME "CLACKUP" :PACKAGE-NAME "CLACK" :EXTERNALP T)
    (:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "*CLACK-ERROR-OUTPUT*" :PACKAGE-NAME "CLACK" :EXTERNALP T)
    (:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
    (:NAME "*CLACK-OUTPUT*" :PACKAGE-NAME "CLACK" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".BUILDER" :FULL-NAME "CLACK.BUILDER" :DOCUMENTATION "# 
Clack.Builder - Clack utility to build up from some Middleware and Application into one function.


## SYNOPSIS

    (builder
     <clack-middleware-logger>
     (<clack-middleware-static>
      :path \"/public/\"
      :root #p\"/static-files/\")
     app)

## DESCRIPTION

Clack.Builder allows you to write middlewares inline. It builds up with calling `wrap' of middlewares sequencially and returns a function also as an Application.

The following example is:

    (builder
     <clack-middleware-logger>
     (<clack-middleware-static>
      :path \"/public/\"
      :root #p\"/static-files/\")
     app)

same as below one.

    (wrap (make-instance '<clack-middleware-logger>)
          (wrap (make-instance '<clack-middleware-static>
                   :path \"/public/\"
                   :root #p\"/static-files/\")
                app))

`builder-lazy' is almost same as `builder', but it builds up every time when the Application calls.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*BUILDER-LAZY-P*" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T)
     :DOCUMENTATION "Flag whether using lazy building.
If t, build up for each HTTP request.
This is useful in development phase."
     :INITIAL-VALUE "NIL")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%BUILDER" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "APP-OR-MIDDLEWARE" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Wrap Clack application with middlewares and return it as one function.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BUILDER" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "APP-OR-MIDDLEWARE" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Some Middleware and Applications reduce into one function.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "BUILDER-LAZY" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "APP-OR-MIDDLEWARE" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Some Middleware and Applications reduce into one function. This evals given Components in each HTTP request time."))
   :EXTERNAL-SYMBOLS
   ((:NAME "BUILDER" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T)
    (:NAME "*BUILDER-LAZY-P*" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T)
    (:NAME "BUILDER-LAZY" :PACKAGE-NAME "CLACK.BUILDER" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".REQUEST" :FULL-NAME "CLACK.REQUEST" :DOCUMENTATION "# 
Clack.Request - Portable HTTP Request object for Clack Request.


## SYNOPSIS

    (defun app (env)
      (let ((req (make-request env)))
      `(200
        (:content-type \"text/plain\")
        (\"Hello, \" (query-parameter req \"name\")))))

## DESCRIPTION

Clack.Request provides a consistent API for request objects.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Portable HTTP Request object for Clack Request." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T) :ACCESSORS NIL
       :READERS ((:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "Raw env")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQUEST-METHOD" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REQUEST-METHOD" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The HTTP request method.
This must be one of :GET, :HEAD, :OPTIONS, :PUT, :POST, or :DELETE.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SCRIPT-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SCRIPT-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION
       "The initial portion of the request URL's path, corresponding to the application.
This may be an empty string if the application corresponds to the server's root URI. If this key is not empty, it must start with a forward slash (/).")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PATH-INFO" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "PATH-INFO" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The remainder of the request URL's path.
This may be an empty string if the request URL targets the application root and does not have a trailing slash.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERVER-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SERVER-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION
       "The resolved server name, or the server IP address.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERVER-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SERVER-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION
       "The port on which the request is being handled.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION
       "The version of the protocol the client used to send the request.
Typically this will be something like :HTTP/1.0 or :HTTP/1.1.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQUEST-URI" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REQUEST-URI" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION "The request URI. Must start with '/'.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "URI-SCHEME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "URI-SCHEME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REMOTE-ADDR" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REMOTE-ADDR" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REMOTE-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "REMOTE-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "QUERY-STRING" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "QUERY-STRING" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION
       "The portion of the request URL that follows the '?', if any.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RAW-BODY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "RAW-BODY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTENT-LENGTH" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONTENT-TYPE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CLACK-HANDLER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
       :ACCESSORS NIL :READERS
       ((:NAME "CLACK-HANDLER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HTTP-REFERER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "REFERER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HTTP-USER-AGENT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "USER-AGENT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
       :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HTTP-COOKIE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BODY-PARAMETERS" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "QUERY-PARAMETERS" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SHARED-RAW-BODY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION "Returns a shared raw-body, or returns nil if raw-body is
empty. This function modifies REQ to share raw-body among the
instances of <request>.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-REQUEST" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION "A synonym for (make-instance '<request> ...).
Make a <request> instance from environment plist. Raw-body of the instance
will be shared, meaning making an instance of <request> doesn't effect
on an original raw-body.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SECUREP" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COOKIES" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns cookies as a plist. If optional `name' is specified, returns the value that corresponds to it.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "BODY-PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return POST parameters as a plist. If optional `name' is specified, returns the value that corresponds to it.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "QUERY-PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns GET parameters as a plist. If optional `name' is specified, returns the value that corresponds to it.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns request parameters containing (merged) GET and POST parameters. If optional `name' is specified, returns the value that corresponds to it.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "GET-WHOLE-OR-SPECIFIED" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "REQ" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
       (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
      (:NAME "KEY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARAMETERS->PLIST" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PARAMS" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "DELIMITER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL) "&"))
     :DOCUMENTATION
     "Convert parameters into plist. The `params' must be a string.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-CONTENT-TYPE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T))
     :DOCUMENTATION "Parse Content-Type from Request header."))
   :EXTERNAL-SYMBOLS
   ((:NAME "SHARED-RAW-BODY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "MAKE-REQUEST" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "RAW-BODY" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "REFERER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "COOKIES" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "USER-AGENT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "PATH-INFO" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "CONTENT-TYPE" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "REMOTE-ADDR" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "ENV" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "CONTENT-LENGTH" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "SCRIPT-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "SERVER-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "SECUREP" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "BODY-PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "URI-SCHEME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "SERVER-PROTOCOL" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "REMOTE-PORT" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "<REQUEST>" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "QUERY-PARAMETER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "QUERY-STRING" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "SERVER-NAME" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "REQUEST-URI" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "CLACK-HANDLER" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)
    (:NAME "REQUEST-METHOD" :PACKAGE-NAME "CLACK.REQUEST" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".RESPONSE" :FULL-NAME "CLACK.RESPONSE" :DOCUMENTATION
   "# 
Clack.Response - Portable HTTP Response object for Clack response.


## SYNOPSIS

    (defvar res nil)
    
    (setf res (make-response 200))
    (setf res (make-response 200 '(:content-type \"text/html\")))
    (setf res (make-response 200 '(:content-type \"text/html\") '(\"aiueo\")))
    
    ;; Access each fields
    (status res)
    ;;=> 200
    (headers res)
    ;;=> (:content-type \"text/html\")
    (headers res :content-type)
    ;;=> \"text/html\"
    (body res)
    ;;=> (\"aiueo\")
    
    ;; Set to each fields
    (setf (status res) 304)
    (setf (headers res :content-type) \"text/plain\")
    (setf (body res) '(\"moved\"))
    (setf (body res) \"moved\") ;; string also allowed

## DESCRIPTION

Clack.Response allows you a way to create Clack response.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Portable HTTP Response object for Clack response." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STATUS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T) :ACCESSORS
       ((:NAME "STATUS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HEADERS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BODY" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T) :ACCESSORS
       NIL :READERS
       ((:NAME "BODY" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)) :WRITERS
       NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SET-COOKIES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STATUS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
      (:NAME "HEADERS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
     :DOCUMENTATION "A synonym for (make-instance '<response> ...).
Create a <response> instance.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "HEADERS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get all included headers, or the header value that corresponds to `name'.

Example:
  (headers res)
  ;;=> (:content-type \"text/plain\")
  (headers res :content-type)
  ;;=> \"text/plain\"")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "HEADERS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      ((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION "Set headers.

Example:
  (setf (headers res) '(:content-type \"text/html\"))
  (setf (headers res :content-type) \"text/html\")")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PUSH-HEADER" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "NAME" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      (:NAME "VALUE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION "Push the given header pair into response headers.
Example: (push-header res :content-type \"text/html\")")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      ((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)))
     :DOCUMENTATION "Set body with normalizing. body must be a list.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-COOKIES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Get whole of set-cookies plist or the set-cookie value of given name.

Example:
  (set-cookies res)
  ;;=> (:hoge \"1\")
  (set-cookies res :hoge)
  ;;=> \"1\"")
    (:TYPE :METHOD :SYMBOL
     ((:NAME "SETF" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SET-COOKIES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
     :LAMBDA-LIST
     ((:NAME "VALUE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      ((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION "Set set-cookies.

Example:
  (setf (set-cookies res) '(:hoge \"1\"))
  (setf (set-cookies res :hoge) \"1\")")
    (:TYPE :METHOD :SYMBOL
     (:NAME "REDIRECT" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "URL" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STATUS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T) 302))
     :DOCUMENTATION "Set headers for redirecting to given url.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)))
     :DOCUMENTATION
     "Return a Clack response list containing three values: status, headers, and body.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE-COOKIES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)))
     :DOCUMENTATION
     "Convert set-cookies into a header pair and push it into headers.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "BAKE-COOKIE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "RES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
       (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T))
      (:NAME "K" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL)
      (:NAME "V" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP NIL))
     :DOCUMENTATION "Create a string for Set-Cookie of the request header."))
   :EXTERNAL-SYMBOLS
   ((:NAME "STATUS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "REDIRECT" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "SET-COOKIES" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "HEADERS" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "PUSH-HEADER" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "<RESPONSE>" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "BODY" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)
    (:NAME "MAKE-RESPONSE" :PACKAGE-NAME "CLACK.RESPONSE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".COMPONENT" :FULL-NAME "CLACK.COMPONENT"
   :DOCUMENTATION "# 
Clack.Component - Base Class for Clack Component.


## SYNOPSIS

    (in-package :cl-user)
    (defpackage clack.app.example
      (:use :cl :clack)
      (:export :<clack-app-example>))
    (in-package :clack.app.example)
    
    (defclass <clack-app-example> (<component>) ())
    (defmethod call ((this <clack-app-example>) env)
      (declare (ignore this env))
      `(200 (:content-type \"text/plain\") (\"Hello, World!\")))

## DESCRIPTION

Clack.Component is the base class shared between Clack.Middleware and Clack Application.

You must implement `clack.component:call' as a method which is called when an HTTP request comes in and returns a response.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware

"
   :SYMBOL-LIST
   ((:TYPE :TYPE :SYMBOL
     (:NAME "COMPONENT-DESIGNATOR" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP
      T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :CLASS :SYMBOL
     (:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION
     "Base Class for Clack Component shared between <middleware> and Clack Application."
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "COMP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP NIL))
     :DOCUMENTATION
     "Invoke component. Designed to be overriden in subclasses.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "APP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP NIL))
     :DOCUMENTATION "Functions should be called like Component.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MAKE-APP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "COMP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP NIL)
       (:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)))
     :DOCUMENTATION "Create a function to call this component."))
   :EXTERNAL-SYMBOLS
   ((:NAME "MAKE-APP" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "COMPONENT-DESIGNATOR" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)
    (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE" :FULL-NAME "CLACK.MIDDLEWARE"
   :DOCUMENTATION "# 
Clack.Middleware - Base Class for Clack Middleware.


## SYNOPSIS

    (in-package :cl-user)
    (defpackage clack.middleware.example
      (:use :cl :clack)
      (:export :<clack-middleware-example>))
    (in-package :clack.middleware.example)
    
    (defclass <clack-middleware-example> (<middleware>) ())
    (defmethod call ((this <clack-middleware-example>) env)
      ;; pre-processing `env'
      (let ((res (call-next this env)))
        ;; post-processing `res'
        res))

## DESCRIPTION

Clack.Middleware is the base class to write Clack Middleware.

All you have to do is to inherit from `<middleware>' and then implement the callback `call' method to do the actual work.

Middleware is similar to ':around' method of CLOS. You can delegate some processes to Application (or next Middleware) to call `call-next'.

## AUTHOR

  Author: Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Component

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T))
     :DOCUMENTATION "Class for Clack Middleware." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "APP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP NIL) :ACCESSORS
       NIL :READERS
       ((:NAME "APP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP NIL)) :WRITERS
       NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL-NEXT" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP NIL)
       (:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP NIL))
     :DOCUMENTATION "Call next middleware or application.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRAP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP NIL)
       (:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
      (:NAME "APP-OR-MIDDLEWARE" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Compose `this' and the given application or middleware instance into one function.
This function takes a request plist."))
   :EXTERNAL-SYMBOLS
   ((:NAME "CALL-NEXT" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
    (:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)
    (:NAME "WRAP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".HANDLER" :FULL-NAME "CLACK.HANDLER" :DOCUMENTATION "# 
Clack.Handler - Class for Handler


## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<HANDLER>" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SERVER-NAME" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "SERVER-NAME" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ACCEPTOR" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ACCEPTOR" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "STOP" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP NIL)
       (:NAME "<HANDLER>" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T)))
     :DOCUMENTATION
     "Stop the Clack server. Currently only works with Hunchentoot."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<HANDLER>" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T)
    (:NAME "STOP" :PACKAGE-NAME "CLACK.HANDLER" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".HTTP-STATUS" :FULL-NAME "CLACK.HTTP-STATUS"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*HTTP-STATUS*" :PACKAGE-NAME "CLACK.HTTP-STATUS" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "(MAKE-HASH-TABLE :TEST #'EQL)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HTTP-STATUS-REASON" :PACKAGE-NAME "CLACK.HTTP-STATUS" :EXTERNALP
      T)
     :LAMBDA-LIST
     ((:NAME "CODE" :PACKAGE-NAME "CLACK.HTTP-STATUS" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "HTTP-STATUS-REASON" :PACKAGE-NAME "CLACK.HTTP-STATUS" :EXTERNALP T)
    (:NAME "*HTTP-STATUS*" :PACKAGE-NAME "CLACK.HTTP-STATUS" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".APP.FILE" :FULL-NAME "CLACK.APP.FILE" :DOCUMENTATION
   "# 
Clack.App.File - Serve static files.


## SYNOPSIS

    ;; THIS IS JUST FOR EXAMPLE
    (clackup (<clack-app-file>
              :root #p\"./static-files/\"))
    
    ;; Then access 'http://localhost/jellyfish.jpg' through into local './static-files/jellyfish.jpg'.
    ;; If the file isn't found, 404 will be returned.

## DESCRIPTION

Clack.App.File serves static files in local directory. This Application should be used in other Middleware or Application (ex. Clack.Middleware.Static).

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Static

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T))
     :DOCUMENTATION "Clack Application to serve static files." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ROOT" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "ROOT" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ENCODING" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "ENCODING" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "RETURN-403" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(403 (:CONTENT-TYPE \"text/plain\" :CONTENT-LENGTH 9) (\"forbidden\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "RETURN-400" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(400 (:CONTENT-TYPE \"text/plain\" :CONTENT-LENGTH 11) (\"Bad Request\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "RETURN-404" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(404 (:CONTENT-TYPE \"text/plain\" :CONTENT-LENGTH 9) (\"not found\"))")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHOULD-HANDLE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T))
      (:NAME "FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "LOCATE-FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T))
      (:NAME "PATH" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
      (:NAME "ROOT" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEXT-FILE-P" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "CONTENT-TYPE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SERVE-PATH" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
      (:NAME "FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL)
      (:NAME "ENCODING" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "SERVE-PATH" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
    (:NAME "SHOULD-HANDLE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
    (:NAME "LOCATE-FILE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
    (:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".APP.DIRECTORY" :FULL-NAME "CLACK.APP.DIRECTORY"
   :DOCUMENTATION "# 
Clack.App.Directory - Server static files from document root with directory index.


## SYNOPSIS

    ;; mount /var/www/ to http://localhost:5000/
    (clackup
     (make-instance '<clack-app-directory>
        :root #p\"/var/www/\")
     :port 5000)
    
    ;; same as above
    (clack.app.directory:start-server
       :root #p\"/var/www/\"
       :port 5000)

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.App.File

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-APP-DIRECTORY>" :PACKAGE-NAME "CLACK.APP.DIRECTORY"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<CLACK-APP-FILE>" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START-SERVER" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "ROOT" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
       ((:NAME "TRUENAME" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "."))
      ((:NAME "PORT" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL) 5000))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SHOULD-HANDLE" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-DIRECTORY>" :PACKAGE-NAME "CLACK.APP.DIRECTORY"
        :EXTERNALP T))
      (:NAME "FILE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SERVE-PATH" :PACKAGE-NAME "CLACK.APP.FILE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-DIRECTORY>" :PACKAGE-NAME "CLACK.APP.DIRECTORY"
        :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
      (:NAME "FILE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
      (:NAME "ENCODING" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIR-FILE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "FILE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "URI" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
      (:NAME "NAME" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL))
     :DOCUMENTATION "Stolen from rack/directory.rb.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DIR-PAGE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PATH-INFO" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
      (:NAME "BODY" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL))
     :DOCUMENTATION "Stolen from rack/directory.rb.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FILE-SIZE" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PATH" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return the size of the file at `path'. If `path' is a directory, this will return nil."))
   :EXTERNAL-SYMBOLS
   ((:NAME "START-SERVER" :PACKAGE-NAME "CLACK.APP.DIRECTORY" :EXTERNALP T)
    (:NAME "<CLACK-APP-DIRECTORY>" :PACKAGE-NAME "CLACK.APP.DIRECTORY"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".APP.URLMAP" :FULL-NAME "CLACK.APP.URLMAP"
   :DOCUMENTATION "# 
Clack.App.URLMap - Map multiple apps in different paths.


## SYNOPSIS

    (defparameter *urlmap* (make-instance '<clack-app-urlmap>))
    (mount *urlmap* \"/pc/\" #'app-for-pc)
    (mount *urlmap* \"/api/\" #'app-for-api)
    (call *urlmap* env)
    
    ;; Useful synonym.
    (builder-urlmap
      (\"/pc/\" #'app-for-pc)
      (\"/api/\" #'app-for-api))

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Builder

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-APP-URLMAP>" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<COMPONENT>" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T))
     :DOCUMENTATION "Class to map multiple apps in different paths." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "%MAPPING" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "MOUNT" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-URLMAP>" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP
        T))
      (:NAME "LOCATION" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL)
      (:NAME "APP" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL))
     :DOCUMENTATION "Register an `app' to the `location'.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL)
       (:NAME "<CLACK-APP-URLMAP>" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP
        T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :MACRO :SYMBOL
     (:NAME "BUILDER-URLMAP" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "APPS" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP NIL))
     :DOCUMENTATION "Useful syntax sugar for building applications."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-APP-URLMAP>" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T)
    (:NAME "MOUNT" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T)
    (:NAME "BUILDER-URLMAP" :PACKAGE-NAME "CLACK.APP.URLMAP" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".LOGGER" :FULL-NAME "CLACK.LOGGER" :DOCUMENTATION "# 
Clack.Logger - Logging utility for Clack.


## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Logger

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-OUTPUT*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION "DEPRECATED: use *logger-output-hook* for instead.
Output broadcast stream for loggers."
     :INITIAL-VALUE "(MAKE-STRING-OUTPUT-STREAM)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-OUTPUT-HOOK*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION "Callback function which will be invoked when logging."
     :INITIAL-VALUE "#'(LAMBDA (CLACK.LOGGER::MESSAGE) CLACK.LOGGER::MESSAGE)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-TIME-FORMAT*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION
     "Format list of timestamp in log messages. This is the same as LOCAL-TIME.
Default:
  11/Feb/2011:03:37:39 +09:00"
     :INITIAL-VALUE
     "'((:DAY 2) #\\/ :SHORT-MONTH #\\/ (:YEAR 4) #\\: (:HOUR 2) #\\: (:MIN 2) #\\:
  (:SEC 2) #\\  :GMT-OFFSET-OR-Z)")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-FORMAT-STRING*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP
      NIL)
     :DOCUMENTATION "Log format string for cl:format.
Example:
  11/Feb/2011:03:37:39 +09:00 [CRITICAL] Help me!!"
     :INITIAL-VALUE "\"~&~A [~:@(~A~)] ~A~%\"")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+DEBUG+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T) :DOCUMENTATION
     NIL :INITIAL-VALUE "0")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+INFO+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T) :DOCUMENTATION
     NIL :INITIAL-VALUE "1")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+NOTICE+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "2")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+WARNING+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "3")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ERROR+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T) :DOCUMENTATION
     NIL :INITIAL-VALUE "4")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+CRITICAL+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "5")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+ALERT+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T) :DOCUMENTATION
     NIL :INITIAL-VALUE "6")
    (:TYPE :CONSTANT :SYMBOL
     (:NAME "+EMERGENCY+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "7")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*LOGGER-MIN-LEVEL*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE "CLACK.LOGGER:+WARNING+")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOG-MESSAGE" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LEVEL" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL)
      (:NAME "FORMAT-CONTROL" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FORMAT-ARGS" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL))
     :DOCUMENTATION "
Output a log if the log level is more than `*logger-min-level*'.
Log level must be a integer 0-7, or a keyword represents log level.

Example:
  (log-message :warning \"Something wrong.\")")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NORMALIZE-LOGLEVEL" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "LEVEL" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL))
     :DOCUMENTATION "Log level is an integer or a keyword.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "KEYWORD->LOGLEVEL" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "KEY" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP NIL))
     :DOCUMENTATION
     "Convert a keyword that represents a log level into a number.
Example:
  (keyword->loglevel :notice)
  ;;=> 2"))
   :EXTERNAL-SYMBOLS
   ((:NAME "+INFO+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "*LOGGER-OUTPUT*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+WARNING+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "LOG-MESSAGE" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+ALERT+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+CRITICAL+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "*LOGGER-TIME-FORMAT*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "*LOGGER-OUTPUT-HOOK*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "*LOGGER-MIN-LEVEL*" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+NOTICE+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+DEBUG+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+EMERGENCY+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)
    (:NAME "+ERROR+" :PACKAGE-NAME "CLACK.LOGGER" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".LOGGER.BASE" :FULL-NAME "CLACK.LOGGER.BASE"
   :DOCUMENTATION "# 
Clack.Logger.Base - Base class for Clack loggers.


## DESCRIPTION

Clack.Logger.Base is base class for Clack loggers to pass to Clack.Middleware.Logger. All you have to do is to inherit `<clack-logger-base>' and then implement the method `output'.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Logger
* Clack.Logger.Stream

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-LOGGER-BASE>" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP
      T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION "Base class for Clack loggers."
     :SLOT-LIST NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "OUTPUT" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "LOGGER" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP NIL)
      (:NAME "MESSAGE" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Output log messages. All loggers must implement this method."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-LOGGER-BASE>" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP
     T)
    (:NAME "OUTPUT" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".LOGGER.STREAM" :FULL-NAME "CLACK.LOGGER.STREAM"
   :DOCUMENTATION "# 
Clack.Logger.Stream - Output log messages to stream.


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-logger>
               :logger (make-instance '<clack-logger-stream>))
              (lambda (env)
                (log-message :notice \"You've got an access!\")
                '(200 nil (\"ok\")))))

## DESCRIPTION

Clack.Logger.Stream is a logger the outputs log messages to a stream, using `*standard-output*' as the default.

This logger is used in Clack.Middleware.Logger as the default logger.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Logger.Base
* Clack.Middleware.Logger
* Clack.Logger

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-LOGGER-STREAM>" :PACKAGE-NAME "CLACK.LOGGER.STREAM"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<CLACK-LOGGER-BASE>" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP
       T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OUTPUT-STREAM" :PACKAGE-NAME "CLACK.LOGGER.STREAM" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "OUTPUT-STREAM" :PACKAGE-NAME "CLACK.LOGGER.STREAM" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "OUTPUT" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.LOGGER.STREAM" :EXTERNALP NIL)
       (:NAME "<CLACK-LOGGER-STREAM>" :PACKAGE-NAME "CLACK.LOGGER.STREAM"
        :EXTERNALP T))
      (:NAME "MESSAGE" :PACKAGE-NAME "CLACK.LOGGER.STREAM" :EXTERNALP NIL))
     :DOCUMENTATION "Output log messages to 'output-stream' in this slot."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-LOGGER-STREAM>" :PACKAGE-NAME "CLACK.LOGGER.STREAM"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".LOGGER.FILE" :FULL-NAME "CLACK.LOGGER.FILE"
   :DOCUMENTATION "# 
Clack.Logger.File - Output log messages to a file.


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-logger>
               :logger (make-instance '<clack-logger-file>
                          :output-file #p\"~/server.log\"))
              (lambda (env)
                (log-message :notice \"You've got an access!\")
                '(200 nil (\"ok\")))))

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Logger.Base
* Clack.Middleware.Logger
* Clack.Logger

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-LOGGER-FILE>" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP
      T)
     :SUPER-CLASS-LIST
     ((:NAME "<CLACK-LOGGER-BASE>" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP
       T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OUTPUT-FILE" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "OUTPUT-FILE" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Where to output log messages.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "OUTPUT" :PACKAGE-NAME "CLACK.LOGGER.BASE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP NIL)
       (:NAME "<CLACK-LOGGER-FILE>" :PACKAGE-NAME "CLACK.LOGGER.FILE"
        :EXTERNALP T))
      (:NAME "MESSAGE" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP NIL))
     :DOCUMENTATION "Output log messages to 'output-file' in this slot."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-LOGGER-FILE>" :PACKAGE-NAME "CLACK.LOGGER.FILE" :EXTERNALP
     T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.LOGGER" :FULL-NAME
   "CLACK.MIDDLEWARE.LOGGER" :DOCUMENTATION "# 
Clack.Middleware.Logger - Clack Middleware for logging.


## SYNOPSIS

    ;; Output log messages.
    (clackup (builder
              <clack-middleware-logger>
              (lambda (env)
                (log-message :notice \"You've got an access!\")
                '(200 nil (\"ok\")))))
    
    ;; Output log messages to other place.
    (clackup (builder
              (<clack-middleware-logger>
               :logger (make-instance '<clack-logger-file>))
              (lambda (env)
                (log-message :notice \"You've got an access!\")
                '(200 nil (\"ok\")))))

## DESCRIPTION

Clack.Middleware.Logger allows you to logg messages without stopping the Lisp process. You can customize the minimum level, format, and output destination of log messages.

Currently, Clack.Middleware.Logger can have only one logger. Sorry for the inconvenience.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Logger

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-LOGGER>" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION "Clack Middleware for logging." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "LOGGER" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "LOGGER" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Logger instance, inherits `<clack-logger-base>'.
If unspecified, `<clack-logger-stream>' will be used by default, and will output logs to `*standard-output*'.
If nil, won't output any logs.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MIN-LEVEL" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "MIN-LEVEL" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION
       "Minimum log level to output. See `clack.logger:*logger-min-level*'.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "TIME-FORMAT" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "TIME-FORMAT" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP
         NIL))
       :WRITERS NIL :DOCUMENTATION
       "Timestamp format string. See `clack.logger:*logger-time-format*'.")
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FORMAT-STRING" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER"
        :EXTERNALP NIL)
       :ACCESSORS NIL :READERS
       ((:NAME "FORMAT-STRING" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER"
         :EXTERNALP NIL))
       :WRITERS NIL :DOCUMENTATION
       "Log message format string. See `clack.logger:*logger-format-string*'.")))
    (:TYPE :MACRO :SYMBOL
     (:NAME "SETF-IF-SLOT-BOUND" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL)
      (:NAME "OBJECT" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL)
      (:NAME "SLOT" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL))
     :DOCUMENTATION "Set slot if the slot is uninitialized.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-LOGGER>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Set parameters in 'clack.logger'.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-LOGGER>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER" :EXTERNALP NIL))
     :DOCUMENTATION "Output log messages."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-LOGGER>" :PACKAGE-NAME "CLACK.MIDDLEWARE.LOGGER"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.STATIC" :FULL-NAME
   "CLACK.MIDDLEWARE.STATIC" :DOCUMENTATION "# 
Clack.Middleware.Static - Middleware to serve static files.


## SYNOPSIS

    (run
      (builder
       (<clack-middleware-static>
        :path \"/public/\"
        :root #p\"/static-files/\")
       app))

## DESCRIPTION

This is a Clack Middleware component for serving static files.

## Slots

* path (Required, String or Function)

<code>path</code> specifies the prefix of URL or a callback to match with requests to serve static files for.

Notice. Don't forget to add slush \"/\" to the end.

* root (Optional, Pathname)

<code>root</code> specifies the root directory to serve static files from.

## EXAMPLE

The following example code would serve */public/foo.jpg* from */static-files/foo.jpg*.

    (run
      (builder
       (<clack-middleware-static>
        :path \"/public/\"
        :root #p\"/static-files/\")
       app))

You can set any function that returns a mapped filename as <code>:path</code>. The above example can be rewritten as following code.

    (run
      (builder
       (<clack-middleware-static>
        :path (lambda (path)
                (when (ppcre:scan \"^/public/\" path)
                  (subseq path 7)))
        :root #p\"/static-files/\")
       app))

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.App.File

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-STATIC>" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION "Clack Middleware to intercept requests for static files."
     :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PATH" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "STATIC-PATH" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "ROOT" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "STATIC-ROOT" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-STATIC>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.STATIC" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL-APP-FILE" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-STATIC>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.STATIC" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC" :EXTERNALP NIL))
     :DOCUMENTATION "Call Clack.App.File."))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-STATIC>" :PACKAGE-NAME "CLACK.MIDDLEWARE.STATIC"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.JSON" :FULL-NAME "CLACK.MIDDLEWARE.JSON"
   :DOCUMENTATION NIL :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-JSON>" :PACKAGE-NAME "CLACK.MIDDLEWARE.JSON"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.JSON" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-JSON>" :PACKAGE-NAME "CLACK.MIDDLEWARE.JSON"
        :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.JSON" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-JSON>" :PACKAGE-NAME "CLACK.MIDDLEWARE.JSON"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.CONDITIONAL" :FULL-NAME
   "CLACK.MIDDLEWARE.CONDITIONAL" :DOCUMENTATION "# 
Clack.Middleware.Conditional - Conditional wrapper for Clack middleware.


## SYNOPSIS

    (builder
     (:condition (lambda (env)
                   (scan \"WebKit\" (getf env :http-user-agent)))
      :builder '<clack-middleware-something>)
     app)

    (builder
      (<clack-middleware-conditional>
       :condition (lambda (env)
                    (scan \"WebKit\" (getf env :http-user-agent)))
       :builder '(<clack-middleware-static>
                  :path \"/public/\"
                  :root #p\"/static-files/\"))
      app)

    (wrap
     (make-instance '<clack-middleware-conditional>
        :condition (lambda (env)
                     (scan \"WebKit\" (getf env :http-user-agent)))
        :builder '(<clack-middleware-something>
                   :path \"/public/\"
                   :root #p\"/static-files/\"))
     app)

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-CONDITIONAL>" :PACKAGE-NAME
      "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :ACCESSORS
       NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BUILDER" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
        NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "MIDDLEWARE" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL"
        :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-CONDITIONAL>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "WRAP" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-CONDITIONAL>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP T))
      (:NAME "APP" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-CONDITIONAL>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-CONDITIONAL>" :PACKAGE-NAME
     "CLACK.MIDDLEWARE.CONDITIONAL" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".SESSION.STATE" :FULL-NAME "CLACK.SESSION.STATE"
   :DOCUMENTATION "# 
Clack.Session.State - Basic parameter-based session state.


## DESCRIPTION

Clack.Session.State maintains session state by passing the session through the request params. Usually you wouldn't use this because this cannot keep session through each HTTP request. This is just for creating new session state manager.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Session

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
      :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SESSION-KEY" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "SESSION-KEY" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SID-GENERATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "SID-GENERATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SID-VALIDATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "SID-VALIDATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXPIRE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "VALID-SID-P" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXTRACT-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "GENERATE-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
        :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL)
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
     :EXTERNALP T)
    (:NAME "EXTRACT-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "VALID-SID-P" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "EXPIRE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "SID-VALIDATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "SESSION-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "GENERATE-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "SESSION-KEY" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "SID-GENERATOR" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".SESSION.STATE.COOKIE" :FULL-NAME
   "CLACK.SESSION.STATE.COOKIE" :DOCUMENTATION "# 
Clack.Session.State.Cookie - Basic cookie-based session state.


## DESCRIPTION

Clack.Session.State.Cookie will maintain session state using browser cookies.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Session.State
* Clack.Middleware.Session

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
      "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<CLACK-SESSION-STATE>" :PACKAGE-NAME "CLACK.SESSION.STATE"
       :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PATH" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "PATH" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "DOMAIN" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "DOMAIN" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "EXPIRES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
        T)
       :ACCESSORS
       ((:NAME "EXPIRES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SECURE" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
       :ACCESSORS
       ((:NAME "SECURE" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "HTTPONLY" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
        T)
       :ACCESSORS
       ((:NAME "HTTPONLY" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
         T))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "MERGE-OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
        "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXPIRE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
        "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SESSION-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
        "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
        "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SET-COOKIE" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
        "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP NIL)
      (:NAME "OPTIONS" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "SESSION-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "EXPIRES" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "<CLACK-SESSION-STATE-COOKIE>" :PACKAGE-NAME
     "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "EXTRACT-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "VALID-SID-P" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "EXPIRE" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)
    (:NAME "HTTPONLY" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "PATH" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "DOMAIN" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "SECURE" :PACKAGE-NAME "CLACK.SESSION.STATE.COOKIE" :EXTERNALP T)
    (:NAME "GENERATE-ID" :PACKAGE-NAME "CLACK.SESSION.STATE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".SESSION.STORE" :FULL-NAME "CLACK.SESSION.STORE"
   :DOCUMENTATION "# 
Clack.Session.Store - Basic in-memory session store.


## DESCRIPTION

Clack.Session.Store is a basic in-memory session data store. This is volatile storage and not recommended for multiprocessing environments. However, this is very useful for development and testing.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Session

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-SESSION-STORE>" :PACKAGE-NAME "CLACK.SESSION.STORE"
      :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STASH" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "STASH" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "FETCH" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STORE>" :PACKAGE-NAME "CLACK.SESSION.STORE"
        :EXTERNALP T))
      (:NAME "SID" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "STORE-SESSION" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STORE>" :PACKAGE-NAME "CLACK.SESSION.STORE"
        :EXTERNALP T))
      (:NAME "SID" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL)
      (:NAME "SESSION" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "REMOVE-SESSION" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL)
       (:NAME "<CLACK-SESSION-STORE>" :PACKAGE-NAME "CLACK.SESSION.STORE"
        :EXTERNALP T))
      (:NAME "SID" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "FETCH" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)
    (:NAME "REMOVE-SESSION" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)
    (:NAME "<CLACK-SESSION-STORE>" :PACKAGE-NAME "CLACK.SESSION.STORE"
     :EXTERNALP T)
    (:NAME "STORE-SESSION" :PACKAGE-NAME "CLACK.SESSION.STORE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.SESSION" :FULL-NAME
   "CLACK.MIDDLEWARE.SESSION" :DOCUMENTATION "# 
Clack.Middleware.Session - Middleware for session management.


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-session>
               :state (make-instance '<clack-session-state-cookie>))
              (lambda (env)
                (sunless (gethash :counter (getf env :clack.session))
                  (setf it 0))
                `(200
                  (:content-type \"text/plain\")
                  (,(format nil \"Hello, you've been here for ~Ath times!\"
                            (incf (gethash :counter (getf env :clack.session)))))))))

## DESCRIPTION

Clack.Middleware.Session provides a session interface. By default this will use cookies to keep session state and store data in memory.

You can change this behavior by inheriting `<clack-session-state>' and `<clack-session-store>'.

Note the `:clack.session' is a hash table, not a plist, because plists cannot keep state between functions.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Session.State
* Clack.Session.Store

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
      "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION "Clack Middleware for session management." :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STATE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "STATE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "STORE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "STORE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXTRACT" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION "Extract session id and state.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "FINALIZE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMMIT" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXPIRE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SAVE-STATE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
     "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.SESSION.COOKIE" :FULL-NAME
   "CLACK.MIDDLEWARE.SESSION.COOKIE" :DOCUMENTATION "# 
Clack.Middleware.Session.Cookie - Session middleware that saves session data in the cookie.


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-session-cookie>
               :secret \"secret key here\")
              app)

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* Clack.Middleware.Session
* Clack.Session.State

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
      "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<CLACK-MIDDLEWARE-SESSION>" :PACKAGE-NAME
       "CLACK.MIDDLEWARE.SESSION" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "SECRET" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
        :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "SECRET" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION
       "Server side secret to sign the session data using HMAC SHA1.")))
    (:TYPE :METHOD :SYMBOL
     (:NAME "EXTRACT" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SIGNATURE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T))
      (:NAME "BASE64" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SAVE-STATE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL)
      (:NAME "RES" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMMIT" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "SERIALIZE" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
        NIL)
       (:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T))
      (:NAME "ID" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP
       NIL)
      (:NAME "SESSION" :PACKAGE-NAME "CLACK.MIDDLEWARE.SESSION.COOKIE"
       :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-SESSION-COOKIE>" :PACKAGE-NAME
     "CLACK.MIDDLEWARE.SESSION.COOKIE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.LET" :FULL-NAME "CLACK.MIDDLEWARE.LET"
   :DOCUMENTATION "# 
Clack.Middleware.Let


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-let> :bindings '((*standard-output* *clack-output*)))
              (lambda (env)
                (format t \"You've got an access!~%\")
                '(200 nil (\"Hi!\")))))

## DESCRIPTION

Clack.Middleware.Let allows you to bind variables within each requests like `cl:let'.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-LET>" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET"
      :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "BINDINGS" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET" :EXTERNALP NIL)
       :ACCESSORS NIL :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-LET>" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET"
        :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-LET>" :PACKAGE-NAME "CLACK.MIDDLEWARE.LET"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".MIDDLEWARE.BACKTRACE" :FULL-NAME
   "CLACK.MIDDLEWARE.BACKTRACE" :DOCUMENTATION "# 
Clack.Middleware.Backtrace


## SYNOPSIS

    (clackup (builder
              (<clack-middleware-backtrace>
               :output #P\"/var/log/app/myapp_error.log\"
               :result-on-error '(500 () (\"Internal Server Error\")))
              (lambda (env)
                (error \"Fatal error! Help!!\")
                '(200 () (\"ok? (probably not)\")))))

## DESCRIPTION

Clack.Middleware.Backtrace catches all errors and outputs their backtraces to `*error-output*`. You can specify what to return in `:result-on-error` slot. The default behaviour is rethrowing the signal.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<CLACK-MIDDLEWARE-BACKTRACE>" :PACKAGE-NAME
      "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP T)
     :SUPER-CLASS-LIST
     ((:NAME "<MIDDLEWARE>" :PACKAGE-NAME "CLACK.MIDDLEWARE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "OUTPUT" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP
        NIL)
       :ACCESSORS
       ((:NAME "OUTPUT" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "RESULT-ON-ERROR" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE"
        :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "RESULT-ON-ERROR" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE"
         :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL" :PACKAGE-NAME "CLACK.COMPONENT" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-BACKTRACE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "CALL-WITH-BACKTRACE" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP NIL)
       (:NAME "<CLACK-MIDDLEWARE-BACKTRACE>" :PACKAGE-NAME
        "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP T))
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PRINT-ERROR" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "ERROR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ENV" :PACKAGE-NAME "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*ERROR-OUTPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "<CLACK-MIDDLEWARE-BACKTRACE>" :PACKAGE-NAME
     "CLACK.MIDDLEWARE.BACKTRACE" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.DOC" :FULL-NAME "CLACK.UTIL.DOC" :DOCUMENTATION
   "# 
Clack.Util.Doc - For writing Clack documentations.


## SYNOPSIS

    ;; Clear documentation of `*package*'.
    (doc:start)
    
    (doc:NAME \"
    Clack - Web Application Environment for Common Lisp
    \")
    
    (doc:DESCRIPTION \"
    Clack is a Web Application Environment for Common Lisp inspired by Python's WSGI and Ruby's Rack. Your awesome framework should base on this.
    \")

    ;; I recommend to use with cl-annot (https://github.com/arielnetworks/cl-annot).
    ;; It allows you to write docs by annotation-style.
    (cl-annot:enable-annot-syntax)
    
    (doc:start)
    
    @doc:NAME \"
    Clack - Web Application Environment for Common Lisp
    \"

## DESCRIPTION

Clack.Util.Doc enables easy writing package documentations with Markdown.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

## SEE ALSO

* [cl-annot](https://github.com/arielnetworks/cl-annot)

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*SECTION-PLIST*" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :DOCUMENTATION NIL :INITIAL-VALUE
     "'(:SYNOPSIS \"SYNOPSIS\" :EXPLANATION \"EXPLANATION\" :DEPENDENCIES \"DEPENDENCIES\"
  :DESCRIPTION \"DESCRIPTION\" :EXAMPLE \"EXAMPLE\" :SEE \"SEE ALSO\" :AUTHOR
  \"AUTHOR\" :CONTRIBUTORS \"CONTRIBUTORS\" :COPYRIGHT \"COPYRIGHT\" :LICENSE
  \"LICENSE\")")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "START" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) :DOCUMENTATION
     "Clear the docstring of `*package*'.
I recommend you to put `(doc:start)' before calling doc functions,
because they append sections duplicately when the packaged is reloaded.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DOC" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "HEADER" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "")
      ((:NAME "LEVEL" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP NIL) 1))
     :DOCUMENTATION "Set documentation to current package")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SECTION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "HEADER" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T) "")
      ((:NAME "LEVEL" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP NIL) 1))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NAME" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SYNOPSIS" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPLANATION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DEPENDENCIES" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DESCRIPTION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXAMPLE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SEE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "AUTHOR" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONTRIBUTORS" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPYRIGHT" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LICENSE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "SEE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "DOC" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "COPYRIGHT" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "SYNOPSIS" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "DESCRIPTION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "START" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "LICENSE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "NAME" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "SECTION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "EXPLANATION" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "*SECTION-PLIST*" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "EXAMPLE" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "DEPENDENCIES" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "CONTRIBUTORS" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)
    (:NAME "AUTHOR" :PACKAGE-NAME "CLACK.UTIL.DOC" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL" :FULL-NAME "CLACK.UTIL" :DOCUMENTATION "# 
Clack.Util - Utilities for Clack core or middleware development.


## DESCRIPTION

Most of time, Clack uses other utility libraries (ex. Alexandria), but I realized they were not enough for Clack.

See each description of these functions for detail.

## AUTHOR

Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :MACRO :SYMBOL
     (:NAME "NAMESPACE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAME" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to `defpackage', but the difference is ensure to be in :CL-USER before and to be in the new package after.
This may be useful for 'one-package-per-one-file' style.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NORMALIZE-KEY" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "NAME" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION "key must be a keyword.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "GETF*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to `getf' but allows many types for the `key', String, Keyword or Symbol.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "REMF*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PLACE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "KEY" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to `remf` but allows many types for the `key', String,
Keyword or Symbol.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NAPPEND" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST-OF-LIST" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Similar to `nconc` but assures `list` to be rewritten with the result.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MERGE-PLIST" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "P1" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "P2" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION "Merge two plist into one plist.
If same keys in two plist, second one will be adopted.

Example:
  (merge-plist '(:apple 1 :grape 2) '(:banana 3 :apple 4))
  ;;=> (:GRAPE 2 :BANANA 3 :APPLE 4)
")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIND-HANDLER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SERVER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "FORCE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Return a handler package. `server` must be a symbol or a keyword, not containing \"Clack.Handler.\" as a prefix.

Example:
  (find-handler :hunchentoot)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LOAD-HANDLER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "SERVER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Load a handler system in run-time. `server` must be a symbol or a keyword.

Example:
  (load-handler :hunchentoot)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HMAC-SHA1-HEX-STRING" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "SECRET" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "GENERATE-RANDOM-ID" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Generate a random token.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "HTML-ENCODE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "STR" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)) :DOCUMENTATION
     NIL)
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*TMP-DIRECTORY*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :DOCUMENTATION
     "Directory for temporary files created by MAKE-TMP-FILE-NAME."
     :INITIAL-VALUE "\"/tmp/hunchentoot/\"")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-TMP-FILE-NAME" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "PREFIX" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL) "clack"))
     :DOCUMENTATION "Generates a unique name for a temporary file.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-MIDDLEWARE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "APP" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "MW-CLASS-NAME" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "MW-PACKAGE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Apply a middleware to the `app'. This function is for resolving symbol packages in run-time."))
   :EXTERNAL-SYMBOLS
   ((:NAME "FIND-HANDLER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "HTML-ENCODE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "MAKE-TMP-FILE-NAME" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "LOAD-HANDLER" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "GETF*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "NAPPEND" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "APPLY-MIDDLEWARE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "*TMP-DIRECTORY*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "REMF*" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "HMAC-SHA1-HEX-STRING" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "GENERATE-RANDOM-ID" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "MERGE-PLIST" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)
    (:NAME "NAMESPACE" :PACKAGE-NAME "CLACK.UTIL" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.STREAM" :FULL-NAME "CLACK.UTIL.STREAM"
   :DOCUMENTATION "# 
Clack.Util.Stream - Useul streams


## DESCRIPTION


## AUTHOR

* Tomohiro Matsuyama (tomo@cx4a.org)

## CONTRIBUTORS

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :TYPE :SYMBOL
     (:NAME "OCTET" :PACKAGE-NAME "CLACK.UTIL.STREAM" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLURP-STREAM" :PACKAGE-NAME "CLACK.UTIL.STREAM" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SLURP-STREAM-TO-STRING" :PACKAGE-NAME "CLACK.UTIL.STREAM"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "CLACK.UTIL.STREAM" :EXTERNALP
        NIL)
       (:NAME "LATIN1" :PACKAGE-NAME "KEYWORD" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-CHARACTER-INPUT-STREAM" :PACKAGE-NAME "CLACK.UTIL.STREAM"
      :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "ENSURE-CHARACTER-INPUT-STREAM" :PACKAGE-NAME "CLACK.UTIL.STREAM"
     :EXTERNALP T)
    (:NAME "SLURP-STREAM" :PACKAGE-NAME "CLACK.UTIL.STREAM" :EXTERNALP T)
    (:NAME "SLURP-STREAM-TO-STRING" :PACKAGE-NAME "CLACK.UTIL.STREAM"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.LOCALTIME" :FULL-NAME "CLACK.UTIL.LOCALTIME"
   :DOCUMENTATION "# 
Clack.Util.Localtime - Ported functions from LOCAL-TIME.


## DESCRIPTION

LOCAL-TIME causes some problems sometimes. So I rewrote some functions for Clack.

This package provides following two functions.

* now
* format-rfc1123-timestring

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "NOW" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME" :EXTERNALP T)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION "Returns a timestamp representing the present moment.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FORMAT-RFC1123-TIMESTRING" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DESTINATION" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME" :EXTERNALP NIL)
      (:NAME "TIMESTAMP" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME" :EXTERNALP NIL))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "NOW" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME" :EXTERNALP T)
    (:NAME "FORMAT-RFC1123-TIMESTRING" :PACKAGE-NAME "CLACK.UTIL.LOCALTIME"
     :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.RFC2388" :FULL-NAME "CLACK.UTIL.RFC2388"
   :DOCUMENTATION "# 
Clack.Util.Rfc2388 - Ported from RFC2388.


## DESCRIPTION

`rfc2388:parse-mime` requires Hunchentoot package to parse multipart/form-data. This package provides a method `parse-mime` only for Clack.

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)

"
   :SYMBOL-LIST
   ((:TYPE :GENERIC :SYMBOL
     (:NAME "PARSE-MIME" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SOURCE" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
      (:NAME "BOUNDARY" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "WRITE-CONTENT-TO-FILE" :PACKAGE-NAME "CLACK.UTIL.RFC2388"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Parses MIME entities, returning them as a list.  Each element in the
    list is of form: (body headers), where BODY is the contents of MIME
    part, and HEADERS are all headers for that part.  BOUNDARY is a string
    used to separate MIME entities.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-MIME" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INPUT" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
       (:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "SEPARATOR" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WRITE-CONTENT-TO-FILE" :PACKAGE-NAME "CLACK.UTIL.RFC2388"
        :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARSE-MIME" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "INPUT" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
       (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "BOUNDARY" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "WRITE-CONTENT-TO-FILE" :PACKAGE-NAME "CLACK.UTIL.RFC2388"
        :EXTERNALP NIL)
       (:NAME "T" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL))
   :EXTERNAL-SYMBOLS
   ((:NAME "PARSE-MIME" :PACKAGE-NAME "CLACK.UTIL.RFC2388" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.HUNCHENTOOT" :FULL-NAME "CLACK.UTIL.HUNCHENTOOT"
   :DOCUMENTATION "# 
Clack.Util.Hunchentoot - Ported from Hunchentoot, Lisp Web server.


## DESCRIPTION

Hunchentoot is great product, but it is too huge as a Web server. It has also useful utility.
Though I don't like to Clack depends on Hunchentoot. So, I had decided to port needed utilities in Hunchentoot to this package.

From such details, only these function and variables, in this file, under BSD-style license, same as Hunchentoot's one.

Thanks Edi!

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)
* Dr. Edmund Weitz [Original Writer]

"
   :SYMBOL-LIST
   ((:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIME-TYPE-LIST*" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
      :EXTERNALP NIL)
     :DOCUMENTATION
     "An alist where the cars are MIME types and the cdrs are list
of file suffixes for the corresponding type."
     :INITIAL-VALUE
     "'((\"application/andrew-inset\" \"ez\") (\"application/cu-seeme\" \"cu\")
  (\"application/dsptype\" \"tsp\") (\"application/futuresplash\" \"spl\")
  (\"application/hta\" \"hta\") (\"application/java-archive\" \"jar\")
  (\"application/java-serialized-object\" \"ser\") (\"application/java-vm\" \"class\")
  (\"application/mac-binhex40\" \"hqx\") (\"application/mac-compactpro\" \"cpt\")
  (\"application/mathematica\" \"nb\") (\"application/msaccess\" \"mdb\")
  (\"application/msword\" \"doc\" \"dot\") (\"application/octet-stream\" \"bin\")
  (\"application/oda\" \"oda\") (\"application/ogg\" \"ogg\") (\"application/pdf\" \"pdf\")
  (\"application/pgp-keys\" \"key\") (\"application/pgp-signature\" \"pgp\")
  (\"application/pics-rules\" \"prf\") (\"application/postscript\" \"ps\" \"ai\" \"eps\")
  (\"application/rar\" \"rar\") (\"application/rdf+xml\" \"rdf\")
  (\"application/rss+xml\" \"rss\") (\"application/smil\" \"smi\" \"smil\")
  (\"application/wordperfect\" \"wpd\") (\"application/wordperfect5.1\" \"wp5\")
  (\"application/xhtml+xml\" \"xhtml\" \"xht\") (\"application/xml\" \"fo\" \"xml\" \"xsl\")
  (\"application/zip\" \"zip\") (\"application/vnd.cinderella\" \"cdy\")
  (\"application/vnd.mozilla.xul+xml\" \"xul\")
  (\"application/vnd.ms-excel\" \"xls\" \"xlb\" \"xlt\")
  (\"application/vnd.ms-pki.seccat\" \"cat\") (\"application/vnd.ms-pki.stl\" \"stl\")
  (\"application/vnd.ms-powerpoint\" \"ppt\" \"pps\")
  (\"application/vnd.oasis.opendocument.chart\" \"odc\")
  (\"application/vnd.oasis.opendocument.database\" \"odb\")
  (\"application/vnd.oasis.opendocument.formula\" \"odf\")
  (\"application/vnd.oasis.opendocument.graphics\" \"odg\")
  (\"application/vnd.oasis.opendocument.graphics-template\" \"otg\")
  (\"application/vnd.oasis.opendocument.image\" \"odi\")
  (\"application/vnd.oasis.opendocument.presentation\" \"odp\")
  (\"application/vnd.oasis.opendocument.presentation-template\" \"otp\")
  (\"application/vnd.oasis.opendocument.spreadsheet\" \"ods\")
  (\"application/vnd.oasis.opendocument.spreadsheet-template\" \"ots\")
  (\"application/vnd.oasis.opendocument.text\" \"odt\")
  (\"application/vnd.oasis.opendocument.text-master\" \"odm\")
  (\"application/vnd.oasis.opendocument.text-template\" \"ott\")
  (\"application/vnd.oasis.opendocument.text-web\" \"oth\")
  (\"application/vnd.rim.cod\" \"cod\") (\"application/vnd.smaf\" \"mmf\")
  (\"application/vnd.stardivision.calc\" \"sdc\")
  (\"application/vnd.stardivision.draw\" \"sda\")
  (\"application/vnd.stardivision.impress\" \"sdd\" \"sdp\")
  (\"application/vnd.stardivision.math\" \"smf\")
  (\"application/vnd.stardivision.writer\" \"sdw\" \"vor\")
  (\"application/vnd.stardivision.writer-global\" \"sgl\")
  (\"application/vnd.sun.xml.calc\" \"sxc\")
  (\"application/vnd.sun.xml.calc.template\" \"stc\")
  (\"application/vnd.sun.xml.draw\" \"sxd\")
  (\"application/vnd.sun.xml.draw.template\" \"std\")
  (\"application/vnd.sun.xml.impress\" \"sxi\")
  (\"application/vnd.sun.xml.impress.template\" \"sti\")
  (\"application/vnd.sun.xml.math\" \"sxm\")
  (\"application/vnd.sun.xml.writer\" \"sxw\")
  (\"application/vnd.sun.xml.writer.global\" \"sxg\")
  (\"application/vnd.sun.xml.writer.template\" \"stw\")
  (\"application/vnd.symbian.install\" \"sis\") (\"application/vnd.visio\" \"vsd\")
  (\"application/vnd.wap.wbxml\" \"wbxml\") (\"application/vnd.wap.wmlc\" \"wmlc\")
  (\"application/vnd.wap.wmlscriptc\" \"wmlsc\") (\"application/x-123\" \"wk\")
  (\"application/x-abiword\" \"abw\") (\"application/x-apple-diskimage\" \"dmg\")
  (\"application/x-bcpio\" \"bcpio\") (\"application/x-bittorrent\" \"torrent\")
  (\"application/x-cdf\" \"cdf\") (\"application/x-cdlink\" \"vcd\")
  (\"application/x-chess-pgn\" \"pgn\") (\"application/x-cpio\" \"cpio\")
  (\"application/x-csh\" \"csh\") (\"application/x-debian-package\" \"deb\" \"udeb\")
  (\"application/x-director\" \"dcr\" \"dir\" \"dxr\") (\"application/x-dms\" \"dms\")
  (\"application/x-doom\" \"wad\") (\"application/x-dvi\" \"dvi\")
  (\"application/x-flac\" \"flac\") (\"application/x-font\" \"pfa\" \"pfb\" \"gsf\" \"pcf\")
  (\"application/x-freemind\" \"mm\") (\"application/x-futuresplash\" \"spl\")
  (\"application/x-gnumeric\" \"gnumeric\") (\"application/x-go-sgf\" \"sgf\")
  (\"application/x-graphing-calculator\" \"gcf\")
  (\"application/x-gtar\" \"gtar\" \"tgz\" \"taz\") (\"application/x-hdf\" \"hdf\")
  (\"application/x-httpd-php\" \"phtml\" \"pht\" \"php\")
  (\"application/x-httpd-php-source\" \"phps\") (\"application/x-httpd-php3\" \"php3\")
  (\"application/x-httpd-php3-preprocessed\" \"php3p\")
  (\"application/x-httpd-php4\" \"php4\") (\"application/x-ica\" \"ica\")
  (\"application/x-internet-signup\" \"ins\" \"isp\") (\"application/x-iphone\" \"iii\")
  (\"application/x-iso9660-image\" \"iso\") (\"application/x-java-jnlp-file\" \"jnlp\")
  (\"application/x-javascript\" \"js\") (\"application/x-jmol\" \"jmz\")
  (\"application/x-kchart\" \"chrt\") (\"application/x-killustrator\" \"kil\")
  (\"application/x-koan\" \"skp\" \"skd\" \"skt\" \"skm\")
  (\"application/x-kpresenter\" \"kpr\" \"kpt\") (\"application/x-kspread\" \"ksp\")
  (\"application/x-kword\" \"kwd\" \"kwt\") (\"application/x-latex\" \"latex\")
  (\"application/x-lha\" \"lha\") (\"application/x-lzh\" \"lzh\")
  (\"application/x-lzx\" \"lzx\")
  (\"application/x-maker\" \"frm\" \"maker\" \"frame\" \"fm\" \"fb\" \"book\" \"fbdoc\")
  (\"application/x-mif\" \"mif\") (\"application/x-ms-wmd\" \"wmd\")
  (\"application/x-ms-wmz\" \"wmz\")
  (\"application/x-msdos-program\" \"com\" \"exe\" \"bat\" \"dll\")
  (\"application/x-msi\" \"msi\") (\"application/x-netcdf\" \"nc\")
  (\"application/x-ns-proxy-autoconfig\" \"pac\") (\"application/x-nwc\" \"nwc\")
  (\"application/x-object\" \"o\") (\"application/x-oz-application\" \"oza\")
  (\"application/x-pkcs7-certreqresp\" \"p7r\") (\"application/x-pkcs7-crl\" \"crl\")
  (\"application/x-python-code\" \"pyc\" \"pyo\")
  (\"application/x-quicktimeplayer\" \"qtl\")
  (\"application/x-redhat-package-manager\" \"rpm\") (\"application/x-sh\" \"sh\")
  (\"application/x-shar\" \"shar\") (\"application/x-shockwave-flash\" \"swf\" \"swfl\")
  (\"application/x-stuffit\" \"sit\") (\"application/x-sv4cpio\" \"sv4cpio\")
  (\"application/x-sv4crc\" \"sv4crc\") (\"application/x-tar\" \"tar\")
  (\"application/x-tcl\" \"tcl\") (\"application/x-tex-gf\" \"gf\")
  (\"application/x-tex-pk\" \"pk\") (\"application/x-texinfo\" \"texinfo\" \"texi\")
  (\"application/x-trash\" \"~%\" \"\" \"bak\" \"old\" \"sik\")
  (\"application/x-troff\" \"tt\" \"r\" \"roff\") (\"application/x-troff-man\" \"man\")
  (\"application/x-troff-me\" \"me\") (\"application/x-troff-ms\" \"ms\")
  (\"application/x-ustar\" \"ustar\") (\"application/x-wais-source\" \"src\")
  (\"application/x-wingz\" \"wz\") (\"application/x-x509-ca-cert\" \"crt\")
  (\"application/x-xcf\" \"xcf\") (\"application/x-xfig\" \"fig\")
  (\"application/x-xpinstall\" \"xpi\") (\"audio/basic\" \"au\" \"snd\")
  (\"audio/midi\" \"mid\" \"midi\" \"kar\")
  (\"audio/mpeg\" \"mpga\" \"mpega\" \"mp2\" \"mp3\" \"m4a\") (\"audio/mpegurl\" \"m3u\")
  (\"audio/prs.sid\" \"sid\") (\"audio/x-aiff\" \"aif\" \"aiff\" \"aifc\")
  (\"audio/x-gsm\" \"gsm\") (\"audio/x-mpegurl\" \"m3u\") (\"audio/x-ms-wma\" \"wma\")
  (\"audio/x-ms-wax\" \"wax\") (\"audio/x-pn-realaudio\" \"ra\" \"rm\" \"ram\")
  (\"audio/x-realaudio\" \"ra\") (\"audio/x-scpls\" \"pls\") (\"audio/x-sd2\" \"sd2\")
  (\"audio/x-wav\" \"wav\") (\"chemical/x-alchemy\" \"alc\")
  (\"chemical/x-cache\" \"cac\" \"cache\") (\"chemical/x-cache-csf\" \"csf\")
  (\"chemical/x-cactvs-binary\" \"cbin\" \"cascii\" \"ctab\") (\"chemical/x-cdx\" \"cdx\")
  (\"chemical/x-cerius\" \"cer\") (\"chemical/x-chem3d\" \"c3d\")
  (\"chemical/x-chemdraw\" \"chm\") (\"chemical/x-cif\" \"cif\")
  (\"chemical/x-cmdf\" \"cmdf\") (\"chemical/x-cml\" \"cml\")
  (\"chemical/x-compass\" \"cpa\") (\"chemical/x-crossfire\" \"bsd\")
  (\"chemical/x-csml\" \"csml\" \"csm\") (\"chemical/x-ctx\" \"ctx\")
  (\"chemical/x-cxf\" \"cxf\" \"cef\") (\"chemical/x-embl-dl-nucleotide\" \"emb\" \"embl\")
  (\"chemical/x-galactic-spc\" \"spc\")
  (\"chemical/x-gamess-input\" \"inp\" \"gam\" \"gamin\")
  (\"chemical/x-gaussian-checkpoint\" \"fch\" \"fchk\")
  (\"chemical/x-gaussian-cube\" \"cub\")
  (\"chemical/x-gaussian-input\" \"gau\" \"gjc\" \"gjf\")
  (\"chemical/x-gaussian-log\" \"gal\") (\"chemical/x-gcg8-sequence\" \"gcg\")
  (\"chemical/x-genbank\" \"gen\") (\"chemical/x-hin\" \"hin\")
  (\"chemical/x-isostar\" \"istr\" \"ist\") (\"chemical/x-jcamp-dx\" \"jdx\" \"dx\")
  (\"chemical/x-kinemage\" \"kin\") (\"chemical/x-macmolecule\" \"mcm\")
  (\"chemical/x-macromodel-input\" \"mmd\" \"mmod\") (\"chemical/x-mdl-molfile\" \"mol\")
  (\"chemical/x-mdl-rdfile\" \"rd\") (\"chemical/x-mdl-rxnfile\" \"rxn\")
  (\"chemical/x-mdl-sdfile\" \"sd\" \"sdf\") (\"chemical/x-mdl-tgf\" \"tgf\")
  (\"chemical/x-mmcif\" \"mcif\") (\"chemical/x-mol2\" \"mol2\")
  (\"chemical/x-molconn-Z\" \"b\") (\"chemical/x-mopac-graph\" \"gpt\")
  (\"chemical/x-mopac-input\" \"mop\" \"mopcrt\" \"mpc\" \"dat\" \"zmt\")
  (\"chemical/x-mopac-out\" \"moo\") (\"chemical/x-mopac-vib\" \"mvb\")
  (\"chemical/x-ncbi-asn1\" \"asn\") (\"chemical/x-ncbi-asn1-ascii\" \"prt\" \"ent\")
  (\"chemical/x-ncbi-asn1-binary\" \"val\" \"aso\")
  (\"chemical/x-ncbi-asn1-spec\" \"asn\") (\"chemical/x-pdb\" \"pdb\" \"ent\")
  (\"chemical/x-rosdal\" \"ros\") (\"chemical/x-swissprot\" \"sw\")
  (\"chemical/x-vamas-iso14976\" \"vms\") (\"chemical/x-vmd\" \"vmd\")
  (\"chemical/x-xtel\" \"xtel\") (\"chemical/x-xyz\" \"xyz\") (\"image/gif\" \"gif\")
  (\"image/ief\" \"ief\") (\"image/jpeg\" \"jpeg\" \"jpg\" \"jpe\") (\"image/pcx\" \"pcx\")
  (\"image/png\" \"png\") (\"image/svg+xml\" \"svg\" \"svgz\")
  (\"image/tiff\" \"tiff\" \"tif\") (\"image/vnd.djvu\" \"djvu\" \"djv\")
  (\"image/vnd.wap.wbmp\" \"wbmp\") (\"image/x-cmu-raster\" \"ras\")
  (\"image/x-coreldraw\" \"cdr\") (\"image/x-coreldrawpattern\" \"pat\")
  (\"image/x-coreldrawtemplate\" \"cdt\") (\"image/x-corelphotopaint\" \"cpt\")
  (\"image/x-icon\" \"ico\") (\"image/x-jg\" \"art\") (\"image/x-jng\" \"jng\")
  (\"image/x-ms-bmp\" \"bmp\") (\"image/x-photoshop\" \"psd\")
  (\"image/x-portable-anymap\" \"pnm\") (\"image/x-portable-bitmap\" \"pbm\")
  (\"image/x-portable-graymap\" \"pgm\") (\"image/x-portable-pixmap\" \"ppm\")
  (\"image/x-rgb\" \"rgb\") (\"image/x-xbitmap\" \"xbm\") (\"image/x-xpixmap\" \"xpm\")
  (\"image/x-xwindowdump\" \"xwd\") (\"model/iges\" \"igs\" \"iges\")
  (\"model/mesh\" \"msh\" \"mesh\" \"silo\") (\"model/vrml\" \"wrl\" \"vrml\")
  (\"text/calendar\" \"ics\" \"icz\") (\"text/comma-separated-values\" \"csv\")
  (\"text/css\" \"css\") (\"text/h323\" \"323\") (\"text/html\" \"html\" \"htm\" \"shtml\")
  (\"text/iuls\" \"uls\") (\"text/mathml\" \"mml\")
  (\"text/plain\" \"asc\" \"txt\" \"text\" \"diff\" \"pot\") (\"text/richtext\" \"rtx\")
  (\"text/rtf\" \"rtf\") (\"text/scriptlet\" \"sct\" \"wsc\") (\"text/texmacs\" \"tm\" \"ts\")
  (\"text/tab-separated-values\" \"tsv\")
  (\"text/vnd.sun.j2me.app-descriptor\" \"jad\") (\"text/vnd.wap.wml\" \"wml\")
  (\"text/vnd.wap.wmlscript\" \"wmls\") (\"text/x-bibtex\" \"bib\")
  (\"text/x-boo\" \"boo\") (\"text/x-c++hdr\" \"h++\" \"hpp\" \"hxx\" \"hh\")
  (\"text/x-c++src\" \"c++\" \"cpp\" \"cxx\" \"cc\") (\"text/x-chdr\" \"h\")
  (\"text/x-component\" \"htc\") (\"text/x-csh\" \"csh\") (\"text/x-csrc\" \"c\")
  (\"text/x-dsrc\" \"d\") (\"text/x-haskell\" \"hs\") (\"text/x-java\" \"java\")
  (\"text/javascript\" \"js\") (\"text/x-literate-haskell\" \"lhs\")
  (\"text/x-moc\" \"moc\") (\"text/x-pascal\" \"pp\" \"as\") (\"text/x-pcs-gcd\" \"gcd\")
  (\"text/x-perl\" \"pl\" \"pm\") (\"text/x-python\" \"py\") (\"text/x-setext\" \"etx\")
  (\"text/x-sh\" \"sh\") (\"text/x-tcl\" \"tcl\" \"tk\")
  (\"text/x-tex\" \"tex\" \"ltx\" \"sty\" \"cls\") (\"text/x-vcalendar\" \"vcs\")
  (\"text/x-vcard\" \"vcf\") (\"video/dl\" \"dl\") (\"video/dv\" \"dif\" \"dv\")
  (\"video/fli\" \"fli\") (\"video/gl\" \"gl\") (\"video/mpeg\" \"mpeg\" \"mpg\" \"mpe\")
  (\"video/mp4\" \"mp4\") (\"video/quicktime\" \"qt\" \"mov\")
  (\"video/vnd.mpegurl\" \"mxu\") (\"video/x-la-asf\" \"lsf\" \"lsx\")
  (\"video/x-mng\" \"mng\") (\"video/x-ms-asf\" \"asf\" \"asx\") (\"video/x-ms-wm\" \"wm\")
  (\"video/x-ms-wmv\" \"wmv\") (\"video/x-ms-wmx\" \"wmx\") (\"video/x-ms-wvx\" \"wvx\")
  (\"video/x-msvideo\" \"avi\") (\"video/x-sgi-movie\" \"movie\")
  (\"x-conference/x-cooltalk\" \"ice\") (\"x-world/x-vrml\" \"vrm\" \"vrml\" \"wrl\"))")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*MIME-TYPE-HASH*" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
      :EXTERNALP NIL)
     :DOCUMENTATION "A hash table which maps file suffixes to MIME types."
     :INITIAL-VALUE
     "(LET ((CLACK.UTIL.HUNCHENTOOT::HASH (MAKE-HASH-TABLE :TEST #'EQUALP)))
  (LOOP CLACK.UTIL.HUNCHENTOOT::FOR (TYPE
                                     . CLACK.UTIL.HUNCHENTOOT::SUFFIXES) CLACK.UTIL.HUNCHENTOOT::IN CLACK.UTIL.HUNCHENTOOT::*MIME-TYPE-LIST*
        DO (LOOP CLACK.UTIL.HUNCHENTOOT::FOR CLACK.UTIL.HUNCHENTOOT::SUFFIX CLACK.UTIL.HUNCHENTOOT::IN CLACK.UTIL.HUNCHENTOOT::SUFFIXES
                 DO (SETF (GETHASH CLACK.UTIL.HUNCHENTOOT::SUFFIX
                                   CLACK.UTIL.HUNCHENTOOT::HASH)
                            TYPE)))
  CLACK.UTIL.HUNCHENTOOT::HASH)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MIME-TYPE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PATHSPEC" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP NIL))
     :DOCUMENTATION "Given a pathname designator PATHSPEC returns the MIME type
(as a string) corresponding to the suffix of the file denoted by
PATHSPEC (or NIL).")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CONVERT-HACK" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "The rfc2388 package is buggy in that it operates on a character
stream and thus only accepts encodings which are 8 bit transparent.
In order to support different encodings for parameter values
submitted, we post process whatever string values the rfc2388 package
has returned.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARSE-RFC2388-FORM-DATA" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
      :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONTENT-TYPE-HEADER" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
       :EXTERNALP NIL)
      (:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
       :EXTERNALP NIL))
     :DOCUMENTATION
     "Creates an alist of POST parameters from the stream STREAM which is
supposed to be of content type 'multipart/form-data'.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
      :EXTERNALP NIL)
     :DOCUMENTATION "The external format used to compute the REQUEST object."
     :INITIAL-VALUE
     "(FLEXI-STREAMS:MAKE-EXTERNAL-FORMAT :UTF-8 :EOL-STYLE :LF)")
    (:TYPE :MACRO :SYMBOL
     (:NAME "UPGRADE-VECTOR" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "VECTOR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "NEW-TYPE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "CONVERTER" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP
       NIL))
     :DOCUMENTATION
     "Returns a vector with the same length and the same elements as
VECTOR (a variable holding a vector) but having element type
NEW-TYPE.  If CONVERTER is not NIL, it should designate a function
which will be applied to each element of VECTOR before the result is
stored in the new vector.  The resulting vector will have a fill
pointer set to its end.

The macro also uses SETQ to store the new vector in VECTOR.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "URL-DECODE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
        :EXTERNALP NIL)
       (:NAME "*DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Decodes a URL-encoded STRING which is assumed to be encoded using
the external format EXTERNAL-FORMAT.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "URL-ENCODE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "STRING" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "EXTERNAL-FORMAT" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
        :EXTERNALP NIL)
       (:NAME "*DEFAULT-EXTERNAL-FORMAT*" :PACKAGE-NAME
        "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP NIL)))
     :DOCUMENTATION
     "URL-encodes a string using the external format EXTERNAL-FORMAT."))
   :EXTERNAL-SYMBOLS
   ((:NAME "URL-DECODE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)
    (:NAME "PARSE-RFC2388-FORM-DATA" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT"
     :EXTERNALP T)
    (:NAME "MIME-TYPE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)
    (:NAME "URL-ENCODE" :PACKAGE-NAME "CLACK.UTIL.HUNCHENTOOT" :EXTERNALP T)))
  (:TYPE :PACKAGE :NAME ".UTIL.ROUTE" :FULL-NAME "CLACK.UTIL.ROUTE"
   :DOCUMENTATION "# 
Clack.Util.Route - Class for Sinatra-compatible URL rule.


## SYNOPSIS

    (defvar *url-rule* (make-url-rule \"/hello/:name\"))
    
    (match *url-rule* :GET \"/hello/fukamachi\")
    ;=> (NAME \"fukamachi\")
    (match *url-rule* \"/bye/fukamachi\")
    ;=> NIL
    
    (url-for *url-rule* '(:name \"fukamachi\"))
    ;=> \"/hello/fukamachi\"

## DESCRIPTION

Clack.Util.Route provides a Sinatra-compatible routing class.

### Named Parameter

    (match (make-url-rule \"/hello/:name\") :GET \"/hello/fukamachi\")
    ;=> \"/hello/fukamachi\"
        (:NAME \"fukamachi\")

### Wildcard Parameter

    (match (make-url-rule \"/say/*/to/*\") :GET \"/say/hello/to/world\")
    ;=> \"/say/hello/to/world\"
        (:SPLAT (\"hello\" \"world\"))

### Optional Parameter

    (match (make-url-rule \"/?:foo?/?:bar?\") :GET \"/hello/world\")
    ;=> \"/hello/world\"
        (:FOO \"hello\" :BAR \"world\")
    (match (make-url-rule \"/?:foo?/?:bar?\") :GET \"/hello\")
    ;=> \"/hello\"
        (:FOO \"hello\")
    (match (make-url-rule \"/?:foo?/?:bar?\") :GET \"/\")
    ;=> \"/\"
        NIL

### Regular Expression

    (match (make-url-rule \"/hello([\\w]+)\" :regexp t)
           :GET \"/hello/world\")
    ;=> \"/hello/world\"
        (:CAPTURES (\"world\"))

## AUTHOR

* Eitarow Fukamachi (e.arrows@gmail.com)
* Tomohiro Matsuyama (tomo@cx4a.org)

Note: `compile-rule` was originally written by Tomohiro Matsuyama as `parse-url-rule` in Clack.App.Route.

"
   :SYMBOL-LIST
   ((:TYPE :CLASS :SYMBOL
     (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
     :SUPER-CLASS-LIST NIL :DOCUMENTATION NIL :SLOT-LIST
     ((:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REQUEST-METHOD" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "REQUEST-METHOD" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "URL" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL) :ACCESSORS
       ((:NAME "URL" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)) :READERS
       NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "REGEX" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "REGEX" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "FORMAT-STRING" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "FORMAT-STRING" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
         NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)
      (:TYPE :CLASS-SLOT :SYMBOL
       (:NAME "PARAM-KEYS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       :ACCESSORS
       ((:NAME "PARAM-KEYS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
       :READERS NIL :WRITERS NIL :DOCUMENTATION NIL)))
    (:TYPE :CLASS :SYMBOL
     (:NAME "<REGEX-URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
     :SUPER-CLASS-LIST
     ((:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T))
     :DOCUMENTATION NIL :SLOT-LIST NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "MAKE-URL-RULE" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "URL" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "GET" :PACKAGE-NAME "KEYWORD" :EXTERNALP T))
      (:NAME "REGEXP" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Construct `<url-rule>` and return it. You must always use this function when you need `<url-rule>`.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INITIALIZE-INSTANCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<REGEX-URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
        NIL))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "COMPILE-RULE" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ESCAPE-SPECIAL-CHAR" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "CHAR" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH-METHOD-P" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T))
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-HEAD" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T))
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "URL-STRING" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-HEAD" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check whether the `url-string` matches to `this`. This method is for `<url-rule>`.
Return two values, matched URL and Rule parameters as a plist.
If the url-rule is containing Wildcard rules, they will be collected as :splat.

Example:
    (match (make-url-rule \"/hello/:name\") :GET \"/hello/fukamachi\")
    ;=> \"/hello/fukamachi\"
        (:NAME \"fukamachi\")

    (match (make-url-rule \"/say/*/to/*\") :ANY \"/say/hello/to/world\")
    ;=> \"/say/hello/to/world\"
        (:SPLAT (\"hello\" \"world\"))
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "MATCH" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "THIS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<REGEX-URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
        NIL))
      (:NAME "METHOD" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "URL-STRING" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ALLOW-HEAD" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check whether the `url-string` matches to `this`. This method is for `<regex-url-rule>`.
Return two values, matched URL and Rule parameters as a plist.
Captured strings in `url-string` are collected as :captures.

Example:
    (match (make-url-rule \"/hello/([\\w]+)\" :regexp t)
           :GET \"/hello/world\")
    ;=> \"/hello/world\"
        (:CAPTURES (\"world\"))
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "URL-FOR" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "URL-RULE" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T))
      (:NAME "PARAMS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION "Return an URL from a rule and parameters.

Example:
    (url-for (make-url-rule \"/hello/:name\")
             '(:name \"fukamachi\"))
    ;=> \"/hello/fukamachi\"
")
    (:TYPE :METHOD :SYMBOL
     (:NAME "URL-FOR" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "URL-RULE" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL)
       (:NAME "<REGEX-URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP
        NIL))
      (:NAME "PARAMS" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP NIL))
     :DOCUMENTATION "Return an URL from a rule and parameters.

Example:
    (url-for (make-url-rule \"/hello/:name\")
             '(:name \"fukamachi\"))
    ;=> \"/hello/fukamachi\"
"))
   :EXTERNAL-SYMBOLS
   ((:NAME "<URL-RULE>" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
    (:NAME "MATCH" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
    (:NAME "MAKE-URL-RULE" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)
    (:NAME "URL-FOR" :PACKAGE-NAME "CLACK.UTIL.ROUTE" :EXTERNALP T)))))
