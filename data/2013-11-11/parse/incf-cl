
(:TYPE :SYSTEM :NAME "incf-cl" :AUTHOR
 "Juan M. Bello Rivas <jmbr@superadditive.com>" :MAINTAINER NIL :VERSION NIL
 :LICENCE "X11" :DESCRIPTION
 "INCF CL is a library of convenience functions for Common Lisp"
 :LONG-DESCRIPTION NIL :DEPENDS-ON ("CL-PPCRE") :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "INCF-CL" :FULL-NAME "INCF-CL" :DOCUMENTATION NIL
   :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL (:NAME "$" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FUNCTIONS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the composition of FUNCTIONS.  Note that FUNCTIONS must
  be composable in the order specified.

  For example,

  INCF-CL> (funcall ($ (lambda (x) (* x x))
                       (lambda (x) (+ x 2)))
                    2)
  16

  INCF-CL> (funcall ($ #'values #'floor #'sqrt (lambda (x) (expt x 2))) -2)
  2")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "CANONICALIZE-TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a validated test function for those functions that use TEST
and TEST-NOT keyword arguments.")
    (:TYPE :MACRO :SYMBOL (:NAME "LC" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COLLECTION-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "QUANTIFIERS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Assembles a multiset containing the results of evaluating
COLLECTION-FORM and subject to QUANTIFIERS.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSLATE-COMPREHENSION" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTION-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "QUANTIFIERS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSLATE-GENERATOR-OR-FILTER" :PACKAGE-NAME "INCF-CL" :EXTERNALP
      NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTION-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "QUANTIFIERS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSLATE-GENERATOR" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTION-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "VARIABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "COLLECTION" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "QUANTIFIERS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TRANSLATE-FILTER" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTION-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "FILTER-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "QUANTIFIERS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ENSURE-AND-COPY-LIST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "X" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEST-LIST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUES" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "M" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) 1)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Returns a list of the results of applying FUNCTION successively to
INITIAL-VALUES and continuing until applying TEST (respectively
TEST-NOT) to the result is non NIL.

If M is specified, then NEST-LIST supplies the M most recent results
as arguments for TEST (respectivelly TEST-NOT) at each step.

If MAX is specified then FUNCTION is applied at most MAX times.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%NEST-LIST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUES" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "M" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "NEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUES" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "M" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) 1)
      (:NAME "MAX" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNFOLD" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TRANSFORMER" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INCREMENTOR" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAIL-GEN" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       ((:NAME "CONSTANTLY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION "Returns a list built following the pattern:

  transformer(initial-value), transformer(incrementor(initial-value)), ...

  Examples:

  1. List of squares: 1^2, ..., 10^2

  INCF-CL> (unfold (lambda (x) (> x 10)) (lambda (x) (expt x 2)) #'1+ 1)
  (1 4 9 16 25 36 49 64 81 100)

  2. Append (3 4 5) onto (1 2)

  INCF-CL> (unfold #'null #'first #'rest (list 1 2) (lambda (x)
                                                      (declare (ignore x))
                                                      (list 3 4 5)))
  (1 2 3 4 5)

  See also:
    http://srfi.schemers.org/srfi-1/srfi-1.html#unfold")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNFOLD-RIGHT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TRANSFORMER" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INCREMENTOR" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TAIL" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION "Returns a list built following the pattern:

  ... transformer(incrementor(initial-value)), transformer(initial-value)

  Examples:

  1. List of squares: 1^2, ..., 10^2

  INCF-CL> (unfold-right #'zerop (lambda (x) (* x x)) #'1- 10)
  (1 4 9 16 25 36 49 64 81 100)

  2. Reverse a proper list:

  INCF-CL> (unfold-right #'null #'first #'rest (list 1 2 3 4 5))
  (5 4 3 2 1)

  See also:
    http://srfi.schemers.org/srfi-1/srfi-1.html#unfold-right")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "RANGE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "A" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "B" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "C" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :TYPE :SYMBOL
     (:NAME "FUNCTION-OR-NULL" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "APPLY-KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIRST-WITH" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "BREAK*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Given a PREDICATE and a LIST, breaks LIST into two
lists (returned as VALUES) at the point where PREDICATE is first
satisfied.  If PREDICATE is never satisfied then the first returned
value is the entire LIST and the second element is NIL.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "BREAK*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "CYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Returns a circular list containing the elements in
LIST (which should be a proper list).")
    (:TYPE :METHOD :SYMBOL (:NAME "CYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL (:NAME "CYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NCYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)) :DOCUMENTATION
     "Destructive version of CYCLE.  Again, keep in mind
  that LIST must be a proper list.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NCYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "NCYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL (:NAME "DROP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Applied to N (a non-negative integer) and LIST,
returns the list with the specified number of elements removed from
the front of LIST.  If LIST has less than N elements then it returns
NIL.")
    (:TYPE :METHOD :SYMBOL (:NAME "DROP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "DROP-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Applied to PREDICATE and LIST, removes elements
from the front of LIST while PREDICATE is satisfied.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "DROP-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "PARTITION" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Applied to PREDICATE and LIST, returns two values: a list
containing all the elements from LIST that satisfy PREDICATE, and its
complementary list.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "PARTITION" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FLIP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "F" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)) :DOCUMENTATION
     "Applied to a binary function F, returns the same function with the
order of the arguments reversed.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INSERT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Inserts X before the first element in LIST which is
greater than X.  The order relation can be specified by either one of
the keyword arguments TEST and TEST-NOT.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INSERT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "X" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "<" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "REPLICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "X" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Returns a list contaning N times the value X")
    (:TYPE :GENERIC :SYMBOL (:NAME "SPAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Splits LIST into two lists (returned as VALUES)
such that elements in the first list are taken from the head of LIST
while PREDICATE is satisfied, and elements in the second list are the
remaining elements from LIST once PREDICATE is not satisfied.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL (:NAME "SPAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SPLIT-AT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Given a non-negative integer N and LIST, splits
LIST into two lists (returned as VALUES) at the position corresponding
to the given integer.  If N is greater than the length of LIST, it
returns the entire list first and the empty list second in VALUES.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "SPLIT-AT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL (:NAME "TAKE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Applied to the integer N and LIST, returns the specified number of
elements from the front of LIST.  If LIST has less than N elements,
TAKE returns the entire LIST.")
    (:TYPE :METHOD :SYMBOL (:NAME "TAKE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "N" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "TAKE-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Applied to PREDICATE and LIST, returns a list
containing elements from the front of LIST while PREDICATE is
satisfied.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "TAKE-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "PREDICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "UNZIP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ALIST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)) :DOCUMENTATION
     "Applied to the association list ALIST, returns two lists (as
VALUES) containing the keys and values of each element in ALIST
respectively.  This function is the inverse of PAIRLIS.")
    (:TYPE :GENERIC :SYMBOL
     (:NAME "SCAN*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "FROM-END" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "SCAN* is similar to REDUCE, but returns a list of
  successive reduced values:

  (scan* f (list x1 x2 ...) :initial-value z)
  ==> (z (funcall f z x1) (funcall f (funcall f z x1) x2) ...)

  (scan* f (list x1 x2 ...))
  ==> (x1 (funcall f x1 x2) (funcall f (funcall f x1 x2) x2) ...)

  (scan* f (list x1 ... x_n-1 x_n) :initial-value z :from-end t)
  ==> (... (funcall f x_n-1 (funcall f x_n z)) (funcall f x_n z) z)

  (scan* f (list x1 ... x_n-1 x_n) :from-end t)
  ==> (... (funcall f x_n-1 (funcall f x_n-1 x_n)) (funcall f x_n-1 x_n) x_n)

  Examples:

  INCF-CL> (scan* #'/ (list 4 2 4) :initial-value 64)
  (64 16 8 2)

  INCF-CL> (scan* #'max (range 1 7) :initial-value 5)
  (5 5 5 5 5 5 6 7)

  INCF-CL> (scan* (lambda (x y) (+ (* 2 x) y)) (list 1 2 3) :initial-value 4)
  (4 9 20 43)

  INCF-CL> (scan* #'+ (list 1 2 3 4))
  (1 3 6 10)

  INCF-CL> (scan* #'+ (list 1 2 3 4) :initial-value 5 :from-end t)
  (15 14 12 9 5)

  INCF-CL> (scan* #'+ (list 1 2 3 4) :from-end t)
  (10 9 7 4)")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCAN-LEFT*" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "IVP" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SCAN-RIGHT*" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "IVP" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL (:NAME "SCAN*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "FROM-END" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "IVP" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "INTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Returns a list where ELEMENT is interspersed
between the elements of SEQUENCE.

  For example,

  INCF-CL> (intersperse 'x (replicate 3 'z))
  (Z X Z X Z)")
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "INTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "CONS" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "NINTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Destructive version of INTERSPERSE.")
    (:TYPE :METHOD :SYMBOL
     (:NAME "NINTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "ELEMENT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "GROUP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Returns a list of lists where every item in each
sublist satisfies TEST and the concatenation of the result is equal to
LIST.

  KEY is a designator for a function of one argument, or NIL.  If KEY
is supplied, it is applied once to each element of LIST before it is
passed to PREDICATE.  If it is not supplied or is NIL, the element of
LIST itself is used.

  For example,

  INCF-CL> (mapcar (lambda (x) (concatenate 'string x))
                   (group (coerce \"Mississippi\" 'list)))
  (\"M\" \"i\" \"ss\" \"i\" \"ss\" \"i\" \"pp\" \"i\")")
    (:TYPE :METHOD :SYMBOL (:NAME "GROUP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      ((:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "TEST-NOT" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :GENERIC :SYMBOL
     (:NAME "UNSCAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Semi-inverse of SCAN*.

  INCF-CL> (equal (unscan (flip #'-) (scan* #'+ '(1 2 3)) :initial-value 0)
                  '(1 2 3))
  T")
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNSCAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NULL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :METHOD :SYMBOL
     (:NAME "UNSCAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     (((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "FIXED-POINT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "INITIAL-VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "TEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "MAX-STEPS" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the fixed point of FUNCTION starting with INITIAL-VALUE.
The keyword argument TEST determines when a fixed point has been
reached.  Use MAX-STEPS to stop after a certain (positive) number of
iterations.

For example, the square root of 2 using Newton's method can be
computed as:

INCF-CL> (fixed-point (lambda (x)
                        (float (- x (/ (- (expt x 2) 2) (* 2 x)))))
                      1)
1.4142135

INCF-CL> (sqrt 2)
1.4142135")
    (:TYPE :MACRO :SYMBOL (:NAME "DOHASH" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "KEY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "VALUE" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
       (:NAME "HASH-TABLE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       ((:NAME "RESULT-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
        (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION
     "DOHASH iterates over the keys and values of HASH-TABLE.  It returns
NIL or the result of evaluating RESULT-FORM if it was specified.")
    (:TYPE :MACRO :SYMBOL (:NAME "WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE-FORM" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION "Executes BODY while PREDICATE-FORM is non NIL.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "STRING-JOIN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "LIST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "SEP" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL) " "))
     :DOCUMENTATION
     "Returns a string joining each string in LIST by SEP.  If SEP is not
specified, the default separator is a space.")
    (:TYPE :VARIABLE :SYMBOL
     (:NAME "*DOCTEST-SHOW-PROGRESS*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :DOCUMENTATION
     "Determines if a dot will be displayed for each passed test."
     :INITIAL-VALUE "T")
    (:TYPE :MACRO :SYMBOL
     (:NAME "SIGNALS-P" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "CONDITION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns T if evaluating BODY results in CONDITION being signalled,
NIL otherwise.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-DOCSTRING" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "DOCUMENTATION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Returns T if the first doctest found in DOCUMENTATION passes,
signals DOCTEST-FAILURE otherwise.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "TEST-FUNCTION" :PACKAGE-NAME "INCF-CL" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Returns T if every test in FUNCTION's docstring passes, NIL
otherwise.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "DOCTEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SYMBOL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "*STANDARD-OUTPUT*" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "If SYMBOL corresponds to a function, then its documentation string
is tested and the results are printed to STREAM.  If SYMBOL refers to
a package, then all the functions corresponding to the external
symbols in the package are tested.  
DOCTEST returns T if the tests succeed, NIL otherwise.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIST-EXTERNAL-SYMBOLS" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Returns a list containing all the exported symbols in PACKAGE.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "LIST-ALL-SYMBOLS" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
     :LAMBDA-LIST ((:NAME "PACKAGE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Returns a list containing all the symbols in PACKAGE."))
   :EXTERNAL-SYMBOLS
   ((:NAME "SIGNALS-P" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "SPAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "INSERT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "NEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "SCAN*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "NCYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "UNSCAN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "DOHASH" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "TAKE-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "REPLICATE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "DROP-WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "INTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "GROUP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "STRING-JOIN" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "NINTERSPERSE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "UNZIP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "DROP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "LIST-ALL-SYMBOLS" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "$" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "RANGE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "<-" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "TAKE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "WHILE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "LC" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "*DOCTEST-SHOW-PROGRESS*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "DOCTEST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "UNFOLD-RIGHT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "NEST-LIST" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "ASSEMBLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "FLIP" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "SPLIT-AT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "UNFOLD" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "LIST-EXTERNAL-SYMBOLS" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "CYCLE" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "BREAK*" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "FIXED-POINT" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)
    (:NAME "PARTITION" :PACKAGE-NAME "INCF-CL" :EXTERNALP T)))))
