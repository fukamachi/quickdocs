
(:TYPE :SYSTEM :NAME "cl-utilities" :AUTHOR "Maintained by Peter Scott"
 :MAINTAINER NIL :VERSION NIL :LICENCE NIL :DESCRIPTION NIL :LONG-DESCRIPTION
 NIL :DEPENDS-ON NIL :PACKAGE-LIST
 ((:TYPE :PACKAGE :NAME "CL-UTILITIES" :FULL-NAME "CL-UTILITIES" :DOCUMENTATION
   NIL :SYMBOL-LIST
   ((:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "DELIMITER" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "TEST" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TEST-SUPPLIED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      ((:NAME "TEST-NOT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "TEST-NOT-SUPPLIED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in seq delimited by delimiter.

If :remove-empty-subseqs is NIL, empty subsequences will be included
in the result; otherwise they will be discarded.  All other keywords
work analogously to those for CL:SUBSTITUTE.  In particular, the
behaviour of :from-end is possibly different from other versions of
this function; :from-end values of NIL and T are equivalent unless
:count is supplied. The second return value is an index suitable as an
argument to CL:SUBSEQ into the sequence indicating where processing
stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in seq delimited by items satisfying
predicate.

If :remove-empty-subseqs is NIL, empty subsequences will be included
in the result; otherwise they will be discarded.  All other keywords
work analogously to those for CL:SUBSTITUTE-IF.  In particular, the
behaviour of :from-end is possibly different from other versions of
this function; :from-end values of NIL and T are equivalent unless
:count is supplied. The second return value is an index suitable as an
argument to CL:SUBSEQ into the sequence indicating where processing
stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "SEQ" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "REMOVE-EMPTY-SUBSEQS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP
        NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "FROM-END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      ((:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "KEY-SUPPLIED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)))
     :DOCUMENTATION
     "Return a list of subsequences in seq delimited by items satisfying
(CL:COMPLEMENT predicate).

If :remove-empty-subseqs is NIL, empty subsequences will be included
in the result; otherwise they will be discarded.  All other keywords
work analogously to those for CL:SUBSTITUTE-IF-NOT.  In particular,
the behaviour of :from-end is possibly different from other versions
of this function; :from-end values of NIL and T are equivalent unless
:count is supplied. The second return value is an index suitable as an
argument to CL:SUBSEQ into the sequence indicating where processing
stopped.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARTITION" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARTITION-IF" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "PARTITION-IF-NOT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "ARGS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPARATOR" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "TEST" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&OPTIONAL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION
     "Comparison operator: auxilliary function used by EXTREMUM")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ZERO-LENGTH-P" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
     :LAMBDA-LIST ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION "Is the length of SEQUENCE equal to zero?")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-CHECK-LENGTH" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
     :LAMBDA-LIST
     (((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTREMUM" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns the element of SEQUENCE that would appear first if the
sequence were ordered according to SORT using PREDICATE and KEY using
an unstable sorting algorithm. See http://www.cliki.net/EXTREMUM for
the full specification.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTREMUM-FASTKEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "EXTREMUM implemented so that it calls KEY less. This is only faster
if the KEY function is so slow that calling it less often would be a
significant improvement; ordinarily it's slower.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXTREMA" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "N-MOST-EXTREME" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "PREDICATE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Returns a list of the N elements of SEQUENCE that would appear
first if the sequence were ordered according to SORT using PREDICATE
and KEY with a stable sorting algorithm. If there are less than N
elements in the relevant part of the sequence, this will return all
the elements it can and signal the warning
N-MOST-EXTREME-NOT-ENOUGH-ELEMENTS")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "READ-DELIMITED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "STREAM" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL) 0)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      ((:NAME "DELIMITER" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       #\Newline)
      ((:NAME "TEST" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "EQL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
      ((:NAME "KEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       ((:NAME "FUNCTION" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
        (:NAME "IDENTITY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%READ-DELIMITED-BOUNDS-CHECK" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION "Check to make sure START and END are in bounds when calling
READ-DELIMITED with SEQUENCE")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%READ-DELIMITED-BOUNDS-CHECK-ORDER" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check the order of START and END bounds, and return them in the
correct order.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%READ-DELIMITED-BOUNDS-CHECK-START" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check to make sure START is in bounds when calling READ-DELIMITED
with SEQUENCE")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%READ-DELIMITED-BOUNDS-CHECK-END" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "SEQUENCE" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "START" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "END" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check to make sure END is in bounds when calling READ-DELIMITED
with SEQUENCE")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "EXPT-MOD" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "N" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "EXPONENT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "MODULUS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION "As (mod (expt n exponent) modulus), but more efficient.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BINDINGS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION "Executes a series of forms with each var bound to a fresh,
uninterned symbol. See http://www.cliki.net/WITH-UNIQUE-NAMES")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%WITH-UNIQUE-NAMES-BINDING-PARTS" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "BINDING" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION "Return (values var prefix) from a WITH-UNIQUE-NAMES binding
form. If PREFIX is not given in the binding, NIL is returned to
indicate that the default should be used.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-GENSYMS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "BINDINGS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Synonym for WITH-UNIQUE-NAMES, but BINDINGS should only consist of
atoms; lists are not supported. If you try to give list bindings, a
LIST-BINDING-NOT-SUPPORTED warning will be signalled, but it will work
the same way as WITH-UNIQUE-NAMES. Don't do it, though.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COLLECT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "THING" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Collect THING in the context established by the COLLECTING macro")
    (:TYPE :MACRO :SYMBOL
     (:NAME "COLLECTING" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Collect things into a list forwards. Within the body of this macro,
the COLLECT function will collect its argument into the list returned
by COLLECTING.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "WITH-COLLECTORS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     (((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
       (:NAME "COLLECTORS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Collect some things into lists forwards. The names in COLLECTORS
are defined as local functions which each collect into a separate
list.  Returns as many values as there are collectors, in the order
they were given.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%WITH-COLLECTORS-CHECK-COLLECTORS" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTORS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check that all of the COLLECTORS are symbols. If not, raise an error.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%WITH-COLLECTORS-GENSYMS-ALIST" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "COLLECTORS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Return an alist mapping the symbols in COLLECTORS to gensyms")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%CHECK-ONCE-ONLY-NAMES" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP
      NIL)
     :LAMBDA-LIST ((:NAME "NAMES" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Check that all of the NAMES are symbols. If not, raise an error.")
    (:TYPE :MACRO :SYMBOL
     (:NAME "ONCE-ONLY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "NAMES" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "&BODY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BODY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION NIL)
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "ROTATE-BYTE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "COUNT" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "BYTESPEC" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
      (:NAME "INTEGER" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T))
     :DOCUMENTATION
     "Rotates a field of bits within INTEGER; specifically, returns an
integer that contains the bits of INTEGER rotated COUNT times
leftwards within the byte specified by BYTESPEC, and elsewhere
contains the bits of INTEGER. See http://www.cliki.net/ROTATE-BYTE")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COPY-ARRAY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
     :LAMBDA-LIST
     ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "&KEY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      ((:NAME "UNDISPLACE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL)
       (:NAME "NIL" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)))
     :DOCUMENTATION
     "Shallow copies the contents of any array into another array with
equivalent properties.  If array is displaced, then this function will
normally create another displaced array with similar properties,
unless UNDISPLACE is non-NIL, in which case the contents of the array
will be copied into a completely new, not displaced, array.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "%MAKE-ARRAY-WITH-SAME-PROPERTIES" :PACKAGE-NAME "CL-UTILITIES"
      :EXTERNALP NIL)
     :LAMBDA-LIST
     ((:NAME "ARRAY" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "UNDISPLACE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Make an array with the same properties (size, adjustability, etc.)
as another array, optionally undisplacing the array.")
    (:TYPE :FUNCTION :SYMBOL
     (:NAME "COMPOSE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T) :LAMBDA-LIST
     ((:NAME "&REST" :PACKAGE-NAME "COMMON-LISP" :EXTERNALP T)
      (:NAME "FUNCTIONS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP NIL))
     :DOCUMENTATION
     "Compose FUNCTIONS right-associatively, returning a function"))
   :EXTERNAL-SYMBOLS
   ((:NAME "ONCE-ONLY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "EXTREMUM" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "WITH-UNIQUE-NAMES" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF-NOT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "COLLECTING" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "PARTITION-IF-NOT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "LIST-BINDING-NOT-SUPPORTED-BINDING" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE-IF" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "WITH-COLLECTORS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "ROTATE-BYTE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "COPY-ARRAY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "N-MOST-EXTREME-NOT-ENOUGH-ELEMENTS-N" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "READ-DELIMITED-BOUNDS-ERROR-SEQUENCE" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "SPLIT-SEQUENCE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "EXTREMA" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "N-MOST-EXTREME-NOT-ENOUGH-ELEMENTS-SUBSEQUENCE" :PACKAGE-NAME
     "CL-UTILITIES" :EXTERNALP T)
    (:NAME "COMPOSE" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "PARTITION-IF" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "LIST-BINDING-NOT-SUPPORTED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP
     T)
    (:NAME "NO-EXTREMUM" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "N-MOST-EXTREME" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "READ-DELIMITED" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "READ-DELIMITED-BOUNDS-ERROR" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "READ-DELIMITED-BOUNDS-ERROR-END" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "COLLECT" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "PARTITION" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "EXPT-MOD" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "EXTREMUM-FASTKEY" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "WITH-GENSYMS" :PACKAGE-NAME "CL-UTILITIES" :EXTERNALP T)
    (:NAME "N-MOST-EXTREME-NOT-ENOUGH-ELEMENTS" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)
    (:NAME "READ-DELIMITED-BOUNDS-ERROR-START" :PACKAGE-NAME "CL-UTILITIES"
     :EXTERNALP T)))))
