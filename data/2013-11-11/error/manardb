; in: QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5
;     (LET ((#:RETRY-RECOMPILE983 5)
;           (#:RETRY-CONTINUE984 5)
;           (#:RETRY-LOAD-SYSTEM985 5))
;       (HANDLER-BIND ((ERROR (LAMBDA # #)) (ERROR (LAMBDA # #)))
;         (QUICKDOCS.PARSER:PARSE-DOCUMENTATION
;          (ASDF/SYSTEM:FIND-SYSTEM "manardb"))))
; 
; caught STYLE-WARNING:
;   The variable #:RETRY-LOAD-SYSTEM985 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-BYTE
;     (MANARDB::DEFUN-SPEEDY MANARDB::MTAGMAP-BYTE
;         (MANARDB::MTAGMAP MANARDB::INDEX)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::INDEX))
;       (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::INDEX))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY (SETF MTAGMAP-BYTE)
;     (MANARDB::DEFUN-SPEEDY (SETF MANARDB::MTAGMAP-BYTE)
;         (MANARDB::VAL MANARDB::MTAGMAP MANARDB::INDEX)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::INDEX)
;                (TYPE FIXNUM MANARDB::VAL))
;       (SETF (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::INDEX)
;               (LOGAND 255 MANARDB::VAL)))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-WORD
;     (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                 MANARDB::WORD)
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           (UNSIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::DEFUN-SPEEDY MANARDB::MTAGMAP-WORD
;         (MANARDB::MTAGMAP MANARDB::WINDEX)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::WINDEX))
;       (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                   MANARDB::WORD))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                 MANARDB::WORD)
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY (SETF MTAGMAP-WORD)
;     (SETF (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                       MANARDB::WORD)
;             MANARDB::VAL)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           (UNSIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::DEFUN-SPEEDY (SETF MANARDB::MTAGMAP-WORD)
;         (MANARDB::VAL MANARDB::MTAGMAP MANARDB::WINDEX)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::WINDEX))
;       (DECLARE (TYPE (UNSIGNED-BYTE 64) MANARDB::VAL))
;       (SETF (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                         MANARDB::WORD)
;               MANARDB::VAL))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (SETF (MANARDB::D (MANARDB::MTAGMAP-PTR MANARDB::MTAGMAP) MANARDB::WINDEX
;                       MANARDB::WORD)
;             MANARDB::VAL)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-LAST-INDEX
;     (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-ELEM-POS
;     (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (/ (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
;        (MANARDB::MTAGMAP-ELEM-LEN MANARDB::MTAGMAP))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x/2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.

;     (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-ELEM-POS-TO-INDEX
;     (* (MANARDB::MTAGMAP-ELEM-LEN MANARDB::MTAGMAP) MANARDB::POS)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The second argument is a NUMBER, not a INTEGER.

;     (+ (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP)
;        (* (MANARDB::MTAGMAP-ELEM-LEN MANARDB::MTAGMAP) MANARDB::POS))
; ==>
;   (+ (TRULY-THE #<SB-KERNEL:NUMERIC-TYPE NUMBER> SB-C::Y) 8)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   associate +/+ of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate +/- of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.

;     (* (MANARDB::MTAGMAP-ELEM-LEN MANARDB::MTAGMAP) MANARDB::POS)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a T, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                                &REST T).
;       etc.

;     (+ (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP)
;        (* (MANARDB::MTAGMAP-ELEM-LEN MANARDB::MTAGMAP) MANARDB::POS))
; ==>
;   (+ (TRULY-THE #<SB-KERNEL:NUMERIC-TYPE NUMBER> SB-C::Y) 8)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN MTAGMAP-COUNT
;     (MANARDB::MTAGMAP-LAST-INDEX MANARDB::MTAGMAP)
; --> BLOCK MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN MTAGMAP-CHECK
;     (MANARDB::MTAGMAP-NEXT MANARDB::M)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN MTAGMAP-OPEN
;     (MANARDB::MTAGMAP-NEXT MANARDB::NEW-MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN MTAGMAP-EXTEND-ALLOC
;     (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN-SPEEDY MTAGMAP-ALLOC
;     (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

;     (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;        (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

;     (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

;     (SETF (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
;             (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES)))
; --> LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::DEFUN-SPEEDY MANARDB::MTAGMAP-ALLOC
;         (MANARDB::MTAGMAP MANARDB::BYTES)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::BYTES))
;       (MANARDB::CHECK-ALLOCATE-OKAY)
;       (SYMBOL-MACROLET ((MANARDB::LEN (MANARDB::MTAGMAP-LEN MANARDB::MTAGMAP)))
;         (WHEN (ZEROP MANARDB::LEN) (MANARDB::MTAGMAP-OPEN MANARDB::MTAGMAP))
;         (LET ((ITERATE:NEXT #))
;           (DECLARE (TYPE MANARDB::MINDEX ITERATE:NEXT))
;           (WHEN (> # #)
;             (MANARDB::MTAGMAP-EXTEND-ALLOC MANARDB::MTAGMAP MANARDB::BYTES))
;           (SETF # #)
;           ITERATE:NEXT)))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFUN MTAGMAP-SHRINK
;     (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mtagmap.lisp
; in: DEFMETHOD PRINT-OBJECT
;     (MANARDB::MTAGMAP-NEXT MANARDB::M)
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior
; 
; compilation unit finished
;   printed 76 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mop.lisp
; in: DEFUN-SPEEDY PTR
;     (THE MANARDB:MPTR (MANARDB::%PTR MANARDB::OBJECT))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/mop.lisp
; in: DEFUN-SPEEDY MM-OBJECT-POINTER
;     (MANARDB::PTR MANARDB:MM-OBJECT)
; --> THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY 
; --> AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MPTR-POINTER (MANARDB::PTR MANARDB:MM-OBJECT))
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.
; 
; compilation unit finished
;   printed 3 notes
Date/time: 2013-11-15-03:43An unhandled error condition has been signalled:
                              There is no applicable method for the generic function
                                #<STANDARD-GENERIC-FUNCTION
                                  MANARDB::SLOT-DEFINITION-MEMORY-MAPPED (1)>
                              when called with arguments
                                (#<SB-MOP:STANDARD-DIRECT-SLOT-DEFINITION
                                   MANARDB::%PTR>).


Backtrace for: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>
0: ((LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX))
1: (SB-IMPL::CALL-WITH-SANE-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {BCFCD3D}>)
2: (SB-IMPL::%WITH-STANDARD-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {BCFCD25}>)
3: (PRINT-BACKTRACE :STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :START 0 :FROM :DEBUGGER-FRAME :COUNT 536870911 :PRINT-THREAD T :PRINT-FRAME-SOURCE NIL :METHOD-FRAME-STYLE NIL)
4: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE-TO-STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}>)
5: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE #<SIMPLE-ERROR "~@<There is no applicable method for the generic function ~2I~_~S~
          ~I~_when called with arguments ~2I~_~S.~:>" {BCF9AC9}> :OUTPUT #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :IF-EXISTS :APPEND :VERBOSE NIL)
6: (QUICKDOCS.PARSER.ASDF::ASDF-SYSTEM-RELOAD #<ASDF/SYSTEM:SYSTEM "manardb">)
7: ((FLET #:WITHOUT-INTERRUPTS-BODY-537 :IN SB-THREAD::CALL-WITH-MUTEX))
8: (SB-THREAD::CALL-WITH-MUTEX #<CLOSURE (FLET SB-THREAD::WITH-MUTEX-THUNK :IN QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED) {B788F9DD}> #<SB-THREAD:MUTEX "system-load-lock" owner: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>> NIL T NIL)
9: (QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED #<ASDF/SYSTEM:SYSTEM "manardb"> :FORCE NIL)
10: ((:METHOD QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:SYSTEM)) #<ASDF/SYSTEM:SYSTEM "manardb">) [fast-method]
11: ((LAMBDA ()))
12: (SB-INT:SIMPLE-EVAL-IN-LEXENV (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))) #<NULL-LEXENV>)
13: (EVAL (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))))
14: (SHELLY.CORE:INTERPRET ("QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL)
15: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL) #<NULL-LEXENV>)
16: (EVAL (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL))
17: (SB-IMPL::PROCESS-EVAL/LOAD-OPTIONS ((:EVAL . "(shelly.util::check-version \"0.5.8\")") (:EVAL . "(shelly.util::load-global-shlyfile)") (:EVAL . "(shelly.util::load-local-shlyfile #P\"/home/quickdocs_dev/quickdocs2/shlyfile.lisp\")") (:EVAL . "(shelly.core::interpret (list \"QUICKDOCS.PARSER.UTIL:WITH-RETRYING\" \"5\" \"(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \\\"manardb\\\"))\") :verbose nil)") (:EVAL . "(swank-backend:quit-lisp)")))
18: (SB-IMPL::TOPLEVEL-INIT)
19: ((FLET #:WITHOUT-INTERRUPTS-BODY-42 :IN SAVE-LISP-AND-DIE))
20: ((LABELS SB-IMPL::RESTART-LISP :IN SAVE-LISP-AND-DIE))


; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/struct.lisp
; in: DEFUN-SPEEDY MPTR-INDEX
;     (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/struct.lisp
; in: DEFUN-SPEEDY MAKE-MPTR
;     (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

;     (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (MOD 18446744073709551361), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::DEFUN-SPEEDY MANARDB::MAKE-MPTR
;         (MANARDB::TAG MANARDB::INDEX)
;       (DECLARE (TYPE MANARDB::MTAG MANARDB::TAG)
;                (TYPE MANARDB::MINDEX MANARDB::INDEX))
;       (THE MANARDB:MPTR
;            (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/struct.lisp
; in: DEFUN-SPEEDY MPOINTER
;     (MANARDB::DEFUN-SPEEDY MANARDB::MPOINTER
;         (MANARDB::MTAG MANARDB::MINDEX)
;       (DECLARE (TYPE MANARDB::MTAG MANARDB::MTAG)
;                (TYPE MANARDB::MINDEX MANARDB::MINDEX))
;       (CFFI-SYS:INC-POINTER
;        (MANARDB::MTAGMAP-PTR
;         (THE MANARDB::MTAGMAP (MANARDB::MTAGMAP MANARDB::MTAG)))
;        MANARDB::MINDEX))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/struct.lisp
; in: DEFUN-SPEEDY MPTR-POINTER
;     (MANARDB::MPTR-TAG MANARDB:MPTR)
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB:MPTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/struct.lisp
; in: DEFUN-SPEEDY MPTR-TO-LISP-OBJECT
;     (MANARDB::MPTR-TAG MANARDB:MPTR)
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB:MPTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.
; 
; compilation unit finished
;   printed 9 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFINE-LISP-OBJECT-TO-MPTR
;     (MANARDB::DEFINE-LISP-OBJECT-TO-MPTR)
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; ==>
;   (MANARDB::BOX-SYMBOL MANARDB::OBJECT)
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF PROGN MANARDB::PTR 
; ==>
;   (THE MANARDB:MPTR (MANARDB::%PTR (THE MANARDB:MM-OBJECT MANARDB::OBJ)))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF TYPEP LET AND IF AND THE LOCALLY AND 
; --> IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN-SPEEDY FORCE-MPTR
;     (MANARDB::PTR MANARDB::OBJ)
; ==>
;   (THE MANARDB:MPTR (MANARDB::%PTR (THE MANARDB:MM-OBJECT MANARDB::OBJ)))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

;     (ETYPECASE MANARDB::OBJ
;       (MANARDB:MPTR MANARDB::OBJ)
;       (MANARDB:MM-OBJECT (MANARDB::PTR MANARDB::OBJ)))
; --> LET COND IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN-SPEEDY MPTR
;     (MANARDB::FORCE-MPTR MANARDB::OBJ)
; --> BLOCK ETYPECASE LET COND IF COND IF PROGN MANARDB::PTR 
; ==>
;   (THE MANARDB:MPTR (MANARDB::%PTR (THE MANARDB:MM-OBJECT MANARDB::OBJ)))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; --> BLOCK ETYPECASE LET COND IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN-SPEEDY FORCE-TAG
;     (ETYPECASE MANARDB::OBJ
;       (MANARDB::MTAG MANARDB::OBJ)
;       (MANARDB::MTAGMAP
;        (MANARDB::MM-METACLASS-TAG (MANARDB::MTAGMAP-CLASS MANARDB::OBJ)))
;       (SYMBOL (MANARDB::MM-METACLASS-TAG (FIND-CLASS MANARDB::OBJ)))
;       (MANARDB:MM-METACLASS (MANARDB::MM-METACLASS-TAG MANARDB::OBJ))
;       (MANARDB:MM-OBJECT (MANARDB::MPTR-TAG (MANARDB::PTR MANARDB::OBJ)))
;       (MANARDB:MPTR (MANARDB::MPTR-TAG MANARDB::OBJ)))
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF TYPEP LET AND IF AND 
; --> THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::PTR MANARDB::OBJ)
; --> THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY 
; --> AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN MM-METACLASS-FILENAME
;     (CHECK-TYPE (CLASS-NAME CLASS) SYMBOL)
; --> DO BLOCK LET TAGBODY TAGBODY SETF LET* 
; ==>
;   CLASS
; 
; note: deleting unreachable code

;     (CLASS-NAME CLASS)
; ==>
;   CLASS
; 
; note: deleting unreachable code

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN-SPEEDY MM-METACLASS-ALLOC
;     (* MANARDB::AMOUNT (MANARDB::MM-METACLASS-LEN CLASS))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The second argument is a NUMBER, not a INTEGER.
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a T, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                                &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MM-METACLASS-MTAGMAP CLASS)
;                             (* MANARDB::AMOUNT (MANARDB::MM-METACLASS-LEN CLASS)))
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::MAKE-MPTR (MANARDB::MM-METACLASS-TAG CLASS)
;                         (MANARDB::MTAGMAP-ALLOC
;                          (MANARDB::MM-METACLASS-MTAGMAP CLASS)
;                          (* MANARDB::AMOUNT (MANARDB::MM-METACLASS-LEN CLASS))))
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (MOD 18446744073709551361), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::DEFUN-SPEEDY MANARDB::MM-METACLASS-ALLOC
;         (CLASS &OPTIONAL (MANARDB::AMOUNT 1))
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::AMOUNT))
;       (MANARDB::MAKE-MPTR (MANARDB::MM-METACLASS-TAG CLASS)
;                           (MANARDB::MTAGMAP-ALLOC
;                            (MANARDB::MM-METACLASS-MTAGMAP CLASS)
;                            (* MANARDB::AMOUNT
;                               (MANARDB::MM-METACLASS-LEN CLASS)))))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN COND IF COND IF PROGN 
; --> SB-C::%FUNCALL MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE 
; --> LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MM-METACLASS-MTAGMAP CLASS)
;                             (* MANARDB::AMOUNT (MANARDB::MM-METACLASS-LEN CLASS)))
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFUN-SPEEDY MM-METACLASS-INITIALIZE-ALLOC
;     (MANARDB::DEFUN-SPEEDY MANARDB::MM-METACLASS-INITIALIZE-ALLOC
;         (CLASS MANARDB::INSTANCE MANARDB::INITARGS)
;       (DECLARE (DYNAMIC-EXTENT MANARDB::INITARGS)
;                (TYPE MANARDB:MM-METACLASS CLASS))
;       (FUNCALL (THE FUNCTION (SLOT-VALUE CLASS 'MANARDB::ALLOCATOR))
;                MANARDB::INSTANCE MANARDB::INITARGS))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; ==>
;   #:G822
; 
; note: could not stack allocate INITARGS in:
;        (DEFUN-SPEEDY MM-METACLASS-INITIALIZE-ALLOC
;            (CLASS INSTANCE INITARGS)
;          (DECLARE (DYNAMIC-EXTENT INITARGS)
;                   (TYPE MM-METACLASS CLASS))
;          (FUNCALL (THE FUNCTION (SLOT-VALUE CLASS 'ALLOCATOR)) INSTANCE
;                   INITARGS))

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/class.lisp
; in: DEFMETHOD PRINT-OBJECT
;     (MANARDB::MPTR-INDEX MANARDB::PTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.
; 
; compilation unit finished
;   printed 114 notes
; 
; compilation unit aborted
;   caught 1 fatal ERROR condition
Date/time: 2013-11-15-03:43An unhandled error condition has been signalled:
                              There is no applicable method for the generic function
                                #<STANDARD-GENERIC-FUNCTION
                                  MANARDB::SLOT-DEFINITION-MEMORY-MAPPED (1)>
                              when called with arguments
                                (#<SB-MOP:STANDARD-DIRECT-SLOT-DEFINITION
                                   MANARDB::%PTR>).


Backtrace for: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>
0: ((LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX))
1: (SB-IMPL::CALL-WITH-SANE-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {E4978B5}>)
2: (SB-IMPL::%WITH-STANDARD-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {E49789D}>)
3: (PRINT-BACKTRACE :STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :START 0 :FROM :DEBUGGER-FRAME :COUNT 536870911 :PRINT-THREAD T :PRINT-FRAME-SOURCE NIL :METHOD-FRAME-STYLE NIL)
4: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE-TO-STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}>)
5: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE #<SIMPLE-ERROR "~@<There is no applicable method for the generic function ~2I~_~S~
          ~I~_when called with arguments ~2I~_~S.~:>" {E491D59}> :OUTPUT #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :IF-EXISTS :APPEND :VERBOSE NIL)
6: (QUICKDOCS.PARSER.ASDF::ASDF-SYSTEM-RELOAD #<ASDF/SYSTEM:SYSTEM "manardb">)
7: ((FLET #:WITHOUT-INTERRUPTS-BODY-537 :IN SB-THREAD::CALL-WITH-MUTEX))
8: (SB-THREAD::CALL-WITH-MUTEX #<CLOSURE (FLET SB-THREAD::WITH-MUTEX-THUNK :IN QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED) {B788F9DD}> #<SB-THREAD:MUTEX "system-load-lock" owner: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>> NIL T NIL)
9: (QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED #<ASDF/SYSTEM:SYSTEM "manardb"> :FORCE NIL)
10: ((:METHOD QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:SYSTEM)) #<ASDF/SYSTEM:SYSTEM "manardb">) [fast-method]
11: ((LAMBDA ()))
12: (SB-INT:SIMPLE-EVAL-IN-LEXENV (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))) #<NULL-LEXENV>)
13: (EVAL (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))))
14: (SHELLY.CORE:INTERPRET ("QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL)
15: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL) #<NULL-LEXENV>)
16: (EVAL (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL))
17: (SB-IMPL::PROCESS-EVAL/LOAD-OPTIONS ((:EVAL . "(shelly.util::check-version \"0.5.8\")") (:EVAL . "(shelly.util::load-global-shlyfile)") (:EVAL . "(shelly.util::load-local-shlyfile #P\"/home/quickdocs_dev/quickdocs2/shlyfile.lisp\")") (:EVAL . "(shelly.core::interpret (list \"QUICKDOCS.PARSER.UTIL:WITH-RETRYING\" \"5\" \"(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \\\"manardb\\\"))\") :verbose nil)") (:EVAL . "(swank-backend:quit-lisp)")))
18: (SB-IMPL::TOPLEVEL-INIT)
19: ((FLET #:WITHOUT-INTERRUPTS-BODY-42 :IN SAVE-LISP-AND-DIE))
20: ((LABELS SB-IMPL::RESTART-LISP :IN SAVE-LISP-AND-DIE))


; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/array.lisp
; in: DEFUN-SPEEDY MARRAY-REF
;     (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::DW (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;                  MANARDB::I)
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           (UNSIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT
;      (MANARDB::DW (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;                   MANARDB::I))
; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::DEFUN-SPEEDY MANARDB:MARRAY-REF
;         (MANARDB:MARRAY MANARDB::I)
;       "Like aref, but for memory mapped arrays"
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::I))
;       (MANARDB:MPTR-TO-LISP-OBJECT
;        (MANARDB::DW (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;                     MANARDB::I)))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::DW (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;                  MANARDB::I)
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/array.lisp
; in: DEFUN-SPEEDY (SETF MARRAY-REF)
;     (MANARDB:LISP-OBJECT-TO-MPTR MANARDB::NEW)
; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF TYPEP LET AND IF AND THE 
; --> LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-SYMBOL MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF 
; --> AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; --> LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF PROGN MANARDB::PTR THE MULTIPLE-VALUE-BIND LET 
; --> UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (SETF (MANARDB::DW
;            (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;            MANARDB::I)
;             MANARDB::NEW)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS IF 
; --> TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           (UNSIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::DEFUN-SPEEDY (SETF MANARDB:MARRAY-REF)
;         (MANARDB::NEW MANARDB:MARRAY MANARDB::I)
;       (DECLARE (TYPE MANARDB::MINDEX MANARDB::I))
;       (LET ((MANARDB::NEW (MANARDB:LISP-OBJECT-TO-MPTR MANARDB::NEW)))
;         (SETF (MANARDB::DW # MANARDB::I) MANARDB::NEW))
;       MANARDB::NEW)
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (SETF (MANARDB::DW
;            (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
;            MANARDB::I)
;             MANARDB::NEW)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

;     (MANARDB:LISP-OBJECT-TO-MPTR MANARDB::NEW)
; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/array.lisp
; in: DEFUN MARRAY-TO-LIST
;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::C MANARDB:IN-MARRAY MANARDB:MARRAY)
;       (ITERATE:COLLECT MANARDB::C))
; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 MANARDB::MPTR-POINTER 
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 MANARDB::MPTR-POINTER 
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 576460752303423481) &OPTIONAL), not a (VALUES
;                                                                           (UNSIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT BLOCK FUNCALL SB-C::%FUNCALL 
; --> MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET* BLOCK TAGBODY PROGN SETQ THE MANARDB:MARRAY-REF BLOCK 
; --> MANARDB:MPTR-TO-LISP-OBJECT MANARDB::DW MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/array.lisp
; in: DEFUN LIST-TO-MARRAY
;     (MANARDB:MAKE-MARRAY (LENGTH LIST) :INITIAL-CONTENTS LIST)
; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (MOD 4294967265), not a FIXNUM.
;       The result is a (VALUES (MOD 72057598332895200) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 4294967265), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057598332895200) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (MOD 4294967265), not a FIXNUM.
;       The result is a (VALUES (MOD 72057598332895200) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 4294967265), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057598332895200) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS IF 
; --> TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; --> LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF PROGN MANARDB::PTR THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; ==>
;   (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 8))
; 
; note: doing unsigned word to integer coercion (cost 20) to BYTES

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-64 MANARDB::PTR (* #:INDEX-TMP504 8) #:VALUE505)
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior
; 
; compilation unit finished
;   printed 217 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/gc.lisp
; in: DEFUN GC-COMPACT
;     (SETF (MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP) MANARDB::CUR-OFFSET)
; --> LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 144115188075855870), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 144115188075855870), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 144115188075855870), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 144115188075855870), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/gc.lisp
; in: DEFUN GC-REWRITE-POINTERS-AND-COMPACT
;     (MANARDB::MAKE-MPTR MANARDB::TAG MANARDB::OLD-OFFSET)
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2048 18446744073709551360) &OPTIONAL), not a (VALUES
;                                                                                      FIXNUM
;                                                                                      &REST
;                                                                                      T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       The result is a (VALUES (INTEGER 2048 18446744073709551360) &OPTIONAL), not a (VALUES
;                                                                                      (UNSIGNED-BYTE
;                                                                                       32)
;                                                                                      &REST
;                                                                                      T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 2048 18446744073709551360), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2048 18446744073709551615) &OPTIONAL), not a (VALUES
;                                                                                      FIXNUM
;                                                                                      &REST
;                                                                                      T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (INTEGER 2048 18446744073709551360), not a (SIGNED-BYTE
;                                                                           32).
;       The result is a (VALUES (INTEGER 2048 18446744073709551615) &OPTIONAL), not a (VALUES
;                                                                                      (SIGNED-BYTE
;                                                                                       32)
;                                                                                      &REST
;                                                                                      T).
;       etc.

;     (MANARDB::MAKE-MPTR MANARDB::TAG MANARDB::NEW-OFFSET)
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (MOD 18446744073709551361), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-POINTER MANARDB::REF)
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (SETF (MANARDB::D (MANARDB::MPTR-POINTER MANARDB::REF) 0 MANARDB:MPTR)
;             MANARDB::NEW-MPTR)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/gc.lisp
; in: DEFUN GC
;     (MAKE-ARRAY (MANARDB::MTAGMAP-COUNT MANARDB::M) :INITIAL-ELEMENT NIL)
; --> LOCALLY MAKE-ARRAY LET MAKE-ARRAY LOCALLY 
; ==>
;   (MAKE-ARRAY SB-C::DIMS :ELEMENT-TYPE 'T)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MOD 536870909) CONS NULL), not a LIST.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MOD 536870909) CONS NULL), not a INTEGER.

;     (ZEROP MANARDB:MPTR)
; ==>
;   (= MANARDB:MPTR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (MANARDB::R MANARDB:MPTR)
; --> AREF 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

;     (FUNCALL MANARDB::WALKER MANARDB:MPTR #'MANARDB::WALK-REF)
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN MANARDB::WALKER)
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   not known to be a function

;     (= 1 MANARDB::LEN)
; --> = IF 
; ==>
;   (= SB-C::Y SB-C::X)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (1- MANARDB::LEN)
; ==>
;   (- MANARDB::LEN 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::O MANARDB::IN-VECTOR MANARDB::ROOT-OBJECTS-SEQUENCE)
;       (MANARDB::WALK-REF MANARDB::O 0 1))
; --> LET* BLOCK TAGBODY PROGN SETQ THE 
; ==>
;   (+ #:INDEX7 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   associate +/+ of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate +/- of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.

;     (MANARDB::R MANARDB:MPTR)
; --> AREF 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

;     (ZEROP MANARDB::REFERRER)
; ==>
;   (= MANARDB::REFERRER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (SETF MANARDB::REF MANARDB::REFERRER)
; --> SETQ SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS ARRAY SB-INT:INDEX
;                                                 SB-C::NEW-VALUE)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

;     (ZEROP MANARDB::RREF)
; ==>
;   (= MANARDB::RREF 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (SETF MANARDB::REF MANARDB::REFERRER)
; --> SETQ SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS ARRAY SB-INT:INDEX
;                                                 SB-C::NEW-VALUE)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

;     (= MANARDB::RREF MANARDB::REFERRER)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
;   The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
;   The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
;   The second argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (SETF MANARDB::REF
;             (MAKE-ARRAY 2 :ADJUSTABLE T :FILL-POINTER 2 :INITIAL-CONTENTS
;                         (LIST MANARDB::RREF MANARDB::REFERRER) :ELEMENT-TYPE
;                         'MANARDB:MPTR))
; --> SETQ SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS ARRAY SB-INT:INDEX
;                                                 SB-C::NEW-VALUE)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::O MANARDB::IN-VECTOR MANARDB::ROOT-OBJECTS-SEQUENCE)
;       (MANARDB::WALK-REF MANARDB::O 0 1))
; --> LET* BLOCK TAGBODY PROGN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LET* BLOCK TAGBODY PROGN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (MANARDB::R MANARDB:MPTR)
; --> AREF AREF MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET 
; --> AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> AREF MANARDB::MTAGMAP-ELEM-POS MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> AREF MANARDB::MTAGMAP-ELEM-POS BLOCK / 
; ==>
;   (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> AREF MANARDB::MTAGMAP-ELEM-POS MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> AREF MANARDB::MTAGMAP-ELEM-POS BLOCK / 
; ==>
;   (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

;     (= MANARDB::RREF MANARDB::REFERRER)
; 
; note: forced to do GENERIC-= (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a T, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a T, not a SINGLE-FLOAT.

;     (SETF MANARDB::REF
;             (MAKE-ARRAY 2 :ADJUSTABLE T :FILL-POINTER 2 :INITIAL-CONTENTS
;                         (LIST MANARDB::RREF MANARDB::REFERRER) :ELEMENT-TYPE
;                         'MANARDB:MPTR))
; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS BLOCK / 
; ==>
;   (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

;     (SETF MANARDB::REF MANARDB::REFERRER)
; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS BLOCK / 
; ==>
;   (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> SETQ SETF LET* MANARDB::MTAGMAP-ELEM-POS BLOCK / 
; ==>
;   (- MANARDB::INDEX (MANARDB::MTAGMAP-FIRST-INDEX MANARDB::MTAGMAP))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8 72057594037927927) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

;     (ASH
;      (MANARDB::MTAGMAP-ELEM-LEN
;       (MANARDB::MTAGMAP (MANARDB::MPTR-TAG MANARDB:MPTR)))
;      MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

;     (+ MANARDB:MPTR
;        (ASH
;         (MANARDB::MTAGMAP-ELEM-LEN
;          (MANARDB::MTAGMAP (MANARDB::MPTR-TAG MANARDB:MPTR)))
;         MANARDB::+MTAG-BITS+))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The second argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (MOD 36893488147419102976) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744073709551361), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (MOD 36893488147419102976) &OPTIONAL), not a (VALUES
;                                                                             (SIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

;     (1- MANARDB::LEN)
; ==>
;   (- MANARDB::LEN 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::O MANARDB::IN-VECTOR MANARDB::ROOT-OBJECTS-SEQUENCE)
;       (MANARDB::WALK-REF MANARDB::O 0 1))
; --> LET* BLOCK TAGBODY PROGN SETQ THE 
; ==>
;   (+ #:INDEX7 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

; --> LET* BLOCK TAGBODY PROGN SETQ THE AREF THE MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.
; 
; compilation unit finished
;   printed 71 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/rewrite-gc.lisp
; in: DEFUN REWRITE-GC-WALK
;     (LENGTH MANARDB::ROOT-OBJECTS-SEQUENCE)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (CEILING (LENGTH MANARDB::ROOT-OBJECTS-SEQUENCE)
;              (IF (NUMBERP MANARDB::PROGRESS)
;                  MANARDB::PROGRESS
;                  10))
; --> SB-KERNEL:%CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER SB-KERNEL::DIVISOR)
; 
; note: unable to
;   convert division by 2^k to shift
; due to type uncertainty:
;   The second argument is a REAL, not a INTEGER.

; --> SB-KERNEL:%CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION 
; --> IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0d0 0.0) (SINGLE-FLOAT (0.0))
;                               (DOUBLE-FLOAT (0.0d0)) (RATIONAL 0)), not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> SB-KERNEL:%CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION 
; --> IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::O MANARDB::IN-VECTOR MANARDB::ROOT-OBJECTS-SEQUENCE)
;       (ITERATE:FOR COUNT MANARDB::FROM 0)
;       (WHEN (AND MANARDB::PRINT-NEXT (= COUNT MANARDB::PRINT-NEXT))
;         (LET ((MANARDB::NOW #))
;           (UNLESS (= MANARDB::NOW MANARDB::START-TIME)
;             (FORMAT T "~&Added ~D objects; ~$ object/s~%" COUNT #)))
;         (INCF MANARDB::PRINT-NEXT MANARDB::PRINT-STEP))
;       (MANARDB::REWRITE-GC-COPY-ONE-ROOT MANARDB::O MANARDB::SHARED-TABLES
;                                          MANARDB::NEW-MTAGMAPS))
; --> LET* BLOCK TAGBODY PROGN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> LET* BLOCK TAGBODY PROGN SETQ THE 
; ==>
;   (+ #:INDEX11 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   associate +/+ of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate +/- of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.

; ==>
;   (+ COUNT 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   associate +/+ of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate +/- of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.

; --> LET* BLOCK TAGBODY PROGN IF AND IF AND THE 
; ==>
;   (= COUNT MANARDB::PRINT-NEXT)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
;   The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
;   The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
;   The second argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET IF PROGN FORMAT / 
; ==>
;   (* COUNT INTERNAL-TIME-UNITS-PER-SECOND)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
; 
; note: unable to
;   associate */* of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate *// of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32)
;                                                            &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a FIXNUM.
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET IF PROGN FORMAT 
; ==>
;   (/ (* COUNT INTERNAL-TIME-UNITS-PER-SECOND)
;      (- MANARDB::NOW MANARDB::START-TIME))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x/2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.

; --> LET* BLOCK TAGBODY PROGN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET* 
; ==>
;   (+ MANARDB::PRINT-NEXT #:G1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (CEILING (LENGTH MANARDB::ROOT-OBJECTS-SEQUENCE)
;              (IF (NUMBERP MANARDB::PROGRESS)
;                  MANARDB::PROGRESS
;                  10))
; --> SB-KERNEL:%CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION 
; --> IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> SB-KERNEL:%CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION 
; --> IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (ITERATE:ITER
;       (ITERATE:FOR MANARDB::O MANARDB::IN-VECTOR MANARDB::ROOT-OBJECTS-SEQUENCE)
;       (ITERATE:FOR COUNT MANARDB::FROM 0)
;       (WHEN (AND MANARDB::PRINT-NEXT (= COUNT MANARDB::PRINT-NEXT))
;         (LET ((MANARDB::NOW #))
;           (UNLESS (= MANARDB::NOW MANARDB::START-TIME)
;             (FORMAT T "~&Added ~D objects; ~$ object/s~%" COUNT #)))
;         (INCF MANARDB::PRINT-NEXT MANARDB::PRINT-STEP))
;       (MANARDB::REWRITE-GC-COPY-ONE-ROOT MANARDB::O MANARDB::SHARED-TABLES
;                                          MANARDB::NEW-MTAGMAPS))
; --> LET* BLOCK TAGBODY PROGN SETQ THE 
; ==>
;   (+ #:INDEX11 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

; --> LET* BLOCK TAGBODY PROGN SETQ THE AREF THE MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* BLOCK TAGBODY PROGN SETQ THE 
; ==>
;   (+ COUNT 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (OR NULL NUMBER), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN IF AND IF AND THE 
; ==>
;   (= COUNT MANARDB::PRINT-NEXT)
; 
; note: forced to do GENERIC-= (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a NUMBER, not a SINGLE-FLOAT.

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET IF = EQL IF 
; ==>
;   (EQL SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-EQL (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a UNSIGNED-BYTE, not a FIXNUM.

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET IF PROGN FORMAT / 
; ==>
;   (* COUNT INTERNAL-TIME-UNITS-PER-SECOND)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; ==>
;   (- MANARDB::NOW MANARDB::START-TIME)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a UNSIGNED-BYTE, not a (SIGNED-BYTE 32).
;       The second argument is a UNSIGNED-BYTE, not a (SIGNED-BYTE 32).
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES
;                                                          (SIGNED-BYTE 32) &REST
;                                                          T).
;       etc.

; --> LET* BLOCK TAGBODY PROGN IF PROGN LET* 
; ==>
;   (+ MANARDB::PRINT-NEXT #:G1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The second argument is a (OR INTEGER NULL), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;       The second argument is a (OR INTEGER NULL), not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                                &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/rewrite-gc.lisp
; in: DEFUN REWRITE-GC-COPY-ONE-ROOT
;     (MAP 'VECTOR
;          (LAMBDA (MANARDB::X MANARDB::TABLE)
;            (OR MANARDB::TABLE (WHEN MANARDB::X (MAKE-HASH-TABLE :TEST 'EQL))))
;          MANARDB::NEW-MTAGMAPS MANARDB::SHARED-TABLES)
; --> TRULY-THE 
; ==>
;   (SB-KERNEL:%MAP SB-C::RESULT-TYPE-ARG SB-C::FUN #:G117 #:G118)
; 
; note: could not stack allocate:
;        (MAP 'VECTOR
;             (LAMBDA (X TABLE) (OR TABLE (WHEN X (MAKE-HASH-TABLE :TEST 'EQL))))
;             NEW-MTAGMAPS SHARED-TABLES)

;     (MANARDB::MPTR-INDEX MANARDB::REFERRER)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB::NEW-MPTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::VREF MANARDB:MPTR)
; --> GETHASH SB-IMPL::GETHASH3 MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC MANARDB::MTAGMAP MANARDB::TOTAL-LEN)
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::MAKE-MPTR MANARDB::TAG MANARDB::NEW-INDEX)
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (MOD 18446744073709551361), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-POINTER MANARDB:MPTR)
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (SETF (MANARDB::VREF MANARDB:MPTR) MANARDB::NEW-MPTR)
; --> LET* MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB:MPTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC MANARDB::MTAGMAP MANARDB::TOTAL-LEN)
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/rewrite-gc.lisp
; in: DEFUN REWRITE-GC
;     (MANARDB::FORCE-TAG MANARDB::X)
; --> BLOCK ETYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK ETYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::MPTR-TAG MANARDB::PTR THE MULTIPLE-VALUE-BIND LET UNLESS IF 
; --> TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.
; 
; compilation unit finished
;   printed 75 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY UNBOX-BOX
;     (MANARDB::MPOINTER MANARDB::TAG MANARDB::INDEX)
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT MANARDB::PTR)
; --> MANARDB::PTR MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::PTR MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::PTR MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::PTR MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY MAKE-MARRAY
;     (* LENGTH 8)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
; 
; note: unable to
;   associate */* of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate *// of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32)
;                                                            &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a FIXNUM.
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I)
;                      MANARDB::INITIAL-ELEMENT))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           ITERATE:FOR MANARDB::N ITERATE:IN MANARDB::INITIAL-CONTENTS
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::N))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (* LENGTH 8)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 8))
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::MAKE-MPTR MANARDB::ELEMENT-TAG
;                         (MANARDB::MTAGMAP-ALLOC
;                          (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 8)))
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

;     (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           ITERATE:FOR MANARDB::N ITERATE:IN MANARDB::INITIAL-CONTENTS
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::N))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::N)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES
;                                                                (UNSIGNED-BYTE
;                                                                 32)
;                                                                &REST T).
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           ITERATE:FOR MANARDB::N ITERATE:IN MANARDB::INITIAL-CONTENTS
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::N))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> THE 1+ 
; ==>
;   (+ MANARDB::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

;     (MAPCAR #'MANARDB:LISP-OBJECT-TO-MPTR MANARDB::INITIAL-CONTENTS)
; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; --> LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF PROGN MANARDB::PTR THE MULTIPLE-VALUE-BIND LET UNLESS IF 
; --> TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB:LISP-OBJECT-TO-MPTR MANARDB::INITIAL-ELEMENT)
; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF TYPEP LET AND IF AND THE 
; --> LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-SYMBOL MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF 
; --> AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; --> LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK TYPECASE LET COND IF PROGN MANARDB::PTR THE MULTIPLE-VALUE-BIND LET 
; --> UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MPTR-POINTER (MANARDB::MARRAY-BASE MANARDB:MARRAY))
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I)
;                      MANARDB::INITIAL-ELEMENT))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::INITIAL-ELEMENT)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 * 
; ==>
;   (ASH SB-C::X 3)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES
;                                                                (UNSIGNED-BYTE
;                                                                 32)
;                                                                &REST T).
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

;     (LOOP ITERATE:FOR MANARDB::I MANARDB::BELOW LENGTH
;           DO (SETF (MANARDB::DW MANARDB::PTR MANARDB::I)
;                      MANARDB::INITIAL-ELEMENT))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; --> 1+ 
; ==>
;   (+ MANARDB::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 8))
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

;     (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::INITIAL-ELEMENT)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

;     (MANARDB:LISP-OBJECT-TO-MPTR MANARDB::INITIAL-ELEMENT)
; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF 
; --> PROGN MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

;     (SETF (MANARDB::DW MANARDB::PTR MANARDB::I) MANARDB::N)
; --> LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET 
; --> SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

;     (MAPCAR #'MANARDB:LISP-OBJECT-TO-MPTR MANARDB::INITIAL-CONTENTS)
; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LET LET SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN 
; --> SETF SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE 
; --> LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN BOX-CONS
;     (MANARDB::PTR
;      (MANARDB:MAKE-MARRAY MANARDB::LEN :INITIAL-CONTENTS MANARDB::NEW
;                           :MARRAY-CLASS 'MANARDB::MM-ARRAY-AS-LIST))
; ==>
;   (THE MANARDB:MPTR
;        (MANARDB::%PTR
;         (THE MANARDB:MM-OBJECT
;              (MANARDB:MAKE-MARRAY MANARDB::LEN :INITIAL-CONTENTS MANARDB::NEW
;                                   :MARRAY-CLASS 'MANARDB::MM-ARRAY-AS-LIST))))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

;     (MANARDB::PTR
;      (MAKE-INSTANCE 'MANARDB::MM-CONS :CAR (CAR CONS) :CDR (CDR CONS)))
; ==>
;   (THE MANARDB:MPTR
;        (MANARDB::%PTR
;         (THE MANARDB:MM-OBJECT
;              (MAKE-INSTANCE 'MANARDB::MM-CONS :CAR (CAR CONS) :CDR
;                             (CDR CONS)))))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

;     (MANARDB:MAKE-MARRAY MANARDB::LEN :INITIAL-CONTENTS MANARDB::NEW
;                          :MARRAY-CLASS 'MANARDB::MM-ARRAY-AS-LIST)
; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 16 4294967288), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057598332895223) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 16 4294967288), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (INTEGER 16 72057598332895223) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 16 4294967288), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057598332895223) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 16 4294967288), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (INTEGER 16 72057598332895223) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 1 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS IF 
; --> TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MANARDB::MPTR-POINTER BLOCK 
; --> MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET SETF LET* MULTIPLE-VALUE-BIND 
; --> LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; --> LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-SYMBOL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN 
; --> IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF 
; --> LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF PROGN MANARDB::PTR THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP 
; --> LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (INCF MANARDB::LEN)
; --> LET* SETQ 
; ==>
;   (THE FIXNUM #:NEW860)
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

;     (MANARDB:MAKE-MARRAY MANARDB::LEN :INITIAL-CONTENTS MANARDB::NEW
;                          :MARRAY-CLASS 'MANARDB::MM-ARRAY-AS-LIST)
; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; ==>
;   (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 8))
; 
; note: doing unsigned word to integer coercion (cost 20) to BYTES

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET MAKE-INSTANCE LOCALLY LET* MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION FUNCALL SB-C::%FUNCALL MANARDB::MAKE-MPTR 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-64 MANARDB::PTR (* #:INDEX-TMP871 8) #:VALUE872)
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; --> CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; ==>
;   (SB-KERNEL:%SET-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4) (ASH SB-C::VALUE -32))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF COND IF COND IF PROGN MANARDB::BOX-STRING 
; --> BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET SYMBOL-MACROLET COND IF PROGN LET MAPCAR LET LET 
; --> SB-INT:DO-ANONYMOUS BLOCK LET TAGBODY TAGBODY RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-C::%FUNCALL BLOCK TYPECASE LET 
; --> COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE LET COND IF 
; --> COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET 
; --> LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: WITH-CONSTANT-TAG-FOR-CLASS (TAG MM-CONS)
;     (MANARDB::CHECK-CLASS-SLOT-LAYOUT MANARDB::MM-CONS)
; 
; caught ERROR:
;   (during macroexpansion of (CHECK-CLASS-SLOT-LAYOUT MM-CONS))
;   There is no applicable method for the generic function
;     #<COMMON-LISP:STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-MEMORY-MAPPED (1)>
;   when called with arguments
;     (#<STANDARD-EFFECTIVE-SLOT-DEFINITION %PTR>).

; in: DEFUN UNBOX-CONS
;     (MANARDB:MPTR-TO-LISP-OBJECT MANARDB::A)
; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT MANARDB::B)
; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN UNBOX-ARRAY-AS-LIST
;     (MANARDB::MPTR-POINTER MANARDB::BASE)
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT
;      (MANARDB::DW (MANARDB::MPTR-POINTER MANARDB::BASE) MANARDB::N))
; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: WITH-CONSTANT-TAG-FOR-CLASS (TAG MM-SYMBOL)
;     (MANARDB::CHECK-CLASS-SLOT-LAYOUT MANARDB::MM-SYMBOL)
; 
; caught ERROR:
;   (during macroexpansion of (CHECK-CLASS-SLOT-LAYOUT MM-SYMBOL))
;   There is no applicable method for the generic function
;     #<COMMON-LISP:STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-MEMORY-MAPPED (1)>
;   when called with arguments
;     (#<STANDARD-EFFECTIVE-SLOT-DEFINITION %PTR>).

; in: DEFUN BOX-SYMBOL-MISS
;     (MANARDB::PTR
;      (MAKE-INSTANCE 'MANARDB::MM-SYMBOL :PACKAGE
;                     (IF MANARDB::PKG
;                         (PACKAGE-NAME MANARDB::PKG)
;                         NIL)
;                     :SYMBOL (SYMBOL-NAME MANARDB::OBJECT)))
; --> THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY 
; --> AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; in: DEFUN-SPEEDY BOX-SYMBOL
;     (MANARDB::DEFUN-SPEEDY MANARDB::BOX-SYMBOL
;         (MANARDB::OBJECT)
;       (DECLARE (TYPE SYMBOL MANARDB::OBJECT))
;       (COND ((NOT MANARDB::OBJECT) (MANARDB::MAKE-MPTR MANARDB::TAG 0))
;             (T
;              (OR (MANARDB::PROP-FOR-MM-SYMBOL MANARDB::OBJECT)
;                  (MANARDB::BOX-SYMBOL-MISS MANARDB::OBJECT)))))
; --> PROGN DEFUN PROGN EVAL-WHEN 
; ==>
;   (SB-IMPL::%DEFUN 'MANARDB::BOX-SYMBOL
;                    (SB-INT:NAMED-LAMBDA MANARDB::BOX-SYMBOL
;                        (MANARDB::OBJECT)
;                      (DECLARE (OPTIMIZE SPEED))
;                      (DECLARE (TYPE SYMBOL MANARDB::OBJECT))
;                      (BLOCK MANARDB::BOX-SYMBOL (COND (# #) (T #))))
;                    NIL
;                    '(SB-C:LAMBDA-WITH-LEXENV NIL NIL
;                      ((MANARDB::TAG SB-SYS:MACRO . 0)) (MANARDB::OBJECT)
;                      (DECLARE (OPTIMIZE SPEED))
;                      (DECLARE (TYPE SYMBOL MANARDB::OBJECT))
;                      (BLOCK MANARDB::BOX-SYMBOL (COND (# #) (T #))))
;                    (SB-C:SOURCE-LOCATION))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; in: DEFUN-SPEEDY UNBOX-SYMBOL
;     (ZEROP MANARDB::INDEX)
; ==>
;   (= MANARDB::INDEX 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (MAKE-SYMBOL SYMBOL-NAME)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a STRING, not a SIMPLE-STRING.

;     (MANARDB::MPOINTER MANARDB::TAG MANARDB::INDEX)
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT PACKAGE-NAME)
; --> PACKAGE-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> PACKAGE-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT SYMBOL-NAME)
; --> SYMBOL-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> SYMBOL-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK FUNCALL SB-C::%FUNCALL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MAKE-MPTR MANARDB::TAG MANARDB::INDEX)
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

;     (MANARDB:MPTR-TO-LISP-OBJECT PACKAGE-NAME)
; --> PACKAGE-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> PACKAGE-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

;     (MANARDB:MPTR-TO-LISP-OBJECT SYMBOL-NAME)
; --> SYMBOL-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> SYMBOL-NAME MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY TAG-GENERAL-UNBOX-ARRAY
;     (MANARDB::MPOINTER MANARDB::TAG MANARDB::INDEX)
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB::BASE)
; --> MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::UNBOX-ARRAY-INTERNAL (MANARDB::MPTR-TAG MANARDB::BASE)
;                                    (MANARDB::MPTR-INDEX MANARDB::BASE) LENGTH)
; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 32), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
;       etc.

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                   (SIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF COND THE PROGN 
; --> MANARDB::UNBOX-ARRAY-INTERNAL-GENERAL BLOCK LET* LOOP BLOCK LET LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ MANARDB::INDEX #:LOOP-STEP-BY-1637)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-INDEX MANARDB::BASE)
; --> MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

;     (MANARDB::UNBOX-ARRAY-INTERNAL (MANARDB::MPTR-TAG MANARDB::BASE)
;                                    (MANARDB::MPTR-INDEX MANARDB::BASE) LENGTH)
; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK CASE LET COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-DOUBLE MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-SINGLE MANARDB::POINTER (* MANARDB::I 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF PROGN LET LOOP BLOCK LET 
; --> SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SIGNED-SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing signed word to integer coercion (cost 20)

; --> BLOCK CASE LET COND IF COND IF COND IF COND IF COND IF PROGN LET LOOP 
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND LET 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN UNBOX-ARRAY
;     (MANARDB::TAG-GENERAL-UNBOX-ARRAY MANARDB::TAG MANARDB::INDEX)
; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::MPOINTER 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 32), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                   (SIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF COND THE PROGN MANARDB::UNBOX-ARRAY-INTERNAL-GENERAL BLOCK 
; --> LET* LOOP BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY 
; --> SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ MANARDB::INDEX #:LOOP-STEP-BY-1777)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF PROGN LET 
; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND 
; --> LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-DOUBLE MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF 
; --> PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-SINGLE MANARDB::POINTER (* MANARDB::I 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing signed word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN UNBOX-STRING
;     (MANARDB::TAG-GENERAL-UNBOX-ARRAY MANARDB::TAG MANARDB::INDEX)
; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::MPOINTER 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 32), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                   (SIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF COND THE PROGN MANARDB::UNBOX-ARRAY-INTERNAL-GENERAL BLOCK 
; --> LET* LOOP BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY 
; --> SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ MANARDB::INDEX #:LOOP-STEP-BY-1913)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF PROGN LET 
; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND 
; --> LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-DOUBLE MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF 
; --> PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-SINGLE MANARDB::POINTER (* MANARDB::I 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing signed word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFINE-BOX-ARRAY INTERNAL-BOX-STRING
;     (MANARDB::DEFINE-BOX-ARRAY MANARDB::INTERNAL-BOX-STRING MANARDB::BOXED-BYTE
;                                (UNSIGNED-BYTE 8) :ARRAY-CLASS MANARDB::MM-STRING)
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::WITH-CONSTANT-TAG-FOR-CLASS PROGN SYMBOL-MACROLET 
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY BOX-STRING
;     (CL-IRREGSEXP.BYTESTRINGS:FORCE-SIMPLE-BYTE-VECTOR STRING)
; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-SIMPLE-BYTE-VECTOR-CONSISTENT-INTERNAL 
; --> BLOCK LET CL-IRREGSEXP.BYTESTRINGS:FORCE-BYTE-VECTOR 
; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-BYTE-VECTOR-CONSISTENT-INTERNAL BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN COERCE THE IF 
; --> REPLACE MAKE-ARRAY LOCALLY MAKE-ARRAY 
; ==>
;   (LENGTH SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-SIMPLE-BYTE-VECTOR-CONSISTENT-INTERNAL 
; --> BLOCK LET CL-IRREGSEXP.BYTESTRINGS:FORCE-BYTE-VECTOR 
; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-BYTE-VECTOR-CONSISTENT-INTERNAL BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN COERCE THE IF 
; ==>
;   (REPLACE (MAKE-ARRAY (LENGTH SB-C::X) :ELEMENT-TYPE '(UNSIGNED-BYTE 8))
;            SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).

;     (MANARDB::INTERNAL-BOX-STRING
;      (CL-IRREGSEXP.BYTESTRINGS:FORCE-SIMPLE-BYTE-VECTOR STRING))
; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > 
; --> THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> BLOCK LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> BLOCK LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK LET* LET MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET* MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK LET* LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior
; in: LAMBDA (#:WHOLE2321 #:ENVIRONMENT2322)
;     (ASH (MANARDB::MM-SLOT-OFFSET 'MANARDB::MM-ARRAY 'MANARDB::BASE)
;          MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a T, not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES
;                                                          (UNSIGNED-BYTE 32)
;                                                          &REST T).
;       etc.

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY WALK-ARRAY
;     (FUNCALL MANARDB::FUNC MANARDB::BASE (+ MANARDB:MPTR (MANARDB::BASE-OFFSET))
;              LENGTH)
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN MANARDB::FUNC)
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   not known to be a function

;     (MANARDB::MPTR-POINTER MANARDB:MPTR)
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-TAG MULTIPLE-VALUE-BIND LET UNLESS 
; --> IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (LET ((LENGTH LENGTH))
;       (UNLESS (ZEROP LENGTH)
;         (FUNCALL MANARDB::FUNC MANARDB::BASE
;                  (+ MANARDB:MPTR (MANARDB::BASE-OFFSET)) LENGTH)))
; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (FUNCALL MANARDB::FUNC MANARDB::BASE (+ MANARDB:MPTR (MANARDB::BASE-OFFSET))
;              LENGTH)
; --> SB-C::%FUNCALL MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> SB-C::%FUNCALL MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (+ MANARDB:MPTR (MANARDB::BASE-OFFSET))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2048 18446744073709553663) &OPTIONAL), not a (VALUES
;                                                                                      FIXNUM
;                                                                                      &REST
;                                                                                      T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2048 18446744073709553663) &OPTIONAL), not a (VALUES
;                                                                                      FIXNUM
;                                                                                      &REST
;                                                                                      T).
;       etc.

;     (LET ((LENGTH LENGTH))
;       (UNLESS (ZEROP LENGTH)
;         (FUNCALL MANARDB::FUNC MANARDB::BASE
;                  (+ MANARDB:MPTR (MANARDB::BASE-OFFSET)) LENGTH)))
; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> LENGTH MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

;     (FUNCALL MANARDB::FUNC MANARDB::BASE (+ MANARDB:MPTR (MANARDB::BASE-OFFSET))
;              LENGTH)
; --> SB-C::%FUNCALL MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> SB-C::%FUNCALL MANARDB::BASE MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/box.lisp
; in: DEFUN-SPEEDY MEQ
;     (MANARDB::PTR MANARDB::A)
; --> THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY 
; --> AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (MANARDB::PTR MANARDB::B)
; --> THE MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY 
; --> AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (= (MANARDB::PTR MANARDB::A) (MANARDB::PTR MANARDB::B))
; --> EQL IF 
; ==>
;   (EQL SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-EQL (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
; 
; compilation unit finished
;   Undefined function:
;     ELEM
;   caught 2 ERROR conditions
;   printed 491 notes
Date/time: 2013-11-15-03:43An unhandled error condition has been signalled:
                              COMPILE-FILE-ERROR while
                              compiling #<CL-SOURCE-FILE "manardb" "src" "box">


Backtrace for: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>
0: ((LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX))
1: (SB-IMPL::CALL-WITH-SANE-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {EE81A2D}>)
2: (SB-IMPL::%WITH-STANDARD-IO-SYNTAX #<CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {EE81A15}>)
3: (PRINT-BACKTRACE :STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :START 0 :FROM :DEBUGGER-FRAME :COUNT 536870911 :PRINT-THREAD T :PRINT-FRAME-SOURCE NIL :METHOD-FRAME-STYLE NIL)
4: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE-TO-STREAM #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}>)
5: (TRIVIAL-BACKTRACE:PRINT-BACKTRACE #<UIOP/LISP-BUILD:COMPILE-FILE-ERROR {EE7D629}> :OUTPUT #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {90C5EC1}> :IF-EXISTS :APPEND :VERBOSE NIL)
6: (QUICKDOCS.PARSER.ASDF::ASDF-SYSTEM-RELOAD #<ASDF/SYSTEM:SYSTEM "manardb">)
7: ((FLET #:WITHOUT-INTERRUPTS-BODY-537 :IN SB-THREAD::CALL-WITH-MUTEX))
8: (SB-THREAD::CALL-WITH-MUTEX #<CLOSURE (FLET SB-THREAD::WITH-MUTEX-THUNK :IN QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED) {B788F9DD}> #<SB-THREAD:MUTEX "system-load-lock" owner: #<SB-THREAD:THREAD "main thread" RUNNING {B562909}>> NIL T NIL)
9: (QUICKDOCS.PARSER.ASDF:ENSURE-SYSTEM-LOADED #<ASDF/SYSTEM:SYSTEM "manardb"> :FORCE NIL)
10: ((:METHOD QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:SYSTEM)) #<ASDF/SYSTEM:SYSTEM "manardb">) [fast-method]
11: ((LAMBDA ()))
12: (SB-INT:SIMPLE-EVAL-IN-LEXENV (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))) #<NULL-LEXENV>)
13: (EVAL (QUICKDOCS.PARSER.UTIL:WITH-RETRYING 5 (QUICKDOCS.PARSER:PARSE-DOCUMENTATION (ASDF/SYSTEM:FIND-SYSTEM "manardb"))))
14: (SHELLY.CORE:INTERPRET ("QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL)
15: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL) #<NULL-LEXENV>)
16: (EVAL (SHELLY.CORE:INTERPRET (LIST "QUICKDOCS.PARSER.UTIL:WITH-RETRYING" "5" "(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \"manardb\"))") :VERBOSE NIL))
17: (SB-IMPL::PROCESS-EVAL/LOAD-OPTIONS ((:EVAL . "(shelly.util::check-version \"0.5.8\")") (:EVAL . "(shelly.util::load-global-shlyfile)") (:EVAL . "(shelly.util::load-local-shlyfile #P\"/home/quickdocs_dev/quickdocs2/shlyfile.lisp\")") (:EVAL . "(shelly.core::interpret (list \"QUICKDOCS.PARSER.UTIL:WITH-RETRYING\" \"5\" \"(QUICKDOCS.PARSER:PARSE-DOCUMENTATION
                                                                                                             (ASDF/SYSTEM:FIND-SYSTEM
                                                                                                              \\\"manardb\\\"))\") :verbose nil)") (:EVAL . "(swank-backend:quit-lisp)")))
18: (SB-IMPL::TOPLEVEL-INIT)
19: ((FLET #:WITHOUT-INTERRUPTS-BODY-42 :IN SAVE-LISP-AND-DIE))
20: ((LABELS SB-IMPL::RESTART-LISP :IN SAVE-LISP-AND-DIE))


; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/finalize.lisp
; in: DEFINE-LISP-OBJECT-TO-MPTR
;     (MANARDB::DEFINE-LISP-OBJECT-TO-MPTR)
; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; ==>
;   (MANARDB::BOX-SYMBOL MANARDB::OBJECT)
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF PROGN MANARDB::PTR 
; ==>
;   (THE MANARDB:MPTR (MANARDB::%PTR (THE MANARDB:MM-OBJECT MANARDB::OBJ)))
; 
; note: type assertion too complex to check:
;  (VALUES (UNSIGNED-BYTE 64) &REST T).

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 72057594037927939) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 4 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 9 18446744073709551369) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF TYPEP LET AND IF AND THE LOCALLY AND 
; --> IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK 
; --> THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 10 18446744073709551370) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a (SIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SIGNED-SAP-REF-64 PROGN SB-KERNEL:%SET-SIGNED-SAP-REF-32 
; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                   (UNSIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    FIXNUM
;                                                                                    &REST
;                                                                                    T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 11 18446744073709551371) &OPTIONAL), not a (VALUES
;                                                                                    (UNSIGNED-BYTE
;                                                                                     32)
;                                                                                    &REST
;                                                                                    T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 72057594574798844) &OPTIONAL), not a (VALUES
;                                                                          (SIGNED-BYTE
;                                                                           32)
;                                                                          &REST
;                                                                          T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 16 72057594037927951) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 16 72057594037927935), not a (UNSIGNED-BYTE
;                                                                      32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET MANARDB::MAKE-MPTR 
; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY SETF 
; --> PROGN SETF SETQ SETF LET* MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET 
; --> CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 PROGN 
; --> SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (SIGNED-BYTE
;                                                                        32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 32) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 7 18446744073709551367), not a (UNSIGNED-BYTE
;                                                                        32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 4 18446744073709551364) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 72057594037927943) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 8 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 8 18446744073709551368) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 72057594037927936) &OPTIONAL), not a (VALUES
;                                                                                FIXNUM
;                                                                                &REST
;                                                                                T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL 
; --> (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* MULTIPLE-VALUE-BIND LET 
; --> PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF SB-KERNEL:%SET-SAP-REF-64 
; --> PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                     32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (INTEGER 1 72057594037927935), not a (UNSIGNED-BYTE
;                                                                     32).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MAKE-MPTR BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET 
; --> MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK MANARDB::D 
; --> CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF COND IF COND IF PROGN 
; --> MANARDB::BOX-STRING BLOCK MANARDB::INTERNAL-BOX-STRING BLOCK LET* LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF COND IF PROGN LET 
; --> MANARDB::MTAGMAP-ALLOC BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC 
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> MANARDB::DEFUN-SPEEDY PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK 
; --> TYPECASE LET COND IF COND THE PROGN MANARDB::BOX-OBJECT BLOCK TYPECASE 
; --> LET COND IF COND IF COND IF PROGN LET MANARDB::MTAGMAP-ALLOC BLOCK 
; --> SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD BLOCK 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior
; 
; compilation unit finished
;   printed 86 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/iterator.lisp
; in: DEFUN RETRIEVE-ALL-INSTANCES
;     (MANARDB:DOSUBCLASSES (MANARDB::P CLASS :FRESH-INSTANCES T)
;       (PUSH MANARDB::P MANARDB::RET))
; --> FLET BLOCK MANARDB:DOCLASS LET* WHEN IF PROGN LET UNLESS IF PROGN LET* 
; --> MANARDB::MTAGMAP-LAST-INDEX BLOCK MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> FLET BLOCK MANARDB:DOCLASS LET* WHEN IF PROGN LET UNLESS IF PROGN LET* 
; --> MANARDB::MTAGMAP-LAST-INDEX BLOCK MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> FLET BLOCK MANARDB:DOCLASS LET* WHEN IF PROGN LET UNLESS IF PROGN LET* 
; --> MANARDB::MTAGMAP-LAST-INDEX BLOCK MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> FLET BLOCK MANARDB:DOCLASS LET* WHEN IF PROGN LET UNLESS IF PROGN LET* 
; --> MANARDB::MTAGMAP-LAST-INDEX BLOCK MANARDB::MTAGMAP-NEXT 
; --> MANARDB::MTAGMAP-WORD BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior
; 
; compilation unit finished
;   printed 4 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/fixed-string.lisp
; in: DEFUN MM-FIXED-STRING-VALUE
;     (MANARDB::MM-OBJECT-POINTER MANARDB::MFS)
; --> BLOCK MANARDB::MPTR-POINTER MANARDB::PTR THE MULTIPLE-VALUE-BIND LET 
; --> UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPTR-POINTER BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX 
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-INDEX (MANARDB::PTR MANARDB::MFS))
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::TAG-GENERAL-UNBOX-ARRAY
;      (MANARDB::MPTR-TAG (MANARDB::PTR MANARDB::MFS))
;      (MANARDB::MPTR-INDEX (MANARDB::PTR MANARDB::MFS)))
; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (SIGNED-BYTE 32), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES
;                        (INTEGER -9223372036854775808 9223372032559808512)
;                        &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a FIXNUM.
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES FIXNUM
;                                                                          &REST
;                                                                          T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER -9223372036854775808
;                                 9223372032559808512), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (SIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                   (SIGNED-BYTE
;                                                                    32)
;                                                                   &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF COND THE PROGN MANARDB::UNBOX-ARRAY-INTERNAL-GENERAL BLOCK 
; --> LET* LOOP BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY 
; --> SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ MANARDB::INDEX #:LOOP-STEP-BY-35)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (INTEGER 1 72057594037927935), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 FIXNUM
;                                                                                 &REST
;                                                                                 T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (INTEGER 1 72057594037927935), not a (SIGNED-BYTE
;                                                                      32).
;       The result is a (VALUES (INTEGER 1 144115188075855870) &OPTIONAL), not a (VALUES
;                                                                                 (SIGNED-BYTE
;                                                                                  32)
;                                                                                 &REST
;                                                                                 T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; --> LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL MANARDB::MPTR-INDEX MANARDB::BASE 
; --> MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL LENGTH MANARDB::D CFFI:MEM-AREF 
; --> CFFI:MEM-REF CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF PROGN LET 
; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* MULTIPLE-VALUE-BIND 
; --> LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-DOUBLE MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF 
; --> PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-SINGLE MANARDB::POINTER (* MANARDB::I 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-64 MANARDB::POINTER (* MANARDB::I 8))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR ASH 
; ==>
;   (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of CHECK-FIXNUM

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing signed word to integer coercion (cost 20)

; --> BLOCK MANARDB::WITH-POINTER-SLOTS LET MANARDB::WITH-RAW-SLOT LET 
; --> SYMBOL-MACROLET MANARDB::WITH-RAW-SLOT LET SYMBOL-MACROLET LOCALLY 
; --> MANARDB::UNBOX-ARRAY-INTERNAL BLOCK CASE LET COND IF COND IF COND IF COND 
; --> IF COND IF PROGN LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SETF LET* 
; --> MULTIPLE-VALUE-BIND LET MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF 
; --> CFFI-SYS:%MEM-REF SB-SYS:SIGNED-SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SIGNED-SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/fixed-string.lisp
; in: DEFUN-SPEEDY MAKE-MM-FIXED-STRING
;     (* LENGTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
; 
; note: unable to
;   associate */* of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate *// of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   fold identity operations
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR RATIONAL (COMPLEX RATIONAL)).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32)
;                                                            &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a FIXNUM.
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 1))
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF 
; --> >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 18446744069414584321) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a FIXNUM.
;       The second argument is a (MOD 18446744069414584321), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 32), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 18446744069414584321), not a (SIGNED-BYTE
;                                                                   32).
;       The result is a (VALUES (UNSIGNED-BYTE 64) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF > THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET WHEN IF 
; ==>
;   (> (THE MANARDB::MINDEX (+ ITERATE:NEXT MANARDB::BYTES))
;      (THE MANARDB::MINDEX MANARDB::LEN))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET THE 
; ==>
;   (+ ITERATE:NEXT MANARDB::BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The second argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           FIXNUM
;                                                                           &REST
;                                                                           T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The second argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (MOD 144115188075855871) &OPTIONAL), not a (VALUES
;                                                                           (SIGNED-BYTE
;                                                                            32)
;                                                                           &REST
;                                                                           T).
;       etc.

; --> BLOCK SYMBOL-MACROLET LET SETF LET* MULTIPLE-VALUE-BIND LET FUNCALL 
; --> SB-C::%FUNCALL (SETF MANARDB::MTAGMAP-WORD) BLOCK SETF LET* 
; --> MULTIPLE-VALUE-BIND LET PROGN CFFI::MEM-SET CFFI-SYS:%MEM-SET LET SETF 
; --> SB-KERNEL:%SET-SAP-REF-64 PROGN SB-KERNEL:%SET-SAP-REF-32 
; ==>
;   (LOGAND SB-C::VALUE 4294967295)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (SIGNED-BYTE 32).
;       etc.

; ==>
;   (ASH SB-C::VALUE -32)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       etc.

;     (MANARDB::MAKE-MPTR MANARDB::ELEMENT-TAG
;                         (MANARDB::MTAGMAP-ALLOC
;                          (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 1)))
; --> BLOCK THE LOGIOR 
; ==>
;   (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a FIXNUM.
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             FIXNUM
;                                                                             &REST
;                                                                             T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 56), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (MOD 18446744073709551361) &OPTIONAL), not a (VALUES
;                                                                             (UNSIGNED-BYTE
;                                                                              32)
;                                                                             &REST
;                                                                             T).
;       etc.

; --> BLOCK THE 
; ==>
;   (LOGIOR (ASH MANARDB::INDEX MANARDB::+MTAG-BITS+) MANARDB::TAG)
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (MOD 18446744073709551361), not a FIXNUM.
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   FIXNUM
;                                                                                   &REST
;                                                                                   T).
;       unable to do inline (unsigned-byte 32) arithmetic (cost 2) because:
;       The first argument is a (MOD 18446744073709551361), not a (UNSIGNED-BYTE
;                                                                  32).
;       The result is a (VALUES (INTEGER 7 18446744073709551367) &OPTIONAL), not a (VALUES
;                                                                                   (UNSIGNED-BYTE
;                                                                                    32)
;                                                                                   &REST
;                                                                                   T).
;       etc.

;     (MANARDB::MTAGMAP-ALLOC (MANARDB::MTAGMAP MANARDB::ELEMENT-TAG) (* LENGTH 1))
; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 LOGIOR 
; ==>
;   (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32)
; 
; note: doing unsigned word to integer coercion (cost 20)

; --> BLOCK SYMBOL-MACROLET LET MANARDB::MTAGMAP-NEXT MANARDB::MTAGMAP-WORD 
; --> BLOCK MANARDB::D CFFI:MEM-AREF CFFI:MEM-REF CFFI-SYS:%MEM-REF 
; --> SB-SYS:SAP-REF-64 
; ==>
;   (LOGIOR (SB-SYS:SAP-REF-32 SB-C::SAP SB-C::OFFSET)
;           (ASH (SB-SYS:SAP-REF-32 SB-C::SAP (+ SB-C::OFFSET 4)) 32))
; 
; note: doing unsigned word to integer coercion (cost 20), for:
;       the first argument of static-fun Two-arg-ior

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/fixed-string.lisp
; in: DEFUN MM-FIXED-STRING-STORE
;     (CL-IRREGSEXP.BYTESTRINGS:FORCE-BYTE-VECTOR STRING)
; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-BYTE-VECTOR-CONSISTENT-INTERNAL BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN COERCE THE IF 
; --> REPLACE MAKE-ARRAY LOCALLY MAKE-ARRAY 
; ==>
;   (LENGTH SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; --> CL-IRREGSEXP.BYTESTRINGS::FORCE-BYTE-VECTOR-CONSISTENT-INTERNAL BLOCK 
; --> TYPECASE LET COND IF COND IF COND IF COND IF COND IF PROGN COERCE THE IF 
; ==>
;   (REPLACE (MAKE-ARRAY (LENGTH SB-C::X) :ELEMENT-TYPE '(UNSIGNED-BYTE 8))
;            SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).

;     (MANARDB::MM-OBJECT-POINTER MANARDB::MFS)
; --> BLOCK MANARDB::MPTR-POINTER MANARDB::PTR THE MULTIPLE-VALUE-BIND LET 
; --> UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND IF >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK MANARDB::MPTR-POINTER BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX 
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (MANARDB::MPTR-POINTER MANARDB::BASE)
; --> BLOCK MANARDB::MPOINTER MANARDB::MPTR-INDEX BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.
; 
; compilation unit finished
;   printed 55 notes

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/transaction.lisp
; in: DEFUN CHECK-SCHEMA
;     (ASSERT (MANARDB::SCHEMA-SUPERSET-P MANARDB::SCHEMA (MANARDB::SCHEMA))
;             (MANARDB::SCHEMA) "Schema in ~A in not compatible" (MANARDB::MAINDIR))
; --> TAGBODY LET SB-KERNEL:ASSERT-ERROR 
; ==>
;   "Schema in ~A in not compatible"
; 
; note: deleting unreachable code

; --> TAGBODY SETF SETQ THE SB-IMPL::ASSERT-PROMPT 
; ==>
;   MANARDB::SCHEMA
; 
; note: deleting unreachable code

; file: /home/quickdocs_dev/quicklisp/dists/quicklisp/software/manardb-20101207-git/src/transaction.lisp
; in: DEFUN INSTANTIATE-DEFAULT-MM-OBJECT
;     (MANARDB::MPTR-INDEX MANARDB:MPTR)
; --> BLOCK THE 
; ==>
;   (ASH MANARDB:MPTR (- MANARDB::+MTAG-BITS+))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 64), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 56) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.
; 
; compilation unit finished
;   printed 3 notes
Error: There is no method on
       #<STANDARD-GENERIC-FUNCTION MANARDB::SLOT-DEFINITION-MEMORY-MAPPED (1)>
       with no qualifiers and specializers (#<BUILT-IN-CLASS T>).